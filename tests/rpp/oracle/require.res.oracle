[kernel] Parsing tests/rpp/require.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int y, int h) ;
  
  logic int f_acsl_pure_1(int x, int z) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int z, int y, int h;
      g_acsl_pure_1(y, h) + f_acsl_pure_1(x, z) > 125;
  
  }
 */
/*@ requires x > 0 ∧ z > 15;
    assigns \result;
    assigns \result \from x, z;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x), \old(z));
 */
int f(int x, int z)
{
  int __retres;
  __retres = (x + 5) + z;
  return __retres;
}

/*@ requires y > 0 ∧ h > 100;
    assigns \result;
    assigns \result \from y, h;
    
    behavior Relational_behavior_1:
      ensures \result ≡ g_acsl_pure_1(\old(y), \old(h));
 */
int g(int y, int h)
{
  int __retres;
  __retres = (y + 5) + h;
  return __retres;
}

/*@ requires x > 0 ∧ z > 15;
    requires y > 0 ∧ h > 100; */
void relational_wrapper_1(int x, int z, int y, int h)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: y > 0 ∧ h > 100; */
    __retres_1 = (y + 5) + h;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: x > 0 ∧ z > 15; */
    __retres_2 = (x + 5) + z;
    return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 + return_variable_relational_2 > 125;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
