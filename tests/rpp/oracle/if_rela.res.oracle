[kernel] Parsing tests/rpp/if_rela.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int Med_acsl_pure_1(int u, int v, int w) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int a, int b, int c;
      Med_acsl_pure_1(a, b, c) ≡ Med_acsl_pure_1(a, c, b);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int Med_acsl_pure_2(int u, int v, int w) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int a, int b, int c;
      Med_acsl_pure_2(a, b, c) ≡ Med_acsl_pure_2(b, a, c);
  
  }
 */
/*@ assigns \result;
    assigns \result \from u, v, w;
    
    behavior id1:
      assumes v < w ∧ u < v;
      ensures \result ≡ \old(v);
      assigns \result;
      assigns \result \from u, v, w;
    
    behavior id2:
      assumes v < w ∧ u < w ∧ u > v;
      ensures \result ≡ \old(u);
      assigns \result;
      assigns \result \from u, v, w;
    
    behavior id3:
      assumes v > w ∧ u > v;
      ensures \result ≡ \old(v);
      assigns \result;
      assigns \result \from u, v, w;
    
    behavior id4:
      assumes v > w ∧ u < v ∧ u > w;
      ensures \result ≡ \old(u);
      assigns \result;
      assigns \result \from u, v, w;
    
    behavior Relational_behavior_1:
      ensures \result ≡ Med_acsl_pure_1(\old(u), \old(v), \old(w));
    
    behavior Relational_behavior_2:
      ensures \result ≡ Med_acsl_pure_2(\old(u), \old(v), \old(w));
 */
int Med(int u, int v, int w)
{
  int med;
  med = w;
  if (v < w) {
    if (u < v) med = v;
    else 
      if (u < w) med = u;
  }
  else 
    if (u > v) med = v;
    else 
      if (u > w) med = u;
  return med;
}

void relational_wrapper_1(int a, int b, int c)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int med_1;
    med_1 = c;
    if (b < c) {
      if (a < b) med_1 = b;
      else 
        if (a < c) med_1 = a;
    }
    else 
      if (a > b) med_1 = b;
      else 
        if (a > c) med_1 = a;
    return_variable_relational_1 = med_1;
  }
  {
    int med_2;
    med_2 = b;
    if (c < b) {
      if (a < c) med_2 = c;
      else 
        if (a < b) med_2 = a;
    }
    else 
      if (a > c) med_2 = c;
      else 
        if (a > b) med_2 = a;
    return_variable_relational_2 = med_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(int a, int b, int c)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int med_3;
    med_3 = c;
    if (b < c) {
      if (a < b) med_3 = b;
      else 
        if (a < c) med_3 = a;
    }
    else 
      if (a > b) med_3 = b;
      else 
        if (a > c) med_3 = a;
    return_variable_relational_3 = med_3;
  }
  {
    int med_4;
    med_4 = c;
    if (a < c) {
      if (b < a) med_4 = a;
      else 
        if (b < c) med_4 = b;
    }
    else 
      if (b > a) med_4 = a;
      else 
        if (b > c) med_4 = b;
    return_variable_relational_4 = med_4;
  }
  /*@ check
      Rpp: return_variable_relational_3 ≡ return_variable_relational_4;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
