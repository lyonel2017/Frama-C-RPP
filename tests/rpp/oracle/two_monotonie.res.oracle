[kernel] Parsing tests/rpp/two_monotonie.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_4 {
  logic int f1_acsl_pure_4(int x) ;
  
  logic int f2_acsl_pure_4(int y) ;
  
  logic int g_acsl_pure_4(int x) ;
  
  lemma Relational_lemma_4{L}:
    ∀ int x1;
      x1 > 0 ⇒ f1_acsl_pure_4(x1) < f2_acsl_pure_4(x1) < g_acsl_pure_4(x1);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int f1_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ f1_acsl_pure_1(x1) < f1_acsl_pure_1(x2);
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_4:
      ensures \result ≡ f1_acsl_pure_4(\old(x));
 */
int f1(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    __retres_1 = x1 + 1;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    __retres_2 = x2 + 1;
    return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}

/*@
axiomatic Relational_axiome_2 {
  logic int f2_acsl_pure_2(int y) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ f2_acsl_pure_2(x1) < f2_acsl_pure_2(x2);
  
  }

*/
/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior_2:
      ensures \result ≡ f2_acsl_pure_2(\old(y));
    
    behavior Relational_behavior_4:
      ensures \result ≡ f2_acsl_pure_4(\old(y));
 */
int f2(int y)
{
  int __retres;
  __retres = 2 + y;
  return __retres;
}

void relational_wrapper_2(int x1, int x2)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int __retres_3;
    __retres_3 = 2 + x1;
    return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    __retres_4 = 2 + x2;
    return_variable_relational_4 = __retres_4;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}

/*@
axiomatic Relational_axiome_3 {
  logic int g_acsl_pure_3(int x) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ g_acsl_pure_3(x1) < g_acsl_pure_3(x2);
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_3:
      ensures \result ≡ g_acsl_pure_3(\old(x));
    
    behavior Relational_behavior_4:
      ensures \result ≡ g_acsl_pure_4(\old(x));
 */
int g(int x)
{
  int __retres;
  int tmp;
  int tmp_0;
  tmp = f1(x);
  tmp_0 = f2(x);
  __retres = tmp + tmp_0;
  return __retres;
}

int f1_aux_3(int x);

int f2_aux_3(int y);

void relational_wrapper_3(int x1, int x2)
{
  int return_variable_relational_5;
  int return_variable_relational_6;
  {
    int __retres_5;
    int tmp_5;
    int tmp_0_5;
    tmp_5 = f1_aux_3(x1);
    tmp_0_5 = f2_aux_3(x1);
    __retres_5 = tmp_5 + tmp_0_5;
    return_variable_relational_5 = __retres_5;
  }
  {
    int __retres_6;
    int tmp_6;
    int tmp_0_6;
    tmp_6 = f1_aux_3(x2);
    tmp_0_6 = f2_aux_3(x2);
    __retres_6 = tmp_6 + tmp_0_6;
    return_variable_relational_6 = __retres_6;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_5 < return_variable_relational_6;
  */
  return;
}

int f1_aux_4(int x);

int f2_aux_4(int y);

void relational_wrapper_4(int x1)
{
  int return_variable_relational_7;
  int return_variable_relational_8;
  int return_variable_relational_9;
  int return_variable_relational_10;
  {
    int __retres_7;
    __retres_7 = x1 + 1;
    return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    __retres_8 = 2 + x1;
    return_variable_relational_8 = __retres_8;
  }
  {
    int __retres_9;
    __retres_9 = 2 + x1;
    return_variable_relational_9 = __retres_9;
  }
  {
    int __retres_10;
    int tmp_10;
    int tmp_0_10;
    tmp_10 = f1_aux_4(x1);
    tmp_0_10 = f2_aux_4(x1);
    __retres_10 = tmp_10 + tmp_0_10;
    return_variable_relational_10 = __retres_10;
  }
  /*@ assert
      Rpp:
        x1 > 0 ⇒
        return_variable_relational_7 < return_variable_relational_8 ∧
        return_variable_relational_9 < return_variable_relational_10;
  */
  return;
}

/*@
axiomatic Relational_axiome_5 {
  logic int h_acsl_pure_5(int x) ;
  
  lemma Relational_lemma_5{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ h_acsl_pure_5(x1) < h_acsl_pure_5(x2);
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_5:
      ensures \result ≡ h_acsl_pure_5(\old(x));
 */
int h(int x)
{
  int tmp_0;
  int tmp;
  tmp = f2(x);
  tmp_0 = f1(tmp);
  return tmp_0;
}

int f2_aux_5(int y);

int f1_aux_5(int x);

void relational_wrapper_5(int x1, int x2)
{
  int return_variable_relational_11;
  int return_variable_relational_12;
  {
    int tmp_0_11;
    int tmp_11;
    tmp_11 = f2_aux_5(x1);
    tmp_0_11 = f1_aux_5(tmp_11);
    return_variable_relational_11 = tmp_0_11;
  }
  {
    int tmp_0_12;
    int tmp_12;
    tmp_12 = f2_aux_5(x2);
    tmp_0_12 = f1_aux_5(tmp_12);
    return_variable_relational_12 = tmp_0_12;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_11 < return_variable_relational_12;
  */
  return;
}

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
      ensures \result ≡ f1_acsl_pure_4(\old(x));
    
    behavior Relational_behavior_helper:
      ensures ∀ int x; g_acsl_pure_4(x) ≡ g_acsl_pure_3(x);
      ensures ∀ int y; f2_acsl_pure_4(y) ≡ f2_acsl_pure_2(y);
 */
int f1_aux_5(int x);

/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior:
      ensures \result ≡ f2_acsl_pure_2(\old(y));
      ensures \result ≡ f2_acsl_pure_4(\old(y));
    
    behavior Relational_behavior_helper:
      ensures ∀ int x; g_acsl_pure_4(x) ≡ g_acsl_pure_3(x);
      ensures ∀ int x; f1_acsl_pure_4(x) ≡ f1_acsl_pure_1(x);
 */
int f2_aux_5(int y);

/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior:
      ensures \result ≡ f2_acsl_pure_2(\old(y));
 */
int f2_aux_4(int y);

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
 */
int f1_aux_4(int x);

/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior:
      ensures \result ≡ f2_acsl_pure_2(\old(y));
 */
int f2_aux_3(int y);

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
 */
int f1_aux_3(int x);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
