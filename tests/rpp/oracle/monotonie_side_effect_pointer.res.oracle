[kernel] Parsing tests/rpp/monotonie_side_effect_pointer.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int *y;
/*@
axiomatic Relational_axiome_1 {
  predicate k_acsl_1{pre, post}(int x, int *y) 
    reads \at(*y,post), \at(*y,pre);
  
  lemma Relational_lemma_1{pre_id2, post_id2, pre_id1, post_id1}:
    ∀ int x, int *y_id2, int *y_id1;
      \separated(y_id1, y_id2) ⇒
      k_acsl_1{pre_id2, post_id2}(x, y_id2) ⇒
      k_acsl_1{pre_id1, post_id1}(x, y_id1) ⇒
      \at(*y_id1,pre_id1) < \at(*y_id2,pre_id2) ∧ x > 0 ⇒
      \at(*y_id1,post_id1) < \at(*y_id2,post_id2);
  
  }
 */
/*@ requires \valid(y);
    requires *y > 0;
    assigns *y;
    assigns *y \from *y, x;
    
    behavior Relational_behavior_1:
      ensures k_acsl_1{Pre, Post}(\old(x), y);
 */
void k(int x)
{
  *y += x;
  return;
}

/*@
axiomatic Relational_axiome_2 {
  predicate f_acsl_2{pre, post}(int *x) 
    reads \at(*x,post), \at(*x,pre);
  
  lemma Relational_lemma_2{pre_id4, post_id4, pre_id3, post_id3}:
    ∀ int *x1, int *x2;
      \separated(x1, x2) ⇒
      f_acsl_2{pre_id4, post_id4}(x2) ⇒
      f_acsl_2{pre_id3, post_id3}(x1) ⇒
      \at(*x1,pre_id3) < \at(*x2,pre_id4) ⇒
      \at(*x1,post_id3) < \at(*x2,post_id4);
  
  }

*/
/*@ requires \valid(x);
    assigns *x;
    assigns *x \from *x;
    
    behavior Relational_behavior_2:
      ensures f_acsl_2{Pre, Post}(\old(x));
 */
void f(int *x)
{
  *x += 5;
  return;
}

int *y_id1_1;

int *y_id2_1;

/*@ requires \separated(y_id1_1, y_id2_1);
    requires \valid(y_id2_1);
    requires *y_id2_1 > 0;
    requires \valid(y_id1_1);
    requires *y_id1_1 > 0;
 */
void relational_wrapper_1(int x)
{
  /*@ assert Rpp: \valid(y_id1_1); */
  /*@ assert Rpp: *y_id1_1 > 0; */
  *y_id1_1 += x;
  ;
  /*@ assert Rpp: \valid(y_id2_1); */
  /*@ assert Rpp: *y_id2_1 > 0; */
  *y_id2_1 += x;
  ;
  /*@ check
      Rpp:
        \at(*y_id1_1,Pre) < \at(*y_id2_1,Pre) ∧ x > 0 ⇒
        \at(*y_id1_1,Here) < \at(*y_id2_1,Here);
  */
  return;
}

/*@ requires \separated(x1, x2);
    requires \valid(x2);
    requires \valid(x1); */
void relational_wrapper_2(int *x1, int *x2)
{
  /*@ assert Rpp: \valid(x1); */
  *x1 += 5;
  ;
  /*@ assert Rpp: \valid(x2); */
  *x2 += 5;
  ;
  /*@ check
      Rpp: \at(*x1,Pre) < \at(*x2,Pre) ⇒ \at(*x1,Here) < \at(*x2,Here);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
