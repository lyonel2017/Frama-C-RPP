[kernel] Parsing tests/rpp/rec_2.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int i) ;
  
  lemma Relational_lemma_2{L}:
    f_acsl_pure_2((int)1) ≡ f_acsl_pure_2((int)0);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int i) ;
  
  lemma Relational_lemma_1{L}: f_acsl_pure_1((int)0) ≡ 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int f_acsl_pure_3(int i) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int n; n > 0 ⇒ f_acsl_pure_3((int)(n + 1)) ≡ f_acsl_pure_3(n);
  
  }
 */
/*@ assigns \result;
    assigns \result \from i;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(i));
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(i));
    
    behavior Relational_behavior_3:
      ensures \result ≡ f_acsl_pure_3(\old(i));
 */
int f(int i)
{
  int __retres;
  if (i <= 0) {
    __retres = 0;
    goto return_label;
  }
  else {
    int tmp;
    tmp = f(i - 1);
    __retres = tmp;
    goto return_label;
  }
  return_label: return __retres;
}

int f_aux_1(int i);

void relational_wrapper_1(void)
{
  int aux_local_variable_1;
  int return_variable_relational_1;
  aux_local_variable_1 = 0;
  {
    int __retres_1;
    if (aux_local_variable_1 <= 0) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      tmp_1 = f_aux_1(aux_local_variable_1 - 1);
      __retres_1 = tmp_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  /*@ assert Rpp: return_variable_relational_1 ≡ 0; */
  return;
}

int f_aux_2(int i);

void relational_wrapper_2(void)
{
  int aux_local_variable_2;
  int return_variable_relational_2;
  int aux_local_variable_3;
  int return_variable_relational_3;
  aux_local_variable_2 = 1;
  {
    int __retres_2;
    if (aux_local_variable_2 <= 0) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      tmp_2 = f_aux_2(aux_local_variable_2 - 1);
      __retres_2 = tmp_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  aux_local_variable_3 = 0;
  {
    int __retres_3;
    if (aux_local_variable_3 <= 0) {
      __retres_3 = 0;
      goto return_label_label_3;
    }
    else {
      int tmp_3;
      tmp_3 = f_aux_2(aux_local_variable_3 - 1);
      __retres_3 = tmp_3;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  /*@ assert
      Rpp: return_variable_relational_2 ≡ return_variable_relational_3;
  */
  return;
}

int f_aux_3(int i);

void relational_wrapper_3(int n)
{
  int aux_local_variable_4;
  int return_variable_relational_4;
  int return_variable_relational_5;
  aux_local_variable_4 = n + 1;
  {
    int __retres_4;
    if (aux_local_variable_4 <= 0) {
      __retres_4 = 0;
      goto return_label_label_4;
    }
    else {
      int tmp_4;
      tmp_4 = f_aux_3(aux_local_variable_4 - 1);
      __retres_4 = tmp_4;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    if (n <= 0) {
      __retres_5 = 0;
      goto return_label_label_5;
    }
    else {
      int tmp_5;
      tmp_5 = f_aux_3(n - 1);
      __retres_5 = tmp_5;
      goto return_label_label_5;
    }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        n > 0 ⇒
        return_variable_relational_4 ≡ return_variable_relational_5;
  */
  return;
}

/*@ assigns \result;
    assigns \result \from i;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_1(\old(i));
      ensures \result ≡ f_acsl_pure_2(\old(i));
      ensures \result ≡ f_acsl_pure_3(\old(i));
 */
int f_aux_3(int i);

/*@ assigns \result;
    assigns \result \from i;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_1(\old(i));
      ensures \result ≡ f_acsl_pure_2(\old(i));
 */
int f_aux_2(int i);

/*@ assigns \result;
    assigns \result \from i;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_1(\old(i));
 */
int f_aux_1(int i);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
