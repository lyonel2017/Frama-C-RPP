[kernel] Parsing tests/rpp/quantifier_more.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  predicate g_acsl_1(int x, int return_variable_relational) ;
  
  predicate f_acsl_1(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int y, int return_variable_relational_2,
        int return_variable_relational_1;
      g_acsl_1(y, return_variable_relational_2) ⇒
      f_acsl_1(x, return_variable_relational_1) ⇒
      (∃ int a, int b, int c, int d;
         a > 10 ∧ b < 2 ∧ d > c ∧
         (x ≡ a ⇒ d ≡ return_variable_relational_1) ∧
         (y ≡ b ⇒ c ≡ return_variable_relational_2));
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures g_acsl_1(\old(x), \result);
 */
int g(int x)
{
  return x;
}

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures f_acsl_1(\old(x), \result);
 */
int f(int x)
{
  return x;
}

void relational_wrapper_1(int x, int y)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  return_variable_relational_1 = x;
  return_variable_relational_2 = y;
  /*@ assert
      Rpp:
        ∃ int a, int b, int c, int d;
          a > 10 ∧ b < 2 ∧ d > c ∧
          (x ≡ a ⇒ d ≡ return_variable_relational_1) ∧
          (y ≡ b ⇒ c ≡ return_variable_relational_2);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
