[kernel] Parsing tests/rpp/monotonie_side_effect_extended.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int g;
int j;
/*@
axiomatic Relational_axiome_1 {
  predicate f_acsl_1(int x, int j_pre, int g_pre, int j_post, int g_post) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int g_id4_pre, int j_id4_pre, int g_id4_post, int j_id4_post,
        int g_id3_pre, int j_id3_pre, int g_id3_post, int j_id3_post;
      f_acsl_1(x, j_id4_pre, g_id4_pre, j_id4_post, g_id4_post) ⇒
      f_acsl_1(x, j_id3_pre, g_id3_pre, j_id3_post, g_id3_post) ⇒
      j_id3_pre < j_id4_pre ∧ g_id3_pre > g_id4_pre ∧ x > 0 ⇒
      j_id3_post < j_id4_post ∧ g_id3_post > g_id4_post;
  
  }
 */
/*@ requires j > 0;
    requires g > 0;
    assigns j, g;
    assigns j \from x, j;
    assigns g \from g, x;
    
    behavior Relational_behavior_1:
      ensures
        f_acsl_1(\old(x), \at(j,Pre), \at(g,Pre), \at(j,Post), \at(g,Post));
 */
void f(int x)
{
  j += x;
  g -= x;
  return;
}

int j_id3_1;

int g_id3_1;

int j_id4_1;

int g_id4_1;

/*@ requires j_id4_1 > 0;
    requires g_id4_1 > 0;
    requires j_id3_1 > 0;
    requires g_id3_1 > 0;
 */
void relational_wrapper_1(int x)
{
  /*@ assert Rpp: j_id3_1 > 0; */
  /*@ assert Rpp: g_id3_1 > 0; */
  j_id3_1 += x;
  g_id3_1 -= x;
  ;
  /*@ assert Rpp: j_id4_1 > 0; */
  /*@ assert Rpp: g_id4_1 > 0; */
  j_id4_1 += x;
  g_id4_1 -= x;
  ;
  /*@ check
      Rpp:
        \at(j_id3_1,Pre) < \at(j_id4_1,Pre) ∧
        \at(g_id3_1,Pre) > \at(g_id4_1,Pre) ∧ x > 0 ⇒
        \at(j_id3_1,Here) < \at(j_id4_1,Here) ∧
        \at(g_id3_1,Here) > \at(g_id4_1,Here);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
