[kernel] Parsing tests/rpp/quantifier_pointer.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  predicate f_acsl_1{pre, post}(int n, int *t) 
    reads \at(*(t + (0 .. n)),post), \at(*(t + (0 .. n)),pre);
  
  lemma Relational_lemma_1{pre_id2, post_id2, pre_id1, post_id1}:
    ∀ int n, int *t1, int *t2;
      \separated(t1 + (0 .. n), t2 + (0 .. n)) ⇒
      f_acsl_1{pre_id2, post_id2}(n, t2) ⇒
      f_acsl_1{pre_id1, post_id1}(n, t1) ⇒
      (∀ int i;
         0 ≤ i < n ⇒ \at(*(t1 + i),pre_id1) ≤ \at(*(t2 + i),pre_id2)) ⇒
      (∀ int i;
         0 ≤ i < n ⇒ \at(*(t1 + i),post_id1) ≤ \at(*(t2 + i),post_id2));
  
  }
 */
/*@ requires n > 0;
    requires \valid(t + (0 .. n));
    assigns *(t + (0 .. n));
    assigns *(t + (0 .. n)) \from *(t + (0 .. n)), n;
    
    behavior Relational_behavior_1:
      ensures f_acsl_1{Pre, Post}(\old(n), \old(t));
 */
void f(int n, int *t)
{
  int i;
  i = 0;
  /*@ loop invariant
        ∀ int k;
          0 ≤ k < i ⇒ \at(*(t + k),Here) ≡ \at(*(t + k),Pre) + 1;
      loop invariant
        ∀ int k; i ≤ k < n ⇒ \at(*(t + k),Here) ≡ \at(*(t + k),Pre);
      loop invariant 0 ≤ i ≤ n;
      loop assigns *(t + (0 .. n)), i;
      loop variant n - i;
  */
  while (i < n) {
    (*(t + i)) ++;
    i ++;
  }
  return;
}

/*@ requires \separated(t1 + (0 .. n), t2 + (0 .. n));
    requires n > 0;
    requires \valid(t2 + (0 .. n));
    requires n > 0;
    requires \valid(t1 + (0 .. n));
 */
void relational_wrapper_1(int n, int *t1, int *t2)
{
  {
    int i_1;
    /*@ assert Rpp: n > 0; */
    /*@ assert Rpp: \valid(t1 + (0 .. n)); */
    i_1 = 0;
    /*@ loop invariant
          ∀ int k;
            0 ≤ k < i_1 ⇒ \at(*(t1 + k),Here) ≡ \at(*(t1 + k),Pre) + 1;
        loop invariant
          ∀ int k;
            i_1 ≤ k < n ⇒ \at(*(t1 + k),Here) ≡ \at(*(t1 + k),Pre);
        loop invariant 0 ≤ i_1 ≤ n;
        loop assigns *(t1 + (0 .. n)), i_1;
        loop variant n - i_1;
    */
    while (i_1 < n) {
      (*(t1 + i_1)) ++;
      i_1 ++;
    }
    ;
  }
  {
    int i_2;
    /*@ assert Rpp: n > 0; */
    /*@ assert Rpp: \valid(t2 + (0 .. n)); */
    i_2 = 0;
    /*@ loop invariant
          ∀ int k;
            0 ≤ k < i_2 ⇒ \at(*(t2 + k),Here) ≡ \at(*(t2 + k),Pre) + 1;
        loop invariant
          ∀ int k;
            i_2 ≤ k < n ⇒ \at(*(t2 + k),Here) ≡ \at(*(t2 + k),Pre);
        loop invariant 0 ≤ i_2 ≤ n;
        loop assigns *(t2 + (0 .. n)), i_2;
        loop variant n - i_2;
    */
    while (i_2 < n) {
      (*(t2 + i_2)) ++;
      i_2 ++;
    }
    ;
  }
  /*@ check
      Rpp:
        (∀ int i; 0 ≤ i < n ⇒ \at(*(t1 + i),Pre) ≤ \at(*(t2 + i),Pre)) ⇒
        (∀ int i;
           0 ≤ i < n ⇒ \at(*(t1 + i),Here) ≤ \at(*(t2 + i),Here));
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
