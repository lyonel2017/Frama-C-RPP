[kernel] Parsing tests/rpp/bug_varinfo.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic sum_axiomatic {
  logic ℤ sum{L}(int *a, int *b, ℤ i, ℤ j, ℤ n, ℤ k) 
    reads \at(*(a + (0 .. n * n - 1)),L), \at(*(b + (0 .. n * n - 1)),L);
  
  axiom sum_nil{L}:
    ∀ int *a, int *b, ℤ i, ℤ j, ℤ n; sum(a, b, i, j, n, 0) ≡ 0;
  
  axiom sum_next{L}:
    ∀ int *a, int *b, ℤ i, ℤ j, ℤ n, ℤ k;
      sum(a, b, i, j, n, k + 1) ≡
      sum(a, b, i, j, n, k) + *(a + (i * n + k)) * *(b + (k * n + j));
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  predicate matrix_mult_acsl_1{pre, post}(int *a, int *b, int *c, int n) 
    reads
    \at(*(c + (0 .. n * n - 1)),post), \at(*(b + (0 .. n * n - 1)),pre),
    \at(*(a + (0 .. n * n - 1)),pre);
  
  lemma Relational_lemma_1{pre_id2, post_id2, pre_id1, post_id1}:
    ∀ int *a1, int *a2, int *b1, int *b2, int *c1, int *c2, int n;
      \separated(
        c1 + (0 .. n * n - 1), a1 + (0 .. n * n - 1), b1 + (0 .. n * n - 1),
        c2 + (0 .. n * n - 1), a2 + (0 .. n * n - 1), b2 + (0 .. n * n - 1)
        ) ⇒
      matrix_mult_acsl_1{pre_id2, post_id2}(a2, b2, c2, n) ⇒
      matrix_mult_acsl_1{pre_id1, post_id1}(a1, b1, c1, n) ⇒
      \at(*c1,post_id1) < \at(*c2,post_id2);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  predicate matrix_mult_acsl_2{pre, post}(int *a, int *b, int *c, int n) 
    reads
    \at(*(c + (0 .. n * n - 1)),post), \at(*(b + (0 .. n * n - 1)),pre),
    \at(*(a + (0 .. n * n - 1)),pre);
  
  lemma Relational_lemma_2{pre_id3, post_id3}:
    ∀ int *a1, int *c1, int *b1, int n;
      \separated(
        c1 + (0 .. n * n - 1), a1 + (0 .. n * n - 1), b1 + (0 .. n * n - 1)
        ) ⇒
      matrix_mult_acsl_2{pre_id3, post_id3}(a1, b1, c1, n) ⇒
      \at(*c1,post_id3) < 0;
  
  }
 */
/*@ requires \separated(a + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \separated(b + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \valid_read(a + (0 .. n * n - 1));
    requires \valid_read(b + (0 .. n * n - 1));
    requires \valid(c + (0 .. n * n - 1));
    requires n ≥ 0;
    ensures
      ∀ ℤ i, ℤ j;
        0 ≤ i < \old(n) ∧ 0 ≤ j < \old(n) ⇒
        *(\old(c) + (i * \old(n) + j)) ≡
        sum(\old(a), \old(b), i, j, \old(n), \old(n));
    assigns *(c + (0 .. n * n - 1));
    assigns *(c + (0 .. n * n - 1))
      \from *(a + (0 .. n * n - 1)), *(b + (0 .. n * n - 1));
    
    behavior Relational_behavior_1:
      ensures
        matrix_mult_acsl_1{Pre, Post}(\old(a), \old(b), \old(c), \old(n));
    
    behavior Relational_behavior_2:
      ensures
        matrix_mult_acsl_2{Pre, Post}(\old(a), \old(b), \old(c), \old(n));
 */
void matrix_mult(int *a, int *b, int *c, int n)
{
  int i = 0;
  /*@ loop invariant 0 ≤ i ≤ n;
      loop invariant
        ∀ ℤ k, ℤ j;
          0 ≤ k < i ∧ 0 ≤ j < n ⇒
          *(c + (k * n + j)) ≡ sum(a, b, k, j, n, n);
      loop assigns *(c + (0 .. n * n - 1)), i;
      loop variant n - i;
  */
  while (i < n) {
    {
      int j = 0;
      /*@ loop invariant 0 ≤ j ≤ n;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < j ⇒ *(c + (i * n + k)) ≡ sum(a, b, i, k, n, n);
          loop assigns *(c + (i * n .. (i * n + n) - 1)), j;
          loop variant n - j;
      */
      while (j < n) {
        *(c + (i * n + j)) = 0;
        {
          int k = 0;
          /*@ loop invariant 0 ≤ k ≤ n;
              loop invariant *(c + (i * n + j)) ≡ sum(a, b, i, j, n, k);
              loop assigns *(c + (i * n + j)), k;
              loop variant n - k;
          */
          while (k < n) {
            *(c + (i * n + j)) += *(a + (i * n + k)) * *(b + (k * n + j));
            k ++;
          }
        }
        j ++;
      }
    }
    i ++;
  }
  return;
}

/*@ requires \separated(a + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \separated(b + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \valid_read(a + (0 .. n * n - 1));
    requires \valid_read(b + (0 .. n * n - 1));
    requires \valid(c + (0 .. n * n - 1));
    requires n ≥ 0;
    ensures
      ∀ ℤ i, ℤ j;
        0 ≤ i < \old(n) ∧ 0 ≤ j < \old(n) ⇒
        *(\old(c) + (i * \old(n) + j)) ≡
        sum(\old(a), \old(b), i, j, \old(n), \old(n));
    assigns *(c + (0 .. n * n - 1));
    assigns *(c + (0 .. n * n - 1))
      \from *(a + (0 .. n * n - 1)), *(b + (0 .. n * n - 1));
    
    behavior Relational_behavior:
      ensures
        matrix_mult_acsl_1{Pre, Post}(\old(a), \old(b), \old(c), \old(n));
 */
void matrix_mult_id3(int *a, int *b, int *c, int n);

/*@ requires \separated(a + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \separated(b + (0 .. n * n - 1), c + (0 .. n * n - 1));
    requires \valid_read(a + (0 .. n * n - 1));
    requires \valid_read(b + (0 .. n * n - 1));
    requires \valid(c + (0 .. n * n - 1));
    requires n ≥ 0;
    ensures
      ∀ ℤ i, ℤ j;
        0 ≤ i < \old(n) ∧ 0 ≤ j < \old(n) ⇒
        *(\old(c) + (i * \old(n) + j)) ≡
        sum(\old(a), \old(b), i, j, \old(n), \old(n));
    assigns *(c + (0 .. n * n - 1));
    assigns *(c + (0 .. n * n - 1))
      \from *(a + (0 .. n * n - 1)), *(b + (0 .. n * n - 1));
 */
void matrix_mult_id1(int *a, int *b, int *c, int n);

/*@ requires
      \separated(
        c1 + (0 .. n * n - 1), a1 + (0 .. n * n - 1), b1 + (0 .. n * n - 1),
        c2 + (0 .. n * n - 1), a2 + (0 .. n * n - 1), b2 + (0 .. n * n - 1)
        );
    requires \separated(a2 + (0 .. n * n - 1), c2 + (0 .. n * n - 1));
    requires \separated(b2 + (0 .. n * n - 1), c2 + (0 .. n * n - 1));
    requires \valid_read(a2 + (0 .. n * n - 1));
    requires \valid_read(b2 + (0 .. n * n - 1));
    requires \valid(c2 + (0 .. n * n - 1));
    requires n ≥ 0;
    requires \separated(a1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
    requires \separated(b1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
    requires \valid_read(a1 + (0 .. n * n - 1));
    requires \valid_read(b1 + (0 .. n * n - 1));
    requires \valid(c1 + (0 .. n * n - 1));
    requires n ≥ 0;
 */
void relational_wrapper_1(int *a1, int *a2, int *b1, int *b2, int *c1,
                          int *c2, int n)
{
  /*@ assert Rpp: \separated(a1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
  */
  /*@ assert Rpp: \separated(b1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
  */
  /*@ assert Rpp: \valid_read(a1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: \valid_read(b1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: \valid(c1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: n ≥ 0; */
  matrix_mult_id1(a1,b1,c1,n);
  {
    /*@ assert Rpp: \separated(a2 + (0 .. n * n - 1), c2 + (0 .. n * n - 1));
    */
    /*@ assert Rpp: \separated(b2 + (0 .. n * n - 1), c2 + (0 .. n * n - 1));
    */
    /*@ assert Rpp: \valid_read(a2 + (0 .. n * n - 1)); */
    /*@ assert Rpp: \valid_read(b2 + (0 .. n * n - 1)); */
    /*@ assert Rpp: \valid(c2 + (0 .. n * n - 1)); */
    /*@ assert Rpp: n ≥ 0; */
    int i_2 = 0;
    /*@ loop invariant 0 ≤ i_2 ≤ n;
        loop invariant
          ∀ ℤ k, ℤ j;
            0 ≤ k < i_2 ∧ 0 ≤ j < n ⇒
            *(c2 + (k * n + j)) ≡ sum(a2, b2, k, j, n, n);
        loop assigns *(c2 + (0 .. n * n - 1)), i_2;
        loop variant n - i_2;
    */
    while (i_2 < n) {
      {
        int j_2 = 0;
        /*@ loop invariant 0 ≤ j_2 ≤ n;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < j_2 ⇒
                *(c2 + (i_2 * n + k)) ≡ sum(a2, b2, i_2, k, n, n);
            loop assigns *(c2 + (i_2 * n .. (i_2 * n + n) - 1)), j_2;
            loop variant n - j_2;
        */
        while (j_2 < n) {
          *(c2 + (i_2 * n + j_2)) = 0;
          {
            int k_2 = 0;
            /*@ loop invariant 0 ≤ k_2 ≤ n;
                loop invariant
                  *(c2 + (i_2 * n + j_2)) ≡ sum(a2, b2, i_2, j_2, n, k_2);
                loop assigns *(c2 + (i_2 * n + j_2)), k_2;
                loop variant n - k_2;
            */
            while (k_2 < n) {
              *(c2 + (i_2 * n + j_2)) += *(a2 + (i_2 * n + k_2)) * *(
                                         b2 + (k_2 * n + j_2));
              k_2 ++;
            }
          }
          j_2 ++;
        }
      }
      i_2 ++;
    }
    ;
  }
  /*@ check Rpp: \at(*c1,Here) < \at(*c2,Here); */
  return;
}

/*@ requires
      \separated(
        c1 + (0 .. n * n - 1), a1 + (0 .. n * n - 1), b1 + (0 .. n * n - 1)
        );
    requires \separated(a1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
    requires \separated(b1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
    requires \valid_read(a1 + (0 .. n * n - 1));
    requires \valid_read(b1 + (0 .. n * n - 1));
    requires \valid(c1 + (0 .. n * n - 1));
    requires n ≥ 0;
 */
void relational_wrapper_2(int *a1, int *c1, int *b1, int n)
{
  /*@ assert Rpp: \separated(a1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
  */
  /*@ assert Rpp: \separated(b1 + (0 .. n * n - 1), c1 + (0 .. n * n - 1));
  */
  /*@ assert Rpp: \valid_read(a1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: \valid_read(b1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: \valid(c1 + (0 .. n * n - 1)); */
  /*@ assert Rpp: n ≥ 0; */
  matrix_mult_id3(a1,b1,c1,n);
  /*@ check Rpp: \at(*c1,Here) < 0; */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
