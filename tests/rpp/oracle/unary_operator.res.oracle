[kernel] Parsing tests/rpp/unary_operator.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2;
      x1 ≡ -x2 ∧ x1 ≢ 0 ⇒ f_acsl_pure_1(x1) + f_acsl_pure_1(x2) ≡ 1;
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1;
      x1 ≢ 0 ⇒ f_acsl_pure_2(x1) + f_acsl_pure_2((int)(-x1)) ≡ 1;
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(x));
 */
int f(int x)
{
  int __retres;
  if (x > 0) {
    __retres = 0;
    goto return_label;
  }
  else {
    __retres = 1;
    goto return_label;
  }
  return_label: return __retres;
}

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    if (x1 > 0) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    else {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    if (x2 > 0) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    else {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp:
        x1 ≡ -x2 ∧ x1 ≢ 0 ⇒
        return_variable_relational_1 + return_variable_relational_2 ≡ 1;
  */
  return;
}

void relational_wrapper_2(int x1)
{
  int return_variable_relational_3;
  int aux_local_variable_1;
  int return_variable_relational_4;
  {
    int __retres_3;
    if (x1 > 0) {
      __retres_3 = 0;
      goto return_label_label_3;
    }
    else {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  aux_local_variable_1 = - x1;
  {
    int __retres_4;
    if (aux_local_variable_1 > 0) {
      __retres_4 = 0;
      goto return_label_label_4;
    }
    else {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  /*@ assert
      Rpp:
        x1 ≢ 0 ⇒
        return_variable_relational_3 + return_variable_relational_4 ≡ 1;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
