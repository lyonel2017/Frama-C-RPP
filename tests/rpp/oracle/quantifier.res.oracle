[kernel] Parsing tests/rpp/quantifier.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x;
      x < 2 ⇒ (∃ int y; y ≡ x ∧ f_acsl_pure_1((int)(x + 1)) ≤ 3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x;
      x < 2 ⇒ (∀ int y; y ≡ x ∧ f_acsl_pure_2((int)(x + 1)) ≤ 3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(x));
 */
int f(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_1(int x)
{
  int aux_local_variable_1;
  int return_variable_relational_1;
  aux_local_variable_1 = x + 1;
  {
    int __retres_1;
    __retres_1 = aux_local_variable_1 + 1;
    return_variable_relational_1 = __retres_1;
  }
  /*@ assert
      Rpp:
        x < 2 ⇒ (∃ int y; y ≡ x ∧ return_variable_relational_1 ≤ 3);
  */
  return;
}

/*@ assigns \result;
    assigns \result \from x; */
int g(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_2(int x)
{
  int aux_local_variable_2;
  int return_variable_relational_2;
  aux_local_variable_2 = x + 1;
  {
    int __retres_2;
    __retres_2 = aux_local_variable_2 + 1;
    return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp:
        x < 2 ⇒ (∀ int y; y ≡ x ∧ return_variable_relational_2 ≤ 3);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
