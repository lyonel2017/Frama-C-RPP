[kernel] Parsing tests/rpp/order_call.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int a) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int n; f_acsl_pure_1(n) ≡ f_acsl_pure_1(f_acsl_pure_1(n));
  
  }
 */
/*@ assigns \result;
    assigns \result \from a;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(a));
 */
int f(int a)
{
  int __retres;
  __retres = 2;
  return __retres;
}

/*@
axiomatic Relational_axiome_2 {
  logic int toupper_acsl_pure_2(int c) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int n;
      toupper_acsl_pure_2(n) ≡ toupper_acsl_pure_2(toupper_acsl_pure_2(n));
  
  }

*/
/*@ assigns \result;
    assigns \result \from c;
    
    behavior Relational_behavior_2:
      ensures \result ≡ toupper_acsl_pure_2(\old(c));
 */
int toupper(int c)
{
  int __retres;
  if (c >= 'a') 
    if (c <= 'z') {
      __retres = ('A' + c) - 'a';
      goto return_label;
    }
    else {
      __retres = c;
      goto return_label;
    }
  else {
    __retres = c;
    goto return_label;
  }
  return_label: return __retres;
}

void relational_wrapper_1(int n)
{
  int return_variable_relational_1;
  int local_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    __retres_1 = 2;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    __retres_2 = 2;
    local_variable_relational_1 = __retres_2;
  }
  {
    int __retres_3;
    __retres_3 = 2;
    return_variable_relational_2 = __retres_3;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(int n)
{
  int return_variable_relational_3;
  int local_variable_relational_2;
  int return_variable_relational_4;
  {
    int __retres_4;
    if (n >= 'a') 
      if (n <= 'z') {
        __retres_4 = ('A' + n) - 'a';
        goto return_label_label_1;
      }
      else {
        __retres_4 = n;
        goto return_label_label_1;
      }
    else {
      __retres_4 = n;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_3 = __retres_4;
  }
  {
    int __retres_5;
    if (n >= 'a') 
      if (n <= 'z') {
        __retres_5 = ('A' + n) - 'a';
        goto return_label_label_2;
      }
      else {
        __retres_5 = n;
        goto return_label_label_2;
      }
    else {
      __retres_5 = n;
      goto return_label_label_2;
    }
    return_label_label_2: local_variable_relational_2 = __retres_5;
  }
  {
    int __retres_6;
    if (local_variable_relational_2 >= 'a') 
      if (local_variable_relational_2 <= 'z') {
        __retres_6 = ('A' + local_variable_relational_2) - 'a';
        goto return_label_label_3;
      }
      else {
        __retres_6 = local_variable_relational_2;
        goto return_label_label_3;
      }
    else {
      __retres_6 = local_variable_relational_2;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_4 = __retres_6;
  }
  /*@ check
      Rpp: return_variable_relational_3 ≡ return_variable_relational_4;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
