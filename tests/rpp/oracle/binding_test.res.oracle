[kernel] Parsing tests/rpp/binding_test.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int y;
int z;
/*@
axiomatic Relational_axiome_1 {
  predicate g_acsl_1(int y_pre, int return_variable_relational) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int y_id1_pre, int return_variable_relational_1;
      g_acsl_1(y_id1_pre, return_variable_relational_1) ⇒
      return_variable_relational_1 ≡ 1;
  
  }
 */
/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior_1:
      ensures g_acsl_1(\at(y,Pre), \result);
 */
int g(void)
{
  return y;
}

/*@
axiomatic Relational_axiome_2 {
  predicate f_acsl_2(int z_pre, int return_variable_relational) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int z_id2_pre, int return_variable_relational_2;
      f_acsl_2(z_id2_pre, return_variable_relational_2) ⇒
      return_variable_relational_2 ≡ 1;
  
  }

*/
/*@ assigns \result;
    assigns \result \from z;
    
    behavior Relational_behavior_2:
      ensures f_acsl_2(\at(z,Pre), \result);
 */
int f(void)
{
  int __retres;
  __retres = y + z;
  return __retres;
}

int y_id1_1;

void relational_wrapper_1(void)
{
  int return_variable_relational_1;
  return_variable_relational_1 = y_id1_1;
  /*@ check Rpp: return_variable_relational_1 ≡ 1; */
  return;
}

int z_id2_2;

void relational_wrapper_2(void)
{
  int return_variable_relational_2;
  {
    int __retres_2;
    __retres_2 = y + z_id2_2;
    return_variable_relational_2 = __retres_2;
  }
  /*@ check Rpp: return_variable_relational_2 ≡ 1; */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
