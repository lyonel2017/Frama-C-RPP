[kernel] Parsing tests/rpp/require_extend.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  predicate f_acsl_1(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2, int return_variable_relational_2,
        int return_variable_relational_1;
      f_acsl_1((int)(x2 + 1), return_variable_relational_2) ⇒
      f_acsl_1(x1, return_variable_relational_1) ⇒
      x1 < x2 ⇒ return_variable_relational_1 < return_variable_relational_2;
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1, int x2;
      x1 < x2 ⇒ f_acsl_pure_2(x1) < f_acsl_pure_2((int)(x2 + 1));
  
  }
 */
/*@ requires x < 10000 - 10;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures f_acsl_1(\old(x), \result);
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(x));
 */
int f(int x)
{
  int __retres;
  int a = 10;
  __retres = x + a;
  return __retres;
}

/*@ requires x2 + 1 < 10000 - 10;
    requires x1 < 10000 - 10; */
void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int aux_local_variable_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: x1 < 10000 - 10; */
    int a_1 = 10;
    __retres_1 = x1 + a_1;
    return_variable_relational_1 = __retres_1;
  }
  aux_local_variable_1 = x2 + 1;
  {
    int __retres_2;
    /*@ assert Rpp: aux_local_variable_1 < 10000 - 10; */
    int a_2 = 10;
    __retres_2 = aux_local_variable_1 + a_2;
    return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}

/*@ requires x2 + 1 < 10000 - 10;
    requires x1 < 10000 - 10; */
void relational_wrapper_2(int x1, int x2)
{
  int return_variable_relational_3;
  int aux_local_variable_2;
  int return_variable_relational_4;
  {
    int __retres_3;
    /*@ assert Rpp: x1 < 10000 - 10; */
    int a_3 = 10;
    __retres_3 = x1 + a_3;
    return_variable_relational_3 = __retres_3;
  }
  aux_local_variable_2 = x2 + 1;
  {
    int __retres_4;
    /*@ assert Rpp: aux_local_variable_2 < 10000 - 10; */
    int a_4 = 10;
    __retres_4 = aux_local_variable_2 + a_4;
    return_variable_relational_4 = __retres_4;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
