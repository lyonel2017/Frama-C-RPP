[kernel] Parsing tests/rpp/max_min.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_2 {
  logic int min_acsl_pure_2(int x, int y) ;
  
  logic int abs_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x, int y;
      min_acsl_pure_2(x, y) ≡ ((x + y) - abs_acsl_pure_2((int)(x - y))) / 2;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int max_acsl_pure_1(int x, int y) ;
  
  logic int abs_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int y;
      max_acsl_pure_1(x, y) ≡ ((x + y) + abs_acsl_pure_1((int)(x - y))) / 2;
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ abs_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ abs_acsl_pure_2(\old(x));
 */
int abs(int x)
{
  int tmp;
  if (x >= 0) tmp = x; else tmp = - x;
  return tmp;
}

/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior_1:
      ensures \result ≡ max_acsl_pure_1(\old(x), \old(y));
 */
int max(int x, int y)
{
  int tmp;
  if (x >= y) tmp = x; else tmp = y;
  return tmp;
}

/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior_2:
      ensures \result ≡ min_acsl_pure_2(\old(x), \old(y));
 */
int min(int x, int y)
{
  int tmp;
  if (x >= y) tmp = y; else tmp = x;
  return tmp;
}

void relational_wrapper_1(int x, int y)
{
  int return_variable_relational_1;
  int aux_local_variable_1;
  int return_variable_relational_2;
  {
    int tmp_1;
    if (x >= y) tmp_1 = x; else tmp_1 = y;
    return_variable_relational_1 = tmp_1;
  }
  aux_local_variable_1 = x - y;
  {
    int tmp_2;
    if (aux_local_variable_1 >= 0) tmp_2 = aux_local_variable_1;
    else tmp_2 = - aux_local_variable_1;
    return_variable_relational_2 = tmp_2;
  }
  /*@ assert
      Rpp:
        return_variable_relational_1 ≡
        ((x + y) + return_variable_relational_2) / 2;
  */
  return;
}

void relational_wrapper_2(int x, int y)
{
  int return_variable_relational_3;
  int aux_local_variable_2;
  int return_variable_relational_4;
  {
    int tmp_3;
    if (x >= y) tmp_3 = y; else tmp_3 = x;
    return_variable_relational_3 = tmp_3;
  }
  aux_local_variable_2 = x - y;
  {
    int tmp_4;
    if (aux_local_variable_2 >= 0) tmp_4 = aux_local_variable_2;
    else tmp_4 = - aux_local_variable_2;
    return_variable_relational_4 = tmp_4;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 ≡
        ((x + y) - return_variable_relational_4) / 2;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
