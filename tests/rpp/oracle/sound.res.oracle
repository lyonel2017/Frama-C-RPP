[kernel] Parsing tests/rpp/sound.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int i, int n) ;
  
  lemma Relational_lemma_1{L}:
    f_acsl_pure_1((int)0, (int)0) ≢ f_acsl_pure_1((int)0, (int)0);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int i, int n) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int n;
      n > 0 ⇒ f_acsl_pure_2((int)0, n) ≢ f_acsl_pure_2((int)0, n);
  
  }
 */
/*@ assigns \result;
    assigns \result \from i, n;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(i), \old(n));
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(i), \old(n));
 */
int f(int i, int n)
{
  int __retres;
  if (i >= n) {
    __retres = 0;
    goto return_label;
  }
  else {
    int tmp;
    tmp = f(i + 1,n);
    __retres = tmp;
    goto return_label;
  }
  return_label: return __retres;
}

int f_aux_1(int i, int n);

void relational_wrapper_1(void)
{
  int aux_local_variable_1;
  int aux_local_variable_2;
  int return_variable_relational_1;
  int aux_local_variable_3;
  int aux_local_variable_4;
  int return_variable_relational_2;
  aux_local_variable_1 = 0;
  aux_local_variable_2 = 0;
  {
    int __retres_1;
    if (aux_local_variable_1 >= aux_local_variable_2) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      tmp_1 = f_aux_1(aux_local_variable_1 + 1,aux_local_variable_2);
      __retres_1 = tmp_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  aux_local_variable_3 = 0;
  aux_local_variable_4 = 0;
  {
    int __retres_2;
    if (aux_local_variable_3 >= aux_local_variable_4) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      tmp_2 = f_aux_1(aux_local_variable_3 + 1,aux_local_variable_4);
      __retres_2 = tmp_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≢ return_variable_relational_2;
  */
  return;
}

int f_aux_2(int i, int n);

void relational_wrapper_2(int n)
{
  int aux_local_variable_5;
  int return_variable_relational_3;
  int aux_local_variable_6;
  int return_variable_relational_4;
  aux_local_variable_5 = 0;
  {
    int __retres_3;
    if (aux_local_variable_5 >= n) {
      __retres_3 = 0;
      goto return_label_label_3;
    }
    else {
      int tmp_3;
      tmp_3 = f_aux_2(aux_local_variable_5 + 1,n);
      __retres_3 = tmp_3;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  aux_local_variable_6 = 0;
  {
    int __retres_4;
    if (aux_local_variable_6 >= n) {
      __retres_4 = 0;
      goto return_label_label_4;
    }
    else {
      int tmp_4;
      tmp_4 = f_aux_2(aux_local_variable_6 + 1,n);
      __retres_4 = tmp_4;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  /*@ assert
      Rpp:
        n > 0 ⇒
        return_variable_relational_3 ≢ return_variable_relational_4;
  */
  return;
}

/*@
axiomatic Relational_axiome_3 {
  logic int g_acsl_pure_3(int n) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int n; g_acsl_pure_3(n) ≢ g_acsl_pure_3(n);
  
  }

*/
/*@ assigns \result;
    assigns \result \from n;
    
    behavior Relational_behavior_3:
      ensures \result ≡ g_acsl_pure_3(\old(n));
 */
int g(int n)
{
  int __retres;
  __retres = 0;
  return __retres;
}

void relational_wrapper_3(int n)
{
  int return_variable_relational_5;
  int return_variable_relational_6;
  {
    int __retres_5;
    __retres_5 = 0;
    return_variable_relational_5 = __retres_5;
  }
  {
    int __retres_6;
    __retres_6 = 0;
    return_variable_relational_6 = __retres_6;
  }
  /*@ assert
      Rpp: return_variable_relational_5 ≢ return_variable_relational_6;
  */
  return;
}

/*@ assigns \result;
    assigns \result \from i, n;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_1(\old(i), \old(n));
      ensures \result ≡ f_acsl_pure_2(\old(i), \old(n));
 */
int f_aux_2(int i, int n);

/*@ assigns \result;
    assigns \result \from i, n;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_1(\old(i), \old(n));
 */
int f_aux_1(int i, int n);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
