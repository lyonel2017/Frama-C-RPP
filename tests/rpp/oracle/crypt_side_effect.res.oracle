[kernel] Parsing tests/rpp/crypt_side_effect.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int message;
/*@
axiomatic Relational_axiome_1 {
  predicate DeCryptage_acsl_1(int key, int message_pre, int message_post) ;
  
  predicate Cryptage_acsl_1(int key, int message_pre, int message_post) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int key, int message_id2_pre, int message_id2_post,
        int message_id1_pre, int message_id1_post;
      DeCryptage_acsl_1(key, message_id2_pre, message_id2_post) ⇒
      Cryptage_acsl_1(key, message_id1_pre, message_id1_post) ⇒
      message_id1_post ≡ message_id2_pre ⇒
      message_id1_pre ≡ message_id2_post;
  
  }
 */
/*@ assigns message;
    assigns message \from message, key;
    
    behavior Relational_behavior_1:
      ensures
        Cryptage_acsl_1(\old(key), \at(message,Pre), \at(message,Post));
 */
void Cryptage(int key)
{
  message += key;
  return;
}

/*@ assigns message;
    assigns message \from message, key;
    
    behavior Relational_behavior_1:
      ensures
        DeCryptage_acsl_1(\old(key), \at(message,Pre), \at(message,Post));
 */
void DeCryptage(int key)
{
  message -= key;
  return;
}

int message_id1_1;

int message_id2_1;

void relational_wrapper_1(int key)
{
  message_id1_1 += key;
  ;
  message_id2_1 -= key;
  ;
  /*@ check
      Rpp:
        \at(message_id1_1,Here) ≡ \at(message_id2_1,Pre) ⇒
        \at(message_id1_1,Pre) ≡ \at(message_id2_1,Here);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
