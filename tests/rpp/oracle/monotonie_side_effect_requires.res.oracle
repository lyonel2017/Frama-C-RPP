[kernel] Parsing tests/rpp/monotonie_side_effect_requires.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int y;
/*@
axiomatic Relational_axiome_1 {
  predicate k_acsl_1(int y_pre, int y_post) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int y_id2_pre, int y_id2_post, int y_id1_pre, int y_id1_post;
      k_acsl_1(y_id2_pre, y_id2_post) ⇒
      k_acsl_1(y_id1_pre, y_id1_post) ⇒
      y_id1_pre < y_id2_pre ⇒ y_id1_post < y_id2_post;
  
  }
 */
/*@ requires y > 0;
    assigns y;
    assigns y \from y;
    
    behavior Relational_behavior_1:
      ensures k_acsl_1(\at(y,Pre), \at(y,Post));
 */
void k(void)
{
  y += 5;
  return;
}

int g;
int j;
/*@
axiomatic Relational_axiome_2 {
  predicate f_acsl_2(int g_pre, int j_pre, int j_post) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int j_id4_pre, int g_id4_pre, int j_id4_post, int j_id3_pre,
        int g_id3_pre, int j_id3_post;
      f_acsl_2(g_id4_pre, j_id4_pre, j_id4_post) ⇒
      f_acsl_2(g_id3_pre, j_id3_pre, j_id3_post) ⇒
      j_id3_pre < j_id4_pre ∧ g_id3_pre ≡ g_id4_pre ⇒
      j_id3_post < j_id4_post;
  
  }

*/
/*@ requires j > 0;
    requires g > 0;
    assigns j;
    assigns j \from g, j;
    
    behavior Relational_behavior_2:
      ensures f_acsl_2(\at(g,Pre), \at(j,Pre), \at(j,Post));
 */
void f(void)
{
  j = (j + g) + 5;
  return;
}

int y_id1_1;

int y_id2_1;

/*@ requires y_id2_1 > 0;
    requires y_id1_1 > 0; */
void relational_wrapper_1(void)
{
  /*@ assert Rpp: y_id1_1 > 0; */
  y_id1_1 += 5;
  ;
  /*@ assert Rpp: y_id2_1 > 0; */
  y_id2_1 += 5;
  ;
  /*@ check
      Rpp:
        \at(y_id1_1,Pre) < \at(y_id2_1,Pre) ⇒
        \at(y_id1_1,Here) < \at(y_id2_1,Here);
  */
  return;
}

int j_id3_2;

int g_id3_2;

int j_id4_2;

int g_id4_2;

/*@ requires j_id4_2 > 0;
    requires g_id4_2 > 0;
    requires j_id3_2 > 0;
    requires g_id3_2 > 0;
 */
void relational_wrapper_2(void)
{
  /*@ assert Rpp: j_id3_2 > 0; */
  /*@ assert Rpp: g_id3_2 > 0; */
  j_id3_2 = (j_id3_2 + g_id3_2) + 5;
  ;
  /*@ assert Rpp: j_id4_2 > 0; */
  /*@ assert Rpp: g_id4_2 > 0; */
  j_id4_2 = (j_id4_2 + g_id4_2) + 5;
  ;
  /*@ check
      Rpp:
        \at(j_id3_2,Pre) < \at(j_id4_2,Pre) ∧
        \at(g_id3_2,Pre) ≡ \at(g_id4_2,Pre) ⇒
        \at(j_id3_2,Here) < \at(j_id4_2,Here);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
