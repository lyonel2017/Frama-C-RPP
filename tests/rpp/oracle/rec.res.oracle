[kernel] Parsing tests/rpp/rec.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_2 {
  logic int g_acsl_pure_2(int x, int y) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x, int y; x > 0 ⇒ g_acsl_pure_2(x, y) ≡ x * y;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int g_acsl_pure_3(int x, int y) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1, int x2, int y;
      x1 > 0 ∧ x2 > 0 ⇒
      g_acsl_pure_3((int)(x1 + x2), y) ≡
      g_acsl_pure_3(x1, y) + g_acsl_pure_3(x2, y);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int x, int y) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int y; x ≤ 0 ⇒ g_acsl_pure_1(x, y) ≡ 0;
  
  }
 */
/*@ requires y ≥ 0 ∧ x ≥ 0;
    assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior_1:
      ensures \result ≡ g_acsl_pure_1(\old(x), \old(y));
    
    behavior Relational_behavior_2:
      ensures \result ≡ g_acsl_pure_2(\old(x), \old(y));
    
    behavior Relational_behavior_3:
      ensures \result ≡ g_acsl_pure_3(\old(x), \old(y));
 */
int g(int x, int y)
{
  int __retres;
  if (x <= 0) {
    __retres = 0;
    goto return_label;
  }
  else {
    int tmp;
    tmp = g(x - 1,y);
    ;
    __retres = y + tmp;
    goto return_label;
  }
  return_label: return __retres;
}

int g_aux_1(int x, int y);

/*@ requires y ≥ 0 ∧ x ≥ 0; */
void relational_wrapper_1(int x, int y)
{
  int return_variable_relational_1;
  {
    int __retres_1;
    /*@ assert Rpp: y ≥ 0 ∧ x ≥ 0; */
    if (x <= 0) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      tmp_1 = g_aux_1(x - 1,y);
      ;
      __retres_1 = y + tmp_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  /*@ assert Rpp: x ≤ 0 ⇒ return_variable_relational_1 ≡ 0; */
  return;
}

int g_aux_2(int x, int y);

/*@ requires y ≥ 0 ∧ x ≥ 0; */
void relational_wrapper_2(int x, int y)
{
  int return_variable_relational_2;
  {
    int __retres_2;
    /*@ assert Rpp: y ≥ 0 ∧ x ≥ 0; */
    if (x <= 0) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      tmp_2 = g_aux_2(x - 1,y);
      ;
      __retres_2 = y + tmp_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert Rpp: x > 0 ⇒ return_variable_relational_2 ≡ x * y; */
  return;
}

int g_aux_3(int x, int y);

/*@ requires y ≥ 0 ∧ x2 ≥ 0;
    requires y ≥ 0 ∧ x1 ≥ 0;
    requires y ≥ 0 ∧ x1 + x2 ≥ 0;
 */
void relational_wrapper_3(int x1, int x2, int y)
{
  int aux_local_variable_1;
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  aux_local_variable_1 = x1 + x2;
  /*@ assert Rpp: y ≥ 0 ∧ aux_local_variable_1 ≥ 0; */
  return_variable_relational_3 = g_aux_3(aux_local_variable_1,y);
  /*@ assert Rpp: y ≥ 0 ∧ x1 ≥ 0; */
  return_variable_relational_4 = g_aux_3(x1,y);
  /*@ assert Rpp: y ≥ 0 ∧ x2 ≥ 0; */
  return_variable_relational_5 = g_aux_3(x2,y);
  /*@ assert
      Rpp:
        x1 > 0 ∧ x2 > 0 ⇒
        return_variable_relational_3 ≡
        return_variable_relational_4 + return_variable_relational_5;
  */
  return;
}

/*@ requires y ≥ 0 ∧ x ≥ 0;
    assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ g_acsl_pure_1(\old(x), \old(y));
      ensures \result ≡ g_acsl_pure_2(\old(x), \old(y));
 */
int g_aux_3(int x, int y);

/*@ requires y ≥ 0 ∧ x ≥ 0;
    assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ g_acsl_pure_1(\old(x), \old(y));
      ensures \result ≡ g_acsl_pure_2(\old(x), \old(y));
 */
int g_aux_2(int x, int y);

/*@ requires y ≥ 0 ∧ x ≥ 0;
    assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ g_acsl_pure_1(\old(x), \old(y));
 */
int g_aux_1(int x, int y);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
