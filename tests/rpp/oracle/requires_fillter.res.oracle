[kernel] Parsing tests/rpp/requires_fillter.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int x) ;
  
  logic int f_acsl_pure_1(int x, int y) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x, int y;
      x ≥ 0 ⇒ f_acsl_pure_1(g_acsl_pure_1(x), y) ≡ g_acsl_pure_1(x);
  
  }
 */
/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ g_acsl_pure_1(\old(x));
 */
int g(int x)
{
  return x;
}

/*@ requires 0 ≤ x ∧ 0 ≤ y;
    assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x), \old(y));
 */
int f(int x, int y)
{
  int tmp;
  if (x <= y) tmp = x; else tmp = y;
  return tmp;
}

/*@ requires x ≥ 0;
    requires 0 ≤ y;
    requires x ≥ 0; */
void relational_wrapper_1(int x, int y)
{
  int local_variable_relational_1;
  int return_variable_relational_1;
  int return_variable_relational_2;
  /*@ assert Rpp: x ≥ 0; */
  local_variable_relational_1 = x;
  {
    int tmp_2;
    /*@ assert Rpp: 0 ≤ local_variable_relational_1 ∧ 0 ≤ y; */
    if (local_variable_relational_1 <= y) tmp_2 = local_variable_relational_1;
    else tmp_2 = y;
    return_variable_relational_1 = tmp_2;
  }
  /*@ assert Rpp: x ≥ 0; */
  return_variable_relational_2 = x;
  /*@ check
      Rpp:
        x ≥ 0 ⇒
        return_variable_relational_1 ≡ return_variable_relational_2;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
