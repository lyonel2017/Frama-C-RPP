[kernel] Parsing tests/rpp/monotonie_proof.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int y = 0;
/*@ assigns \result;
    assigns \result \from x; */
int f1(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

/*@ assigns \result;
    assigns \result \from x; */
int f2(int x)
{
  int tmp;
  tmp = f1(x);
  return tmp;
}

/*@ assigns \result;
    assigns \result \from x; */
int f1_aux_2(int x);

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    __retres_1 = x1 + 1;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    __retres_2 = x2 + 1;
    return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(int x1, int x2)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int tmp_3;
    tmp_3 = f1_aux_2(x1);
    return_variable_relational_3 = tmp_3;
  }
  {
    int tmp_4;
    tmp_4 = f1_aux_2(x2);
    return_variable_relational_4 = tmp_4;
  }
  /*@ check
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
