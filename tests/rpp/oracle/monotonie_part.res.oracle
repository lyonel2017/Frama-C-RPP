[kernel] Parsing tests/rpp/monotonie_part.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2;
      x1 < x2 ∧ x1 > 0 ∧ x2 < 10 ⇒
      f_acsl_pure_1(x1) < f_acsl_pure_1(x2);
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x));
 */
int f(int x)
{
  int buff = 10;
  if (x > 10) goto end;
  buff = (x + 2 * x) + x * 75;
  goto end;
  end: ;
  return buff;
}

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int buff_1 = 10;
    if (x1 > 10) goto end_label_1;
    buff_1 = (x1 + 2 * x1) + x1 * 75;
    goto end_label_1;
    end_label_1: ;
    return_variable_relational_1 = buff_1;
  }
  {
    int buff_2 = 10;
    if (x2 > 10) goto end_label_2;
    buff_2 = (x2 + 2 * x2) + x2 * 75;
    goto end_label_2;
    end_label_2: ;
    return_variable_relational_2 = buff_2;
  }
  /*@ assert
      Rpp:
        x1 < x2 ∧ x1 > 0 ∧ x2 < 10 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
