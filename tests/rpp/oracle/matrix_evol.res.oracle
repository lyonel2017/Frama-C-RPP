[kernel] Parsing tests/rpp/matrix_evol.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct matrix {
   int m[100] ;
};
/*@
predicate is_eq(struct matrix q, struct matrix p, ℤ l) =
  ∀ ℤ i; 0 ≤ i < l < 100 ⇒ q.m[i] ≡ p.m[i];
 */
/*@
predicate is_eq_test(struct matrix q, struct matrix p, ℤ l) =
  0 ≤ l < 100 ⇒ q.m[l] ≡ p.m[l];
 */
/*@
predicate is_trans(struct matrix q, struct matrix p, ℤ l) =
  ∀ int k, int g;
    0 ≤ k < l ∧ 0 ≤ g < l < 100 ⇒ q.m[g * l + k] ≡ p.m[k * l + g];
 */
/*@
axiomatic Relational_axiome_2 {
  logic struct matrix trans2_acsl_pure_2(struct matrix m) ;
  
  logic struct matrix sum_acsl_pure_2(struct matrix m_a, struct matrix m_b) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq(trans2_acsl_pure_2(sum_acsl_pure_2(m1, m2)),
           sum_acsl_pure_2(trans2_acsl_pure_2(m1), trans2_acsl_pure_2(m2)),
           4);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic struct matrix trans_acsl_pure_1(struct matrix m) ;
  
  logic struct matrix trans2_acsl_pure_1(struct matrix m) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct matrix m;
      is_eq(trans2_acsl_pure_1(m), trans_acsl_pure_1(m), 4);
  
  }
 */
/*@ assigns \result;
    assigns \result \from m;
    
    behavior Relational_behavior_1:
      ensures \result ≡ trans2_acsl_pure_1(\old(m));
    
    behavior Relational_behavior_2:
      ensures \result ≡ trans2_acsl_pure_2(\old(m));
 */
struct matrix trans2(struct matrix m)
{
  struct matrix m_t;
  m_t.m[0] = m.m[0];
  m_t.m[1] = m.m[2];
  m_t.m[2] = m.m[1];
  m_t.m[3] = m.m[3];
  /*@ assert is_trans(m_t, m, 2); */ ;
  return m_t;
}

/*@
axiomatic Relational_axiome_5 {
  logic struct matrix trans_acsl_pure_5(struct matrix m) ;
  
  logic struct matrix sum_acsl_pure_5(struct matrix m_a, struct matrix m_b) ;
  
  lemma Relational_lemma_5{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq_test(trans_acsl_pure_5(sum_acsl_pure_5(m1, m2)),
                sum_acsl_pure_5(trans_acsl_pure_5(m1), trans_acsl_pure_5(m2)),
                1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic struct matrix sum_acsl_pure_3(struct matrix m_a, struct matrix m_b) ;
  
  logic struct matrix trans_acsl_pure_3(struct matrix m) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq(trans_acsl_pure_3(sum_acsl_pure_3(m1, m2)),
           sum_acsl_pure_3(trans_acsl_pure_3(m1), trans_acsl_pure_3(m2)), 4);
  
  }
 */
/*@
axiomatic Relational_axiome_7 {
  logic struct matrix sum_acsl_pure_7(struct matrix m_a, struct matrix m_b) ;
  
  logic struct matrix trans_acsl_pure_7(struct matrix m) ;
  
  lemma Relational_lemma_7{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq_test(trans_acsl_pure_7(sum_acsl_pure_7(m1, m2)),
                sum_acsl_pure_7(trans_acsl_pure_7(m1), trans_acsl_pure_7(m2)),
                3);
  
  }
 */
/*@
axiomatic Relational_axiome_6 {
  logic struct matrix trans_acsl_pure_6(struct matrix m) ;
  
  logic struct matrix sum_acsl_pure_6(struct matrix m_a, struct matrix m_b) ;
  
  lemma Relational_lemma_6{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq_test(trans_acsl_pure_6(sum_acsl_pure_6(m1, m2)),
                sum_acsl_pure_6(trans_acsl_pure_6(m1), trans_acsl_pure_6(m2)),
                2);
  
  }
 */
/*@
axiomatic Relational_axiome_4 {
  logic struct matrix sum_acsl_pure_4(struct matrix m_a, struct matrix m_b) ;
  
  logic struct matrix trans_acsl_pure_4(struct matrix m) ;
  
  lemma Relational_lemma_4{L}:
    ∀ struct matrix m1, struct matrix m2;
      is_eq_test(trans_acsl_pure_4(sum_acsl_pure_4(m1, m2)),
                sum_acsl_pure_4(trans_acsl_pure_4(m1), trans_acsl_pure_4(m2)),
                0);
  
  }

*/
/*@ assigns \result;
    assigns \result \from m;
    
    behavior Relational_behavior_1:
      ensures \result ≡ trans_acsl_pure_1(\old(m));
    
    behavior Relational_behavior_3:
      ensures \result ≡ trans_acsl_pure_3(\old(m));
    
    behavior Relational_behavior_4:
      ensures \result ≡ trans_acsl_pure_4(\old(m));
    
    behavior Relational_behavior_5:
      ensures \result ≡ trans_acsl_pure_5(\old(m));
    
    behavior Relational_behavior_6:
      ensures \result ≡ trans_acsl_pure_6(\old(m));
    
    behavior Relational_behavior_7:
      ensures \result ≡ trans_acsl_pure_7(\old(m));
 */
struct matrix trans(struct matrix m)
{
  struct matrix m_t;
  int i = 0;
  int j = 0;
  i = 0;
  /*@ loop invariant 0 ≤ i ≤ 2;
      loop invariant 0 ≤ j ≤ 2;
      loop invariant
        ∀ int k;
          0 ≤ k < 2 ∧ i > 0 ⇒
          m_t.m[(i - 1) * 2 + k] ≡ m.m[k * 2 + (i - 1)];
      loop invariant
        ∀ int k, int g;
          0 ≤ k < 2 ∧ 0 ≤ g < i ⇒ m_t.m[g * 2 + k] ≡ m.m[k * 2 + g];
      loop assigns i, j, m_t;
      loop variant 2 - i;
  */
  while (i < 2) {
    j = 0;
    /*@ loop invariant 0 ≤ j ≤ 2;
        loop invariant 0 ≤ i < 2;
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i ⇒
            m_t.m[g * 2 + k] ≡ m.m[k * 2 + g];
        loop invariant
          ∀ int k; 0 ≤ k < j ⇒ m_t.m[i * 2 + k] ≡ m.m[k * 2 + i];
        loop assigns j, m_t;
        loop variant 2 - j;
    */
    while (j < 2) {
      m_t.m[i * 2 + j] = m.m[j * 2 + i];
      j ++;
    }
    i ++;
  }
  /*@ assert is_trans(m_t, m, 2); */ ;
  return m_t;
}

void relational_wrapper_1(struct matrix m)
{
  struct matrix return_variable_relational_1;
  struct matrix return_variable_relational_2;
  {
    struct matrix m_t_1;
    m_t_1.m[0] = m.m[0];
    m_t_1.m[1] = m.m[2];
    m_t_1.m[2] = m.m[1];
    m_t_1.m[3] = m.m[3];
    /*@ assert is_trans(m_t_1, m, 2); */ ;
    return_variable_relational_1 = m_t_1;
  }
  {
    struct matrix m_t_2;
    int i_2 = 0;
    int j_2 = 0;
    i_2 = 0;
    /*@ loop invariant 0 ≤ i_2 ≤ 2;
        loop invariant 0 ≤ j_2 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_2 > 0 ⇒
            m_t_2.m[(i_2 - 1) * 2 + k] ≡ m.m[k * 2 + (i_2 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_2 ⇒
            m_t_2.m[g * 2 + k] ≡ m.m[k * 2 + g];
        loop assigns i_2, j_2, m_t_2;
        loop variant 2 - i_2;
    */
    while (i_2 < 2) {
      j_2 = 0;
      /*@ loop invariant 0 ≤ j_2 ≤ 2;
          loop invariant 0 ≤ i_2 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_2 ⇒
              m_t_2.m[g * 2 + k] ≡ m.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_2 ⇒ m_t_2.m[i_2 * 2 + k] ≡ m.m[k * 2 + i_2];
          loop assigns j_2, m_t_2;
          loop variant 2 - j_2;
      */
      while (j_2 < 2) {
        m_t_2.m[i_2 * 2 + j_2] = m.m[j_2 * 2 + i_2];
        j_2 ++;
      }
      i_2 ++;
    }
    /*@ assert is_trans(m_t_2, m, 2); */ ;
    return_variable_relational_2 = m_t_2;
  }
  /*@ assert
      Rpp:
        is_eq(return_variable_relational_1, return_variable_relational_2, 4);
  */
  return;
}

/*@ assigns \result;
    assigns \result \from m_a, m_b;
    
    behavior Relational_behavior_2:
      ensures \result ≡ sum_acsl_pure_2(\old(m_a), \old(m_b));
    
    behavior Relational_behavior_3:
      ensures \result ≡ sum_acsl_pure_3(\old(m_a), \old(m_b));
    
    behavior Relational_behavior_4:
      ensures \result ≡ sum_acsl_pure_4(\old(m_a), \old(m_b));
    
    behavior Relational_behavior_5:
      ensures \result ≡ sum_acsl_pure_5(\old(m_a), \old(m_b));
    
    behavior Relational_behavior_6:
      ensures \result ≡ sum_acsl_pure_6(\old(m_a), \old(m_b));
    
    behavior Relational_behavior_7:
      ensures \result ≡ sum_acsl_pure_7(\old(m_a), \old(m_b));
 */
struct matrix sum(struct matrix m_a, struct matrix m_b)
{
  struct matrix m_s;
  int i = 0;
  i = 0;
  /*@ loop invariant 0 ≤ i ≤ 4;
      loop invariant
        ∀ int k; 0 ≤ k < i ⇒ m_s.m[k] ≡ m_a.m[k] + m_b.m[k];
      loop assigns m_s, i;
  */
  while (i < 4) {
    m_s.m[i] = m_a.m[i] + m_b.m[i];
    i ++;
  }
  return m_s;
}

void relational_wrapper_2(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_1;
  struct matrix return_variable_relational_3;
  struct matrix local_variable_relational_2;
  struct matrix local_variable_relational_3;
  struct matrix return_variable_relational_4;
  {
    struct matrix m_s_3;
    int i_3 = 0;
    i_3 = 0;
    /*@ loop invariant 0 ≤ i_3 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_3 ⇒ m_s_3.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_3, i_3;
    */
    while (i_3 < 4) {
      m_s_3.m[i_3] = m1.m[i_3] + m2.m[i_3];
      i_3 ++;
    }
    local_variable_relational_1 = m_s_3;
  }
  {
    struct matrix m_t_4;
    m_t_4.m[0] = local_variable_relational_1.m[0];
    m_t_4.m[1] = local_variable_relational_1.m[2];
    m_t_4.m[2] = local_variable_relational_1.m[1];
    m_t_4.m[3] = local_variable_relational_1.m[3];
    /*@ assert is_trans(m_t_4, local_variable_relational_1, 2); */ ;
    return_variable_relational_3 = m_t_4;
  }
  {
    struct matrix m_t_5;
    m_t_5.m[0] = m1.m[0];
    m_t_5.m[1] = m1.m[2];
    m_t_5.m[2] = m1.m[1];
    m_t_5.m[3] = m1.m[3];
    /*@ assert is_trans(m_t_5, m1, 2); */ ;
    local_variable_relational_2 = m_t_5;
  }
  {
    struct matrix m_t_6;
    m_t_6.m[0] = m2.m[0];
    m_t_6.m[1] = m2.m[2];
    m_t_6.m[2] = m2.m[1];
    m_t_6.m[3] = m2.m[3];
    /*@ assert is_trans(m_t_6, m2, 2); */ ;
    local_variable_relational_3 = m_t_6;
  }
  {
    struct matrix m_s_7;
    int i_7 = 0;
    i_7 = 0;
    /*@ loop invariant 0 ≤ i_7 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_7 ⇒
            m_s_7.m[k] ≡
            local_variable_relational_2.m[k] +
            local_variable_relational_3.m[k];
        loop assigns m_s_7, i_7;
    */
    while (i_7 < 4) {
      m_s_7.m[i_7] = local_variable_relational_2.m[i_7] + local_variable_relational_3.m[i_7];
      i_7 ++;
    }
    return_variable_relational_4 = m_s_7;
  }
  /*@ assert
      Rpp:
        is_eq(return_variable_relational_3, return_variable_relational_4, 4);
  */
  return;
}

void relational_wrapper_3(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_4;
  struct matrix return_variable_relational_5;
  struct matrix local_variable_relational_5;
  struct matrix local_variable_relational_6;
  struct matrix return_variable_relational_6;
  {
    struct matrix m_s_8;
    int i_8 = 0;
    i_8 = 0;
    /*@ loop invariant 0 ≤ i_8 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_8 ⇒ m_s_8.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_8, i_8;
    */
    while (i_8 < 4) {
      m_s_8.m[i_8] = m1.m[i_8] + m2.m[i_8];
      i_8 ++;
    }
    local_variable_relational_4 = m_s_8;
  }
  {
    struct matrix m_t_9;
    int i_9 = 0;
    int j_9 = 0;
    i_9 = 0;
    /*@ loop invariant 0 ≤ i_9 ≤ 2;
        loop invariant 0 ≤ j_9 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_9 > 0 ⇒
            m_t_9.m[(i_9 - 1) * 2 + k] ≡
            local_variable_relational_4.m[k * 2 + (i_9 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_9 ⇒
            m_t_9.m[g * 2 + k] ≡ local_variable_relational_4.m[k * 2 + g];
        loop assigns i_9, j_9, m_t_9;
        loop variant 2 - i_9;
    */
    while (i_9 < 2) {
      j_9 = 0;
      /*@ loop invariant 0 ≤ j_9 ≤ 2;
          loop invariant 0 ≤ i_9 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_9 ⇒
              m_t_9.m[g * 2 + k] ≡ local_variable_relational_4.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_9 ⇒
              m_t_9.m[i_9 * 2 + k] ≡
              local_variable_relational_4.m[k * 2 + i_9];
          loop assigns j_9, m_t_9;
          loop variant 2 - j_9;
      */
      while (j_9 < 2) {
        m_t_9.m[i_9 * 2 + j_9] = local_variable_relational_4.m[j_9 * 2 + i_9];
        j_9 ++;
      }
      i_9 ++;
    }
    /*@ assert is_trans(m_t_9, local_variable_relational_4, 2); */ ;
    return_variable_relational_5 = m_t_9;
  }
  {
    struct matrix m_t_10;
    int i_10 = 0;
    int j_10 = 0;
    i_10 = 0;
    /*@ loop invariant 0 ≤ i_10 ≤ 2;
        loop invariant 0 ≤ j_10 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_10 > 0 ⇒
            m_t_10.m[(i_10 - 1) * 2 + k] ≡ m1.m[k * 2 + (i_10 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_10 ⇒
            m_t_10.m[g * 2 + k] ≡ m1.m[k * 2 + g];
        loop assigns i_10, j_10, m_t_10;
        loop variant 2 - i_10;
    */
    while (i_10 < 2) {
      j_10 = 0;
      /*@ loop invariant 0 ≤ j_10 ≤ 2;
          loop invariant 0 ≤ i_10 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_10 ⇒
              m_t_10.m[g * 2 + k] ≡ m1.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_10 ⇒
              m_t_10.m[i_10 * 2 + k] ≡ m1.m[k * 2 + i_10];
          loop assigns j_10, m_t_10;
          loop variant 2 - j_10;
      */
      while (j_10 < 2) {
        m_t_10.m[i_10 * 2 + j_10] = m1.m[j_10 * 2 + i_10];
        j_10 ++;
      }
      i_10 ++;
    }
    /*@ assert is_trans(m_t_10, m1, 2); */ ;
    local_variable_relational_5 = m_t_10;
  }
  {
    struct matrix m_t_11;
    int i_11 = 0;
    int j_11 = 0;
    i_11 = 0;
    /*@ loop invariant 0 ≤ i_11 ≤ 2;
        loop invariant 0 ≤ j_11 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_11 > 0 ⇒
            m_t_11.m[(i_11 - 1) * 2 + k] ≡ m2.m[k * 2 + (i_11 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_11 ⇒
            m_t_11.m[g * 2 + k] ≡ m2.m[k * 2 + g];
        loop assigns i_11, j_11, m_t_11;
        loop variant 2 - i_11;
    */
    while (i_11 < 2) {
      j_11 = 0;
      /*@ loop invariant 0 ≤ j_11 ≤ 2;
          loop invariant 0 ≤ i_11 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_11 ⇒
              m_t_11.m[g * 2 + k] ≡ m2.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_11 ⇒
              m_t_11.m[i_11 * 2 + k] ≡ m2.m[k * 2 + i_11];
          loop assigns j_11, m_t_11;
          loop variant 2 - j_11;
      */
      while (j_11 < 2) {
        m_t_11.m[i_11 * 2 + j_11] = m2.m[j_11 * 2 + i_11];
        j_11 ++;
      }
      i_11 ++;
    }
    /*@ assert is_trans(m_t_11, m2, 2); */ ;
    local_variable_relational_6 = m_t_11;
  }
  {
    struct matrix m_s_12;
    int i_12 = 0;
    i_12 = 0;
    /*@ loop invariant 0 ≤ i_12 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_12 ⇒
            m_s_12.m[k] ≡
            local_variable_relational_5.m[k] +
            local_variable_relational_6.m[k];
        loop assigns m_s_12, i_12;
    */
    while (i_12 < 4) {
      m_s_12.m[i_12] = local_variable_relational_5.m[i_12] + local_variable_relational_6.m[i_12];
      i_12 ++;
    }
    return_variable_relational_6 = m_s_12;
  }
  /*@ assert
      Rpp:
        is_eq(return_variable_relational_5, return_variable_relational_6, 4);
  */
  return;
}

void relational_wrapper_4(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_7;
  struct matrix return_variable_relational_7;
  struct matrix local_variable_relational_8;
  struct matrix local_variable_relational_9;
  struct matrix return_variable_relational_8;
  {
    struct matrix m_s_13;
    int i_13 = 0;
    i_13 = 0;
    /*@ loop invariant 0 ≤ i_13 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_13 ⇒ m_s_13.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_13, i_13;
    */
    while (i_13 < 4) {
      m_s_13.m[i_13] = m1.m[i_13] + m2.m[i_13];
      i_13 ++;
    }
    local_variable_relational_7 = m_s_13;
  }
  {
    struct matrix m_t_14;
    int i_14 = 0;
    int j_14 = 0;
    i_14 = 0;
    /*@ loop invariant 0 ≤ i_14 ≤ 2;
        loop invariant 0 ≤ j_14 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_14 > 0 ⇒
            m_t_14.m[(i_14 - 1) * 2 + k] ≡
            local_variable_relational_7.m[k * 2 + (i_14 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_14 ⇒
            m_t_14.m[g * 2 + k] ≡ local_variable_relational_7.m[k * 2 + g];
        loop assigns i_14, j_14, m_t_14;
        loop variant 2 - i_14;
    */
    while (i_14 < 2) {
      j_14 = 0;
      /*@ loop invariant 0 ≤ j_14 ≤ 2;
          loop invariant 0 ≤ i_14 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_14 ⇒
              m_t_14.m[g * 2 + k] ≡
              local_variable_relational_7.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_14 ⇒
              m_t_14.m[i_14 * 2 + k] ≡
              local_variable_relational_7.m[k * 2 + i_14];
          loop assigns j_14, m_t_14;
          loop variant 2 - j_14;
      */
      while (j_14 < 2) {
        m_t_14.m[i_14 * 2 + j_14] = local_variable_relational_7.m[j_14 * 2 + i_14];
        j_14 ++;
      }
      i_14 ++;
    }
    /*@ assert is_trans(m_t_14, local_variable_relational_7, 2); */ ;
    return_variable_relational_7 = m_t_14;
  }
  {
    struct matrix m_t_15;
    int i_15 = 0;
    int j_15 = 0;
    i_15 = 0;
    /*@ loop invariant 0 ≤ i_15 ≤ 2;
        loop invariant 0 ≤ j_15 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_15 > 0 ⇒
            m_t_15.m[(i_15 - 1) * 2 + k] ≡ m1.m[k * 2 + (i_15 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_15 ⇒
            m_t_15.m[g * 2 + k] ≡ m1.m[k * 2 + g];
        loop assigns i_15, j_15, m_t_15;
        loop variant 2 - i_15;
    */
    while (i_15 < 2) {
      j_15 = 0;
      /*@ loop invariant 0 ≤ j_15 ≤ 2;
          loop invariant 0 ≤ i_15 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_15 ⇒
              m_t_15.m[g * 2 + k] ≡ m1.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_15 ⇒
              m_t_15.m[i_15 * 2 + k] ≡ m1.m[k * 2 + i_15];
          loop assigns j_15, m_t_15;
          loop variant 2 - j_15;
      */
      while (j_15 < 2) {
        m_t_15.m[i_15 * 2 + j_15] = m1.m[j_15 * 2 + i_15];
        j_15 ++;
      }
      i_15 ++;
    }
    /*@ assert is_trans(m_t_15, m1, 2); */ ;
    local_variable_relational_8 = m_t_15;
  }
  {
    struct matrix m_t_16;
    int i_16 = 0;
    int j_16 = 0;
    i_16 = 0;
    /*@ loop invariant 0 ≤ i_16 ≤ 2;
        loop invariant 0 ≤ j_16 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_16 > 0 ⇒
            m_t_16.m[(i_16 - 1) * 2 + k] ≡ m2.m[k * 2 + (i_16 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_16 ⇒
            m_t_16.m[g * 2 + k] ≡ m2.m[k * 2 + g];
        loop assigns i_16, j_16, m_t_16;
        loop variant 2 - i_16;
    */
    while (i_16 < 2) {
      j_16 = 0;
      /*@ loop invariant 0 ≤ j_16 ≤ 2;
          loop invariant 0 ≤ i_16 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_16 ⇒
              m_t_16.m[g * 2 + k] ≡ m2.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_16 ⇒
              m_t_16.m[i_16 * 2 + k] ≡ m2.m[k * 2 + i_16];
          loop assigns j_16, m_t_16;
          loop variant 2 - j_16;
      */
      while (j_16 < 2) {
        m_t_16.m[i_16 * 2 + j_16] = m2.m[j_16 * 2 + i_16];
        j_16 ++;
      }
      i_16 ++;
    }
    /*@ assert is_trans(m_t_16, m2, 2); */ ;
    local_variable_relational_9 = m_t_16;
  }
  {
    struct matrix m_s_17;
    int i_17 = 0;
    i_17 = 0;
    /*@ loop invariant 0 ≤ i_17 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_17 ⇒
            m_s_17.m[k] ≡
            local_variable_relational_8.m[k] +
            local_variable_relational_9.m[k];
        loop assigns m_s_17, i_17;
    */
    while (i_17 < 4) {
      m_s_17.m[i_17] = local_variable_relational_8.m[i_17] + local_variable_relational_9.m[i_17];
      i_17 ++;
    }
    return_variable_relational_8 = m_s_17;
  }
  /*@ assert
      Rpp:
        is_eq_test(return_variable_relational_7,
                  return_variable_relational_8, 0);
  */
  return;
}

void relational_wrapper_5(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_10;
  struct matrix return_variable_relational_9;
  struct matrix local_variable_relational_11;
  struct matrix local_variable_relational_12;
  struct matrix return_variable_relational_10;
  {
    struct matrix m_s_18;
    int i_18 = 0;
    i_18 = 0;
    /*@ loop invariant 0 ≤ i_18 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_18 ⇒ m_s_18.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_18, i_18;
    */
    while (i_18 < 4) {
      m_s_18.m[i_18] = m1.m[i_18] + m2.m[i_18];
      i_18 ++;
    }
    local_variable_relational_10 = m_s_18;
  }
  {
    struct matrix m_t_19;
    int i_19 = 0;
    int j_19 = 0;
    i_19 = 0;
    /*@ loop invariant 0 ≤ i_19 ≤ 2;
        loop invariant 0 ≤ j_19 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_19 > 0 ⇒
            m_t_19.m[(i_19 - 1) * 2 + k] ≡
            local_variable_relational_10.m[k * 2 + (i_19 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_19 ⇒
            m_t_19.m[g * 2 + k] ≡ local_variable_relational_10.m[k * 2 + g];
        loop assigns i_19, j_19, m_t_19;
        loop variant 2 - i_19;
    */
    while (i_19 < 2) {
      j_19 = 0;
      /*@ loop invariant 0 ≤ j_19 ≤ 2;
          loop invariant 0 ≤ i_19 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_19 ⇒
              m_t_19.m[g * 2 + k] ≡
              local_variable_relational_10.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_19 ⇒
              m_t_19.m[i_19 * 2 + k] ≡
              local_variable_relational_10.m[k * 2 + i_19];
          loop assigns j_19, m_t_19;
          loop variant 2 - j_19;
      */
      while (j_19 < 2) {
        m_t_19.m[i_19 * 2 + j_19] = local_variable_relational_10.m[j_19 * 2 + i_19];
        j_19 ++;
      }
      i_19 ++;
    }
    /*@ assert is_trans(m_t_19, local_variable_relational_10, 2); */ ;
    return_variable_relational_9 = m_t_19;
  }
  {
    struct matrix m_t_20;
    int i_20 = 0;
    int j_20 = 0;
    i_20 = 0;
    /*@ loop invariant 0 ≤ i_20 ≤ 2;
        loop invariant 0 ≤ j_20 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_20 > 0 ⇒
            m_t_20.m[(i_20 - 1) * 2 + k] ≡ m1.m[k * 2 + (i_20 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_20 ⇒
            m_t_20.m[g * 2 + k] ≡ m1.m[k * 2 + g];
        loop assigns i_20, j_20, m_t_20;
        loop variant 2 - i_20;
    */
    while (i_20 < 2) {
      j_20 = 0;
      /*@ loop invariant 0 ≤ j_20 ≤ 2;
          loop invariant 0 ≤ i_20 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_20 ⇒
              m_t_20.m[g * 2 + k] ≡ m1.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_20 ⇒
              m_t_20.m[i_20 * 2 + k] ≡ m1.m[k * 2 + i_20];
          loop assigns j_20, m_t_20;
          loop variant 2 - j_20;
      */
      while (j_20 < 2) {
        m_t_20.m[i_20 * 2 + j_20] = m1.m[j_20 * 2 + i_20];
        j_20 ++;
      }
      i_20 ++;
    }
    /*@ assert is_trans(m_t_20, m1, 2); */ ;
    local_variable_relational_11 = m_t_20;
  }
  {
    struct matrix m_t_21;
    int i_21 = 0;
    int j_21 = 0;
    i_21 = 0;
    /*@ loop invariant 0 ≤ i_21 ≤ 2;
        loop invariant 0 ≤ j_21 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_21 > 0 ⇒
            m_t_21.m[(i_21 - 1) * 2 + k] ≡ m2.m[k * 2 + (i_21 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_21 ⇒
            m_t_21.m[g * 2 + k] ≡ m2.m[k * 2 + g];
        loop assigns i_21, j_21, m_t_21;
        loop variant 2 - i_21;
    */
    while (i_21 < 2) {
      j_21 = 0;
      /*@ loop invariant 0 ≤ j_21 ≤ 2;
          loop invariant 0 ≤ i_21 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_21 ⇒
              m_t_21.m[g * 2 + k] ≡ m2.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_21 ⇒
              m_t_21.m[i_21 * 2 + k] ≡ m2.m[k * 2 + i_21];
          loop assigns j_21, m_t_21;
          loop variant 2 - j_21;
      */
      while (j_21 < 2) {
        m_t_21.m[i_21 * 2 + j_21] = m2.m[j_21 * 2 + i_21];
        j_21 ++;
      }
      i_21 ++;
    }
    /*@ assert is_trans(m_t_21, m2, 2); */ ;
    local_variable_relational_12 = m_t_21;
  }
  {
    struct matrix m_s_22;
    int i_22 = 0;
    i_22 = 0;
    /*@ loop invariant 0 ≤ i_22 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_22 ⇒
            m_s_22.m[k] ≡
            local_variable_relational_11.m[k] +
            local_variable_relational_12.m[k];
        loop assigns m_s_22, i_22;
    */
    while (i_22 < 4) {
      m_s_22.m[i_22] = local_variable_relational_11.m[i_22] + local_variable_relational_12.m[i_22];
      i_22 ++;
    }
    return_variable_relational_10 = m_s_22;
  }
  /*@ assert
      Rpp:
        is_eq_test(return_variable_relational_9,
                  return_variable_relational_10, 1);
  */
  return;
}

void relational_wrapper_6(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_13;
  struct matrix return_variable_relational_11;
  struct matrix local_variable_relational_14;
  struct matrix local_variable_relational_15;
  struct matrix return_variable_relational_12;
  {
    struct matrix m_s_23;
    int i_23 = 0;
    i_23 = 0;
    /*@ loop invariant 0 ≤ i_23 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_23 ⇒ m_s_23.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_23, i_23;
    */
    while (i_23 < 4) {
      m_s_23.m[i_23] = m1.m[i_23] + m2.m[i_23];
      i_23 ++;
    }
    local_variable_relational_13 = m_s_23;
  }
  {
    struct matrix m_t_24;
    int i_24 = 0;
    int j_24 = 0;
    i_24 = 0;
    /*@ loop invariant 0 ≤ i_24 ≤ 2;
        loop invariant 0 ≤ j_24 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_24 > 0 ⇒
            m_t_24.m[(i_24 - 1) * 2 + k] ≡
            local_variable_relational_13.m[k * 2 + (i_24 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_24 ⇒
            m_t_24.m[g * 2 + k] ≡ local_variable_relational_13.m[k * 2 + g];
        loop assigns i_24, j_24, m_t_24;
        loop variant 2 - i_24;
    */
    while (i_24 < 2) {
      j_24 = 0;
      /*@ loop invariant 0 ≤ j_24 ≤ 2;
          loop invariant 0 ≤ i_24 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_24 ⇒
              m_t_24.m[g * 2 + k] ≡
              local_variable_relational_13.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_24 ⇒
              m_t_24.m[i_24 * 2 + k] ≡
              local_variable_relational_13.m[k * 2 + i_24];
          loop assigns j_24, m_t_24;
          loop variant 2 - j_24;
      */
      while (j_24 < 2) {
        m_t_24.m[i_24 * 2 + j_24] = local_variable_relational_13.m[j_24 * 2 + i_24];
        j_24 ++;
      }
      i_24 ++;
    }
    /*@ assert is_trans(m_t_24, local_variable_relational_13, 2); */ ;
    return_variable_relational_11 = m_t_24;
  }
  {
    struct matrix m_t_25;
    int i_25 = 0;
    int j_25 = 0;
    i_25 = 0;
    /*@ loop invariant 0 ≤ i_25 ≤ 2;
        loop invariant 0 ≤ j_25 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_25 > 0 ⇒
            m_t_25.m[(i_25 - 1) * 2 + k] ≡ m1.m[k * 2 + (i_25 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_25 ⇒
            m_t_25.m[g * 2 + k] ≡ m1.m[k * 2 + g];
        loop assigns i_25, j_25, m_t_25;
        loop variant 2 - i_25;
    */
    while (i_25 < 2) {
      j_25 = 0;
      /*@ loop invariant 0 ≤ j_25 ≤ 2;
          loop invariant 0 ≤ i_25 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_25 ⇒
              m_t_25.m[g * 2 + k] ≡ m1.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_25 ⇒
              m_t_25.m[i_25 * 2 + k] ≡ m1.m[k * 2 + i_25];
          loop assigns j_25, m_t_25;
          loop variant 2 - j_25;
      */
      while (j_25 < 2) {
        m_t_25.m[i_25 * 2 + j_25] = m1.m[j_25 * 2 + i_25];
        j_25 ++;
      }
      i_25 ++;
    }
    /*@ assert is_trans(m_t_25, m1, 2); */ ;
    local_variable_relational_14 = m_t_25;
  }
  {
    struct matrix m_t_26;
    int i_26 = 0;
    int j_26 = 0;
    i_26 = 0;
    /*@ loop invariant 0 ≤ i_26 ≤ 2;
        loop invariant 0 ≤ j_26 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_26 > 0 ⇒
            m_t_26.m[(i_26 - 1) * 2 + k] ≡ m2.m[k * 2 + (i_26 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_26 ⇒
            m_t_26.m[g * 2 + k] ≡ m2.m[k * 2 + g];
        loop assigns i_26, j_26, m_t_26;
        loop variant 2 - i_26;
    */
    while (i_26 < 2) {
      j_26 = 0;
      /*@ loop invariant 0 ≤ j_26 ≤ 2;
          loop invariant 0 ≤ i_26 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_26 ⇒
              m_t_26.m[g * 2 + k] ≡ m2.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_26 ⇒
              m_t_26.m[i_26 * 2 + k] ≡ m2.m[k * 2 + i_26];
          loop assigns j_26, m_t_26;
          loop variant 2 - j_26;
      */
      while (j_26 < 2) {
        m_t_26.m[i_26 * 2 + j_26] = m2.m[j_26 * 2 + i_26];
        j_26 ++;
      }
      i_26 ++;
    }
    /*@ assert is_trans(m_t_26, m2, 2); */ ;
    local_variable_relational_15 = m_t_26;
  }
  {
    struct matrix m_s_27;
    int i_27 = 0;
    i_27 = 0;
    /*@ loop invariant 0 ≤ i_27 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_27 ⇒
            m_s_27.m[k] ≡
            local_variable_relational_14.m[k] +
            local_variable_relational_15.m[k];
        loop assigns m_s_27, i_27;
    */
    while (i_27 < 4) {
      m_s_27.m[i_27] = local_variable_relational_14.m[i_27] + local_variable_relational_15.m[i_27];
      i_27 ++;
    }
    return_variable_relational_12 = m_s_27;
  }
  /*@ assert
      Rpp:
        is_eq_test(return_variable_relational_11,
                  return_variable_relational_12, 2);
  */
  return;
}

void relational_wrapper_7(struct matrix m1, struct matrix m2)
{
  struct matrix local_variable_relational_16;
  struct matrix return_variable_relational_13;
  struct matrix local_variable_relational_17;
  struct matrix local_variable_relational_18;
  struct matrix return_variable_relational_14;
  {
    struct matrix m_s_28;
    int i_28 = 0;
    i_28 = 0;
    /*@ loop invariant 0 ≤ i_28 ≤ 4;
        loop invariant
          ∀ int k; 0 ≤ k < i_28 ⇒ m_s_28.m[k] ≡ m1.m[k] + m2.m[k];
        loop assigns m_s_28, i_28;
    */
    while (i_28 < 4) {
      m_s_28.m[i_28] = m1.m[i_28] + m2.m[i_28];
      i_28 ++;
    }
    local_variable_relational_16 = m_s_28;
  }
  {
    struct matrix m_t_29;
    int i_29 = 0;
    int j_29 = 0;
    i_29 = 0;
    /*@ loop invariant 0 ≤ i_29 ≤ 2;
        loop invariant 0 ≤ j_29 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_29 > 0 ⇒
            m_t_29.m[(i_29 - 1) * 2 + k] ≡
            local_variable_relational_16.m[k * 2 + (i_29 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_29 ⇒
            m_t_29.m[g * 2 + k] ≡ local_variable_relational_16.m[k * 2 + g];
        loop assigns i_29, j_29, m_t_29;
        loop variant 2 - i_29;
    */
    while (i_29 < 2) {
      j_29 = 0;
      /*@ loop invariant 0 ≤ j_29 ≤ 2;
          loop invariant 0 ≤ i_29 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_29 ⇒
              m_t_29.m[g * 2 + k] ≡
              local_variable_relational_16.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_29 ⇒
              m_t_29.m[i_29 * 2 + k] ≡
              local_variable_relational_16.m[k * 2 + i_29];
          loop assigns j_29, m_t_29;
          loop variant 2 - j_29;
      */
      while (j_29 < 2) {
        m_t_29.m[i_29 * 2 + j_29] = local_variable_relational_16.m[j_29 * 2 + i_29];
        j_29 ++;
      }
      i_29 ++;
    }
    /*@ assert is_trans(m_t_29, local_variable_relational_16, 2); */ ;
    return_variable_relational_13 = m_t_29;
  }
  {
    struct matrix m_t_30;
    int i_30 = 0;
    int j_30 = 0;
    i_30 = 0;
    /*@ loop invariant 0 ≤ i_30 ≤ 2;
        loop invariant 0 ≤ j_30 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_30 > 0 ⇒
            m_t_30.m[(i_30 - 1) * 2 + k] ≡ m1.m[k * 2 + (i_30 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_30 ⇒
            m_t_30.m[g * 2 + k] ≡ m1.m[k * 2 + g];
        loop assigns i_30, j_30, m_t_30;
        loop variant 2 - i_30;
    */
    while (i_30 < 2) {
      j_30 = 0;
      /*@ loop invariant 0 ≤ j_30 ≤ 2;
          loop invariant 0 ≤ i_30 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_30 ⇒
              m_t_30.m[g * 2 + k] ≡ m1.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_30 ⇒
              m_t_30.m[i_30 * 2 + k] ≡ m1.m[k * 2 + i_30];
          loop assigns j_30, m_t_30;
          loop variant 2 - j_30;
      */
      while (j_30 < 2) {
        m_t_30.m[i_30 * 2 + j_30] = m1.m[j_30 * 2 + i_30];
        j_30 ++;
      }
      i_30 ++;
    }
    /*@ assert is_trans(m_t_30, m1, 2); */ ;
    local_variable_relational_17 = m_t_30;
  }
  {
    struct matrix m_t_31;
    int i_31 = 0;
    int j_31 = 0;
    i_31 = 0;
    /*@ loop invariant 0 ≤ i_31 ≤ 2;
        loop invariant 0 ≤ j_31 ≤ 2;
        loop invariant
          ∀ int k;
            0 ≤ k < 2 ∧ i_31 > 0 ⇒
            m_t_31.m[(i_31 - 1) * 2 + k] ≡ m2.m[k * 2 + (i_31 - 1)];
        loop invariant
          ∀ int k, int g;
            0 ≤ k < 2 ∧ 0 ≤ g < i_31 ⇒
            m_t_31.m[g * 2 + k] ≡ m2.m[k * 2 + g];
        loop assigns i_31, j_31, m_t_31;
        loop variant 2 - i_31;
    */
    while (i_31 < 2) {
      j_31 = 0;
      /*@ loop invariant 0 ≤ j_31 ≤ 2;
          loop invariant 0 ≤ i_31 < 2;
          loop invariant
            ∀ int k, int g;
              0 ≤ k < 2 ∧ 0 ≤ g < i_31 ⇒
              m_t_31.m[g * 2 + k] ≡ m2.m[k * 2 + g];
          loop invariant
            ∀ int k;
              0 ≤ k < j_31 ⇒
              m_t_31.m[i_31 * 2 + k] ≡ m2.m[k * 2 + i_31];
          loop assigns j_31, m_t_31;
          loop variant 2 - j_31;
      */
      while (j_31 < 2) {
        m_t_31.m[i_31 * 2 + j_31] = m2.m[j_31 * 2 + i_31];
        j_31 ++;
      }
      i_31 ++;
    }
    /*@ assert is_trans(m_t_31, m2, 2); */ ;
    local_variable_relational_18 = m_t_31;
  }
  {
    struct matrix m_s_32;
    int i_32 = 0;
    i_32 = 0;
    /*@ loop invariant 0 ≤ i_32 ≤ 4;
        loop invariant
          ∀ int k;
            0 ≤ k < i_32 ⇒
            m_s_32.m[k] ≡
            local_variable_relational_17.m[k] +
            local_variable_relational_18.m[k];
        loop assigns m_s_32, i_32;
    */
    while (i_32 < 4) {
      m_s_32.m[i_32] = local_variable_relational_17.m[i_32] + local_variable_relational_18.m[i_32];
      i_32 ++;
    }
    return_variable_relational_14 = m_s_32;
  }
  /*@ assert
      Rpp:
        is_eq_test(return_variable_relational_13,
                  return_variable_relational_14, 3);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
