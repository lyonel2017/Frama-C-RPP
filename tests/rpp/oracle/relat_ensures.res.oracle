[kernel] Parsing tests/rpp/relat_ensures.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1; x1 > 0 ⇒ g_acsl_pure_1(x1) ≡ x1 + 2;
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ g_acsl_pure_1(\old(x));
 */
int g(int x)
{
  int __retres;
  __retres = 2 + x;
  return __retres;
}

/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1; x1 > 0 ⇒ f_acsl_pure_2(x1) ≡ x1 + 5;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int h_acsl_pure_3(int x) ;
  
  logic int f_acsl_pure_3(int x) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1; x1 > 0 ⇒ f_acsl_pure_3(x1) < h_acsl_pure_3(x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(x));
    
    behavior Relational_behavior_3:
      ensures \result ≡ f_acsl_pure_3(\old(x));
 */
int f(int x)
{
  int __retres;
  __retres = x + 5;
  return __retres;
}

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_3:
      ensures \result ≡ h_acsl_pure_3(\old(x));
 */
int h(int x)
{
  int __retres;
  int tmp;
  int tmp_0;
  tmp = f(x);
  tmp_0 = g(x);
  __retres = tmp + tmp_0;
  return __retres;
}

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ g_acsl_pure_1(\old(x));
 */
int g_aux_3(int x);

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f_acsl_pure_2(\old(x));
 */
int f_aux_3(int x);

void relational_wrapper_1(int x1)
{
  int return_variable_relational_1;
  {
    int __retres_1;
    __retres_1 = 2 + x1;
    return_variable_relational_1 = __retres_1;
  }
  /*@ check Rpp: x1 > 0 ⇒ return_variable_relational_1 ≡ x1 + 2; */
  return;
}

void relational_wrapper_2(int x1)
{
  int return_variable_relational_2;
  {
    int __retres_2;
    __retres_2 = x1 + 5;
    return_variable_relational_2 = __retres_2;
  }
  /*@ check Rpp: x1 > 0 ⇒ return_variable_relational_2 ≡ x1 + 5; */
  return;
}

void relational_wrapper_3(int x1)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int __retres_3;
    __retres_3 = x1 + 5;
    return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int tmp_4;
    int tmp_0_4;
    tmp_4 = f_aux_3(x1);
    tmp_0_4 = g_aux_3(x1);
    __retres_4 = tmp_4 + tmp_0_4;
    return_variable_relational_4 = __retres_4;
  }
  /*@ check
      Rpp:
        x1 > 0 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
