[kernel] Parsing tests/rpp/same_id.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int y;
/*@
axiomatic Relational_axiome_1 {
  predicate g_acsl_1(int y_pre, int return_variable_relational) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int y_id1_pre, int return_variable_relational_1;
      g_acsl_1(y_id1_pre, return_variable_relational_1) ⇒ 0 ≡ 0;
  
  }
 */
/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior_1:
      ensures g_acsl_1(\at(y,Pre), \result);
 */
int g(void)
{
  return y;
}

int y_id1_1;

void relational_wrapper_1(void)
{
  int return_variable_relational_1;
  return_variable_relational_1 = y_id1_1;
  /*@ assert Rpp: 0 ≡ 0; */
  return;
}

/*@
axiomatic Relational_axiome_2 {
  predicate k_acsl_2(int y_pre, int return_variable_relational) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int y_id1_pre, int return_variable_relational_2;
      k_acsl_2(y_id1_pre, return_variable_relational_2) ⇒
      return_variable_relational_2 ≡ y_id1_pre;
  
  }

*/
/*@ assigns \result;
    assigns \result \from y;
    
    behavior Relational_behavior_2:
      ensures k_acsl_2(\at(y,Pre), \result);
 */
int k(void)
{
  return y;
}

int y_id1_2;

void relational_wrapper_2(void)
{
  int return_variable_relational_2;
  return_variable_relational_2 = y_id1_2;
  /*@ assert Rpp: return_variable_relational_2 ≡ \at(y_id1_2,Pre); */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
