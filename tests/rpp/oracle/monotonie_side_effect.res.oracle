[kernel] Parsing tests/rpp/monotonie_side_effect.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
int y;
/*@
axiomatic Relational_axiome_5 {
  logic int g_acsl_pure_5(int x) ;
  
  predicate f_acsl_5(int y_pre, int y_post) ;
  
  lemma Relational_lemma_5{L}:
    ∀ int x3, int y_id8_pre, int y_id8_post;
      f_acsl_5(y_id8_pre, y_id8_post) ⇒
      x3 ≡ y_id8_pre ⇒ y_id8_post ≡ g_acsl_pure_5(x3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int g_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ g_acsl_pure_2(x1) < g_acsl_pure_2(x2);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  predicate g_acsl_3(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1, int x2, int return_variable_relational_3,
        int return_variable_relational_2;
      g_acsl_3(x2, return_variable_relational_3) ⇒
      g_acsl_3(x1, return_variable_relational_2) ⇒
      x1 < x2 ⇒ return_variable_relational_2 < return_variable_relational_3;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int x) ;
  
  predicate g_acsl_1(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x3, int return_variable_relational_1;
      g_acsl_1(g_acsl_pure_1(x3), return_variable_relational_1) ⇒
      return_variable_relational_1 ≡ g_acsl_pure_1(g_acsl_pure_1(x3));
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures g_acsl_1(\old(x), \result);
      ensures \result ≡ g_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ g_acsl_pure_2(\old(x));
    
    behavior Relational_behavior_3:
      ensures g_acsl_3(\old(x), \result);
    
    behavior Relational_behavior_5:
      ensures \result ≡ g_acsl_pure_5(\old(x));
 */
int g(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_1(int x3)
{
  int local_variable_relational_1;
  int return_variable_relational_1;
  int local_variable_relational_2;
  int return_variable_relational_2;
  {
    int __retres_1;
    __retres_1 = x3 + 1;
    local_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    __retres_2 = local_variable_relational_1 + 1;
    return_variable_relational_1 = __retres_2;
  }
  {
    int __retres_3;
    __retres_3 = x3 + 1;
    local_variable_relational_2 = __retres_3;
  }
  {
    int __retres_4;
    __retres_4 = local_variable_relational_2 + 1;
    return_variable_relational_2 = __retres_4;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(int x1, int x2)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int __retres_5;
    __retres_5 = x1 + 1;
    return_variable_relational_3 = __retres_5;
  }
  {
    int __retres_6;
    __retres_6 = x2 + 1;
    return_variable_relational_4 = __retres_6;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}

void relational_wrapper_3(int x1, int x2)
{
  int return_variable_relational_5;
  int return_variable_relational_6;
  {
    int __retres_7;
    __retres_7 = x1 + 1;
    return_variable_relational_5 = __retres_7;
  }
  {
    int __retres_8;
    __retres_8 = x2 + 1;
    return_variable_relational_6 = __retres_8;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_5 < return_variable_relational_6;
  */
  return;
}

/*@
axiomatic Relational_axiome_6 {
  predicate f_acsl_6(int y_pre, int y_post) ;
  
  lemma Relational_lemma_6{L}:
    ∀ int y_id5_pre, int y_id5_post;
      f_acsl_6(y_id5_pre, y_id5_post) ⇒ y_id5_pre < y_id5_post;
  
  }
 */
/*@
axiomatic Relational_axiome_4 {
  predicate f_acsl_4(int y_pre, int y_post) ;
  
  lemma Relational_lemma_4{L}:
    ∀ int y_id2_pre, int y_id2_post, int y_id1_pre, int y_id1_post;
      f_acsl_4(y_id2_pre, y_id2_post) ⇒
      f_acsl_4(y_id1_pre, y_id1_post) ⇒
      y_id1_pre < y_id2_pre ⇒ y_id1_post < y_id2_post;
  
  }
 */
/*@
axiomatic Relational_axiome_7 {
  predicate k_acsl_7(int y_pre, int y_post) ;
  
  predicate f_acsl_7(int y_pre, int y_post) ;
  
  lemma Relational_lemma_7{L}:
    ∀ int y_id7_pre, int y_id7_post, int y_id6_pre, int y_id6_post;
      k_acsl_7(y_id7_pre, y_id7_post) ⇒
      f_acsl_7(y_id6_pre, y_id6_post) ⇒
      y_id6_pre ≡ y_id7_pre ⇒ y_id6_post < y_id7_post;
  
  }

*/
/*@ assigns y;
    assigns y \from y;
    
    behavior Relational_behavior_4:
      ensures f_acsl_4(\at(y,Pre), \at(y,Post));
    
    behavior Relational_behavior_5:
      ensures f_acsl_5(\at(y,Pre), \at(y,Post));
    
    behavior Relational_behavior_6:
      ensures f_acsl_6(\at(y,Pre), \at(y,Post));
    
    behavior Relational_behavior_7:
      ensures f_acsl_7(\at(y,Pre), \at(y,Post));
 */
void f(void)
{
  y ++;
  return;
}

int y_id1_4;

int y_id2_4;

void relational_wrapper_4(void)
{
  y_id1_4 ++;
  ;
  y_id2_4 ++;
  ;
  /*@ assert
      Rpp:
        \at(y_id1_4,Pre) < \at(y_id2_4,Pre) ⇒
        \at(y_id1_4,Here) < \at(y_id2_4,Here);
  */
  return;
}

int y_id8_5;

void relational_wrapper_5(int x3)
{
  int return_variable_relational_10;
  y_id8_5 ++;
  ;
  {
    int __retres_12;
    __retres_12 = x3 + 1;
    return_variable_relational_10 = __retres_12;
  }
  /*@ assert
      Rpp:
        x3 ≡ \at(y_id8_5,Pre) ⇒
        \at(y_id8_5,Here) ≡ return_variable_relational_10;
  */
  return;
}

int y_id5_6;

void relational_wrapper_6(void)
{
  y_id5_6 ++;
  ;
  /*@ assert Rpp: \at(y_id5_6,Pre) < \at(y_id5_6,Here); */
  return;
}

/*@ assigns y;
    assigns y \from y;
    
    behavior Relational_behavior_7:
      ensures k_acsl_7(\at(y,Pre), \at(y,Post));
 */
void k(void)
{
  y += 5;
  return;
}

int y_id6_7;

int y_id7_7;

void relational_wrapper_7(void)
{
  y_id6_7 ++;
  ;
  y_id7_7 += 5;
  ;
  /*@ assert
      Rpp:
        \at(y_id6_7,Pre) ≡ \at(y_id7_7,Pre) ⇒
        \at(y_id6_7,Here) < \at(y_id7_7,Here);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
