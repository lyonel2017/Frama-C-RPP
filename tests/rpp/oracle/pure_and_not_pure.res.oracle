[kernel] Parsing tests/rpp/pure_and_not_pure.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int f1_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ f1_acsl_pure_1(x1) < f1_acsl_pure_1(x2);
  
  }
 */
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
 */
int f1(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    __retres_1 = x1 + 1;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    __retres_2 = x2 + 1;
    return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}

/*@
axiomatic Relational_axiome_2 {
  predicate f2_acsl_2(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1, int x2, int return_variable_relational_2,
        int return_variable_relational_1;
      f2_acsl_2(x2, return_variable_relational_2) ⇒
      f2_acsl_2(x1, return_variable_relational_1) ⇒
      x1 < x2 ⇒ return_variable_relational_1 < return_variable_relational_2;
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_2:
      ensures f2_acsl_2(\old(x), \result);
 */
int f2(int x)
{
  int tmp;
  tmp = f1(x);
  return tmp;
}

int f1_id1(int x);

int f1_id2(int x);

void relational_wrapper_2(int x1, int x2)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  {
    int tmp_3;
    tmp_3 = f1_id1(x1);
    return_variable_relational_3 = tmp_3;
  }
  {
    int tmp_4;
    tmp_4 = f1_id2(x2);
    return_variable_relational_4 = tmp_4;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_3 < return_variable_relational_4;
  */
  return;
}

/*@
axiomatic Relational_axiome_3 {
  predicate f3_acsl_3(int x, int return_variable_relational) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1, int x2, int return_variable_relational_4,
        int return_variable_relational_3;
      f3_acsl_3(x2, return_variable_relational_4) ⇒
      f3_acsl_3(x1, return_variable_relational_3) ⇒
      x1 < x2 ⇒ return_variable_relational_3 < return_variable_relational_4;
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_3:
      ensures f3_acsl_3(\old(x), \result);
 */
int f3(int x)
{
  int __retres;
  __retres = x + 1;
  return __retres;
}

void relational_wrapper_3(int x1, int x2)
{
  int return_variable_relational_5;
  int return_variable_relational_6;
  {
    int __retres_5;
    __retres_5 = x1 + 1;
    return_variable_relational_5 = __retres_5;
  }
  {
    int __retres_6;
    __retres_6 = x2 + 1;
    return_variable_relational_6 = __retres_6;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_5 < return_variable_relational_6;
  */
  return;
}

/*@
axiomatic Relational_axiome_4 {
  logic int f4_acsl_pure_4(int x) ;
  
  lemma Relational_lemma_4{L}:
    ∀ int x1, int x2; x1 < x2 ⇒ f4_acsl_pure_4(x1) < f4_acsl_pure_4(x2);
  
  }

*/
/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_4:
      ensures \result ≡ f4_acsl_pure_4(\old(x));
 */
int f4(int x)
{
  int tmp;
  tmp = f3(x);
  return tmp;
}

int f3_aux_4(int x);

void relational_wrapper_4(int x1, int x2)
{
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int tmp_7;
    tmp_7 = f3_aux_4(x1);
    return_variable_relational_7 = tmp_7;
  }
  {
    int tmp_8;
    tmp_8 = f3_aux_4(x2);
    return_variable_relational_8 = tmp_8;
  }
  /*@ assert
      Rpp:
        x1 < x2 ⇒
        return_variable_relational_7 < return_variable_relational_8;
  */
  return;
}

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures f3_acsl_3(\old(x), \result);
 */
int f3_aux_4(int x);

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
 */
int f1_id2(int x);

/*@ assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ f1_acsl_pure_1(\old(x));
 */
int f1_id1(int x);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
