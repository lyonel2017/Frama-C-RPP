[kernel] Parsing tests/rpp/const_oper_relat.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_2 {
  logic int f_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}: f_acsl_pure_2((int)2) ≡ 4;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int f_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2;
      x1 ≤ x2 ⇒
      f_acsl_pure_1(x1) < f_acsl_pure_1((int)(x1 + f_acsl_pure_1(x2)));
  
  }
 */
/*@ requires x > 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ f_acsl_pure_2(\old(x));
 */
int f(int x)
{
  int __retres;
  __retres = x * x;
  return __retres;
}

/*@ requires x2 > 0;
    requires x1 > 0; */
void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int local_variable_relational_1;
  int aux_local_variable_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: x1 > 0; */
    __retres_1 = x1 * x1;
    return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: x2 > 0; */
    __retres_2 = x2 * x2;
    local_variable_relational_1 = __retres_2;
  }
  aux_local_variable_1 = x1 + local_variable_relational_1;
  {
    int __retres_3;
    /*@ assert Rpp: aux_local_variable_1 > 0; */
    __retres_3 = aux_local_variable_1 * aux_local_variable_1;
    return_variable_relational_2 = __retres_3;
  }
  /*@ check
      Rpp:
        x1 ≤ x2 ⇒
        return_variable_relational_1 < return_variable_relational_2;
  */
  return;
}

/*@ requires 2 > 0; */
void relational_wrapper_2(void)
{
  int aux_local_variable_2;
  int return_variable_relational_3;
  aux_local_variable_2 = 2;
  {
    int __retres_4;
    /*@ assert Rpp: aux_local_variable_2 > 0; */
    __retres_4 = aux_local_variable_2 * aux_local_variable_2;
    return_variable_relational_3 = __retres_4;
  }
  /*@ check Rpp: return_variable_relational_3 ≡ 4; */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
