[kernel] Parsing tests/rpp/more_pointer.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
predicate is_eq{L1, L2}(int *q, int *p, ℤ b) =
  ∀ ℤ i; 0 ≤ i < b ⇒ \at(*(q + i),L1) ≡ \at(*(p + i),L2);
 */
/*@
axiomatic Relational_axiome_1 {
  predicate f_acsl_1{pre, post}(int *x) 
    reads \at(*(x + (0 .. 1)),post), \at(*(x + (0 .. 1)),pre);
  
  lemma Relational_lemma_1{pre_id2, post_id2, pre_id1, post_id1}:
    ∀ int *x1, int *x2;
      \separated(x1 + (0 .. 1), x2 + (0 .. 1)) ⇒
      f_acsl_1{pre_id2, post_id2}(x2) ⇒
      f_acsl_1{pre_id1, post_id1}(x1) ⇒
      is_eq{post_id1, pre_id2}(x1, x2, 2) ⇒
      is_eq{pre_id1, post_id2}(x1, x2, 2);
  
  }
 */
/*@ requires \valid(x + (0 .. 1));
    assigns *(x + (0 .. 1));
    assigns *(x + (0 .. 1)) \from *(x + (0 .. 1));
    
    behavior Relational_behavior_1:
      ensures f_acsl_1{Pre, Post}(\old(x));
 */
void f(int *x)
{
  int temp = 0;
  temp = *x;
  *x = *(x + 1);
  *(x + 1) = temp;
  return;
}

/*@ requires \separated(x1 + (0 .. 1), x2 + (0 .. 1));
    requires \valid(x2 + (0 .. 1));
    requires \valid(x1 + (0 .. 1));
 */
void relational_wrapper_1(int *x1, int *x2)
{
  {
    /*@ assert Rpp: \valid(x1 + (0 .. 1)); */
    int temp_1 = 0;
    temp_1 = *x1;
    *x1 = *(x1 + 1);
    *(x1 + 1) = temp_1;
    ;
  }
  {
    /*@ assert Rpp: \valid(x2 + (0 .. 1)); */
    int temp_2 = 0;
    temp_2 = *x2;
    *x2 = *(x2 + 1);
    *(x2 + 1) = temp_2;
    ;
  }
  /*@ check Rpp: is_eq{Here, Pre}(x1, x2, 2) ⇒ is_eq{Pre, Here}(x1, x2, 2);
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
