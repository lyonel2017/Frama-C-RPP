[kernel] Parsing tests/rpp/loop_rela.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_1 {
  logic int g_acsl_pure_1(int n) ;
  
  logic int f_acsl_pure_1(int n) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int n; f_acsl_pure_1(n) ≡ g_acsl_pure_1(n);
  
  }
 */
/*@ requires n ≥ 0;
    ensures \result ≡ (\old(n) * (\old(n) + 1)) / 2;
    assigns \result;
    assigns \result \from n;
    
    behavior Relational_behavior_1:
      ensures \result ≡ f_acsl_pure_1(\old(n));
 */
int f(int n)
{
  int i = 0;
  int x = 0;
  /*@ loop invariant 0 ≤ i ≤ n + 1;
      loop invariant n ≡ 0 ⇒ x ≡ 0;
      loop invariant n > 0 ⇒ x ≡ (i * (i - 1)) / 2;
      loop assigns x, i;
  */
  while (i <= n) {
    x += i;
    i ++;
  }
  return x;
}

/*@ requires n ≥ 0;
    ensures \result ≡ (\old(n) * (\old(n) + 1)) / 2;
    assigns \result;
    assigns \result \from n;
    
    behavior Relational_behavior_1:
      ensures \result ≡ g_acsl_pure_1(\old(n));
 */
int g(int n)
{
  int j = 1;
  int y = 0;
  /*@ loop invariant 0 < j ≤ n + 1;
      loop invariant n ≡ 0 ⇒ y ≡ 0;
      loop invariant n > 0 ⇒ y ≡ (j * (j - 1)) / 2;
      loop assigns y, j;
  */
  while (j <= n) {
    y += j;
    j ++;
  }
  return y;
}

/*@ requires n ≥ 0;
    requires n ≥ 0; */
void relational_wrapper_1(int n)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    /*@ assert Rpp: n ≥ 0; */
    int i_1 = 0;
    int x_1 = 0;
    /*@ loop invariant 0 ≤ i_1 ≤ n + 1;
        loop invariant n ≡ 0 ⇒ x_1 ≡ 0;
        loop invariant n > 0 ⇒ x_1 ≡ (i_1 * (i_1 - 1)) / 2;
        loop assigns x_1, i_1;
    */
    while (i_1 <= n) {
      x_1 += i_1;
      i_1 ++;
    }
    return_variable_relational_1 = x_1;
  }
  {
    /*@ assert Rpp: n ≥ 0; */
    int j_2 = 1;
    int y_2 = 0;
    /*@ loop invariant 0 < j_2 ≤ n + 1;
        loop invariant n ≡ 0 ⇒ y_2 ≡ 0;
        loop invariant n > 0 ⇒ y_2 ≡ (j_2 * (j_2 - 1)) / 2;
        loop assigns y_2, j_2;
    */
    while (j_2 <= n) {
      y_2 += j_2;
      j_2 ++;
    }
    return_variable_relational_2 = y_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ return_variable_relational_2;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
