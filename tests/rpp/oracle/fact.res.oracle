[kernel] Parsing tests/rpp/fact.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
/*@
axiomatic Relational_axiome_2 {
  logic int fact_acsl_pure_2(int x) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1;
      x1 > 1 ⇒
      fact_acsl_pure_2(x1) ≡ fact_acsl_pure_2((int)(x1 - 1)) * x1;
  
  }
 */
/*@
axiomatic Relational_axiome_5 {
  logic int fact_acsl_pure_5(int x) ;
  
  lemma Relational_lemma_5{L}:
    ∀ int x1;
      x1 > 1 ⇒
      fact_acsl_pure_5((int)(x1 - 1)) * x1 ≡ fact_acsl_pure_5(x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int fact_acsl_pure_3(int x) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1;
      x1 > 1 ⇒
      fact_acsl_pure_3(x1) ≡ fact_acsl_pure_3((int)(x1 - 1)) * x1;
  
  }
 */
/*@
axiomatic Relational_axiome_4 {
  logic int fact_acsl_pure_4(int x) ;
  
  lemma Relational_lemma_4{L}:
    ∀ int x1; fact_acsl_pure_4((int)(x1 + 1)) ≡ 1;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int fact_acsl_pure_1(int x) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1; x1 ≤ 1 ⇒ fact_acsl_pure_1(x1) ≡ 1;
  
  }
 */
/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_1:
      ensures \result ≡ fact_acsl_pure_1(\old(x));
    
    behavior Relational_behavior_2:
      ensures \result ≡ fact_acsl_pure_2(\old(x));
    
    behavior Relational_behavior_3:
      ensures \result ≡ fact_acsl_pure_3(\old(x));
    
    behavior Relational_behavior_4:
      ensures \result ≡ fact_acsl_pure_4(\old(x));
    
    behavior Relational_behavior_5:
      ensures \result ≡ fact_acsl_pure_5(\old(x));
 */
int fact(int x)
{
  int __retres;
  if (x <= 1) {
    __retres = 1;
    goto return_label;
  }
  else {
    int tmp;
    tmp = fact(x - 1);
    ;
    __retres = x * tmp;
    goto return_label;
  }
  return_label: return __retres;
}

int fact_aux_1(int x);

/*@ requires x1 ≥ 0; */
void relational_wrapper_1(int x1)
{
  int return_variable_relational_1;
  {
    int __retres_1;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      tmp_1 = fact_aux_1(x1 - 1);
      ;
      __retres_1 = x1 * tmp_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  /*@ assert Rpp: x1 ≤ 1 ⇒ return_variable_relational_1 ≡ 1; */
  return;
}

int fact_aux_2(int x);

/*@ requires x1 - 1 ≥ 0;
    requires x1 ≥ 0; */
void relational_wrapper_2(int x1)
{
  int return_variable_relational_2;
  int aux_local_variable_1;
  int return_variable_relational_3;
  {
    int __retres_2;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      tmp_2 = fact_aux_2(x1 - 1);
      ;
      __retres_2 = x1 * tmp_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  aux_local_variable_1 = x1 - 1;
  /*@ assert Rpp: aux_local_variable_1 ≥ 0; */
  return_variable_relational_3 = fact_aux_2(aux_local_variable_1);
  /*@ assert
      Rpp:
        x1 > 1 ⇒
        return_variable_relational_2 ≡ return_variable_relational_3 * x1;
  */
  return;
}

int fact_aux_3(int x);

/*@ requires x1 - 1 ≥ 0;
    requires x1 ≥ 0; */
void relational_wrapper_3(int x1)
{
  int return_variable_relational_4;
  int aux_local_variable_2;
  int return_variable_relational_5;
  {
    int __retres_4;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_4 = 1;
      goto return_label_label_3;
    }
    else {
      int tmp_4;
      tmp_4 = fact_aux_3(x1 - 1);
      ;
      __retres_4 = x1 * tmp_4;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_4 = __retres_4;
  }
  aux_local_variable_2 = x1 - 1;
  {
    int __retres_5;
    /*@ assert Rpp: aux_local_variable_2 ≥ 0; */
    if (aux_local_variable_2 <= 1) {
      __retres_5 = 1;
      goto return_label_label_4;
    }
    else {
      int tmp_5;
      tmp_5 = fact_aux_3(aux_local_variable_2 - 1);
      ;
      __retres_5 = aux_local_variable_2 * tmp_5;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        x1 > 1 ⇒
        return_variable_relational_4 ≡ return_variable_relational_5 * x1;
  */
  return;
}

int fact_aux_4(int x);

/*@ requires x1 + 1 ≥ 0; */
void relational_wrapper_4(int x1)
{
  int aux_local_variable_3;
  int return_variable_relational_6;
  aux_local_variable_3 = x1 + 1;
  {
    int __retres_6;
    /*@ assert Rpp: aux_local_variable_3 ≥ 0; */
    if (aux_local_variable_3 <= 1) {
      __retres_6 = 1;
      goto return_label_label_5;
    }
    else {
      int tmp_6;
      {
        int aux_local_variable_1;
        aux_local_variable_1 = aux_local_variable_3 - 1;
        /*@ assert Rpp: aux_local_variable_1 ≥ 0; */
        {
          int __retres_1;
          if (aux_local_variable_1 <= 1) {
            __retres_1 = 1;
            goto return_label_label_6;
          }
          else {
            int tmp_1;
            tmp_1 = fact_aux_4(aux_local_variable_1 - 1);
            ;
            __retres_1 = aux_local_variable_1 * tmp_1;
            goto return_label_label_6;
          }
          return_label_label_6: tmp_6 = __retres_1;
        }
      }
      ;
      __retres_6 = aux_local_variable_3 * tmp_6;
      goto return_label_label_5;
    }
    return_label_label_5: return_variable_relational_6 = __retres_6;
  }
  /*@ assert Rpp: return_variable_relational_6 ≡ 1; */
  return;
}

int fact_aux_5(int x);

/*@ requires x1 ≥ 0;
    requires x1 - 1 ≥ 0; */
void relational_wrapper_5(int x1)
{
  int aux_local_variable_4;
  int return_variable_relational_7;
  int return_variable_relational_8;
  aux_local_variable_4 = x1 - 1;
  /*@ assert Rpp: aux_local_variable_4 ≥ 0; */
  return_variable_relational_7 = fact_aux_5(aux_local_variable_4);
  {
    int __retres_8;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_8 = 1;
      goto return_label_label_7;
    }
    else {
      int tmp_8;
      tmp_8 = fact_aux_5(x1 - 1);
      ;
      __retres_8 = x1 * tmp_8;
      goto return_label_label_7;
    }
    return_label_label_7: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        x1 > 1 ⇒
        return_variable_relational_7 * x1 ≡ return_variable_relational_8;
  */
  return;
}

/*@
axiomatic Relational_axiome_6 {
  logic int fact_exact_acsl_pure_6(int x) ;
  
  lemma Relational_lemma_6{L}:
    ∀ int x1; x1 ≤ 1 ⇒ fact_exact_acsl_pure_6(x1) ≡ 1;
  
  }
 */
/*@
axiomatic Relational_axiome_7 {
  logic int fact_exact_acsl_pure_7(int x) ;
  
  lemma Relational_lemma_7{L}:
    ∀ int x1;
      x1 ≡ 2 ⇒
      fact_exact_acsl_pure_7(x1) ≡
      fact_exact_acsl_pure_7((int)(x1 - 1)) * x1;
  
  }
 */
/*@
axiomatic Relational_axiome_8 {
  logic int fact_exact_acsl_pure_8(int x) ;
  
  lemma Relational_lemma_8{L}:
    ∀ int x1;
      x1 > 3 ⇒
      fact_exact_acsl_pure_8(x1) ≡
      fact_exact_acsl_pure_8((int)(x1 - 1)) * x1;
  
  }

*/
/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior_6:
      ensures \result ≡ fact_exact_acsl_pure_6(\old(x));
    
    behavior Relational_behavior_7:
      ensures \result ≡ fact_exact_acsl_pure_7(\old(x));
    
    behavior Relational_behavior_8:
      ensures \result ≡ fact_exact_acsl_pure_8(\old(x));
 */
int fact_exact(int x)
{
  int __retres;
  if (x <= 1) {
    __retres = 1;
    goto return_label;
  }
  else {
    int tmp;
    tmp = fact_exact(x - 1);
    ;
    __retres = x * tmp;
    goto return_label;
  }
  return_label: return __retres;
}

int fact_exact_aux_6(int x);

/*@ requires x1 ≥ 0; */
void relational_wrapper_6(int x1)
{
  int return_variable_relational_9;
  {
    int __retres_9;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_9 = 1;
      goto return_label_label_8;
    }
    else {
      int tmp_9;
      tmp_9 = fact_exact_aux_6(x1 - 1);
      ;
      __retres_9 = x1 * tmp_9;
      goto return_label_label_8;
    }
    return_label_label_8: return_variable_relational_9 = __retres_9;
  }
  /*@ assert Rpp: x1 ≤ 1 ⇒ return_variable_relational_9 ≡ 1; */
  return;
}

int fact_exact_aux_7(int x);

/*@ requires x1 - 1 ≥ 0;
    requires x1 ≥ 0; */
void relational_wrapper_7(int x1)
{
  int return_variable_relational_10;
  int aux_local_variable_5;
  int return_variable_relational_11;
  {
    int __retres_10;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_10 = 1;
      goto return_label_label_9;
    }
    else {
      int tmp_10;
      tmp_10 = fact_exact_aux_7(x1 - 1);
      ;
      __retres_10 = x1 * tmp_10;
      goto return_label_label_9;
    }
    return_label_label_9: return_variable_relational_10 = __retres_10;
  }
  aux_local_variable_5 = x1 - 1;
  {
    int __retres_11;
    /*@ assert Rpp: aux_local_variable_5 ≥ 0; */
    if (aux_local_variable_5 <= 1) {
      __retres_11 = 1;
      goto return_label_label_10;
    }
    else {
      int tmp_11;
      tmp_11 = fact_exact_aux_7(aux_local_variable_5 - 1);
      ;
      __retres_11 = aux_local_variable_5 * tmp_11;
      goto return_label_label_10;
    }
    return_label_label_10: return_variable_relational_11 = __retres_11;
  }
  /*@ assert
      Rpp:
        x1 ≡ 2 ⇒
        return_variable_relational_10 ≡ return_variable_relational_11 * x1;
  */
  return;
}

int fact_exact_aux_8(int x);

/*@ requires x1 - 1 ≥ 0;
    requires x1 ≥ 0; */
void relational_wrapper_8(int x1)
{
  int return_variable_relational_12;
  int aux_local_variable_6;
  int return_variable_relational_13;
  {
    int __retres_12;
    /*@ assert Rpp: x1 ≥ 0; */
    if (x1 <= 1) {
      __retres_12 = 1;
      goto return_label_label_11;
    }
    else {
      int tmp_12;
      tmp_12 = fact_exact_aux_8(x1 - 1);
      ;
      __retres_12 = x1 * tmp_12;
      goto return_label_label_11;
    }
    return_label_label_11: return_variable_relational_12 = __retres_12;
  }
  aux_local_variable_6 = x1 - 1;
  {
    int __retres_13;
    /*@ assert Rpp: aux_local_variable_6 ≥ 0; */
    if (aux_local_variable_6 <= 1) {
      __retres_13 = 1;
      goto return_label_label_12;
    }
    else {
      int tmp_13;
      tmp_13 = fact_exact_aux_8(aux_local_variable_6 - 1);
      ;
      __retres_13 = aux_local_variable_6 * tmp_13;
      goto return_label_label_12;
    }
    return_label_label_12: return_variable_relational_13 = __retres_13;
  }
  /*@ assert
      Rpp:
        x1 > 3 ⇒
        return_variable_relational_12 ≡ return_variable_relational_13 * x1;
  */
  return;
}

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_exact_acsl_pure_6(\old(x));
      ensures \result ≡ fact_exact_acsl_pure_7(\old(x));
      ensures \result ≡ fact_exact_acsl_pure_8(\old(x));
    
    behavior Relational_behavior_helper:
      ensures ∀ int x; fact_acsl_pure_2(x) ≡ fact_acsl_pure_1(x);
      ensures ∀ int x; fact_acsl_pure_3(x) ≡ fact_acsl_pure_2(x);
      ensures ∀ int x; fact_acsl_pure_4(x) ≡ fact_acsl_pure_3(x);
      ensures ∀ int x; fact_acsl_pure_5(x) ≡ fact_acsl_pure_4(x);
 */
int fact_exact_aux_8(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_exact_acsl_pure_6(\old(x));
      ensures \result ≡ fact_exact_acsl_pure_7(\old(x));
    
    behavior Relational_behavior_helper:
      ensures ∀ int x; fact_acsl_pure_2(x) ≡ fact_acsl_pure_1(x);
      ensures ∀ int x; fact_acsl_pure_3(x) ≡ fact_acsl_pure_2(x);
      ensures ∀ int x; fact_acsl_pure_4(x) ≡ fact_acsl_pure_3(x);
      ensures ∀ int x; fact_acsl_pure_5(x) ≡ fact_acsl_pure_4(x);
 */
int fact_exact_aux_7(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_exact_acsl_pure_6(\old(x));
    
    behavior Relational_behavior_helper:
      ensures ∀ int x; fact_acsl_pure_2(x) ≡ fact_acsl_pure_1(x);
      ensures ∀ int x; fact_acsl_pure_3(x) ≡ fact_acsl_pure_2(x);
      ensures ∀ int x; fact_acsl_pure_4(x) ≡ fact_acsl_pure_3(x);
      ensures ∀ int x; fact_acsl_pure_5(x) ≡ fact_acsl_pure_4(x);
 */
int fact_exact_aux_6(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_acsl_pure_5(\old(x));
      ensures \result ≡ fact_acsl_pure_1(\old(x));
      ensures \result ≡ fact_acsl_pure_2(\old(x));
      ensures \result ≡ fact_acsl_pure_3(\old(x));
      ensures \result ≡ fact_acsl_pure_4(\old(x));
 */
int fact_aux_5(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_acsl_pure_1(\old(x));
      ensures \result ≡ fact_acsl_pure_2(\old(x));
      ensures \result ≡ fact_acsl_pure_3(\old(x));
      ensures \result ≡ fact_acsl_pure_4(\old(x));
 */
int fact_aux_4(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_acsl_pure_1(\old(x));
      ensures \result ≡ fact_acsl_pure_2(\old(x));
      ensures \result ≡ fact_acsl_pure_3(\old(x));
 */
int fact_aux_3(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_acsl_pure_1(\old(x));
      ensures \result ≡ fact_acsl_pure_2(\old(x));
 */
int fact_aux_2(int x);

/*@ requires x ≥ 0;
    assigns \result;
    assigns \result \from x;
    
    behavior Relational_behavior:
      ensures \result ≡ fact_acsl_pure_1(\old(x));
 */
int fact_aux_1(int x);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
