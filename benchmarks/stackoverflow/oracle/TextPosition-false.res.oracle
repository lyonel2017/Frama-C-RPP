[kernel] Parsing tests/../benchmarks/stackoverflow/TextPosition-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct TextPosition {
   int getDir ;
   float getYDirAdj ;
   float getXDirAdj ;
   float getHeightDir ;
   float getWidthDirAdj ;
};
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct TextPosition x1, struct TextPosition x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct TextPosition x1, struct TextPosition x2,
        struct TextPosition x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct TextPosition x1, struct TextPosition x2,
        struct TextPosition x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct TextPosition o1, struct TextPosition o2)
{
  int __retres;
  float tmp;
  int retval = 0;
  if (o1.getDir < o2.getDir) {
    __retres = -1;
    goto return_label;
  }
  if (o1.getDir > o2.getDir) {
    __retres = 1;
    goto return_label;
  }
  float x1 = o1.getXDirAdj;
  float x2 = o2.getXDirAdj;
  float pos1YBottom = o1.getYDirAdj;
  float pos2YBottom = o2.getYDirAdj;
  float pos1YTop = pos1YBottom - o1.getHeightDir;
  float pos2YTop = pos2YBottom - o2.getHeightDir;
  float aux = pos1YBottom - pos2YBottom;
  if (aux < (float)0) tmp = - aux; else tmp = aux;
  float yDifference = tmp;
  if (yDifference < (float)1) goto _LOR;
  else 
    if (pos2YBottom >= pos1YTop) {
      if (pos2YBottom <= pos1YBottom) goto _LOR; else goto _LAND_0;
    }
    else {
      _LAND_0: ;
      if (pos1YBottom >= pos2YTop) {
        if (pos1YBottom <= pos2YBottom) 
          _LOR:
          if (x1 < x2) retval = -1;
          else 
            if (x1 > x2) retval = 1; else retval = 0;
        else goto _LAND;
      }
      else {
        _LAND: ;
        if (pos1YBottom < pos2YBottom) retval = -1;
        else {
          __retres = 1;
          goto return_label;
        }
      }
    }
  __retres = retval;
  return_label: return __retres;
}

void relational_wrapper_1(struct TextPosition x1, struct TextPosition x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    float tmp_1;
    int retval_1 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    if (x1.getDir > x2.getDir) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    float x1_1 = x1.getXDirAdj;
    float x2_1 = x2.getXDirAdj;
    float pos1YBottom_1 = x1.getYDirAdj;
    float pos2YBottom_1 = x2.getYDirAdj;
    float pos1YTop_1 = pos1YBottom_1 - x1.getHeightDir;
    float pos2YTop_1 = pos2YBottom_1 - x2.getHeightDir;
    float aux_1 = pos1YBottom_1 - pos2YBottom_1;
    if (aux_1 < (float)0) tmp_1 = - aux_1; else tmp_1 = aux_1;
    float yDifference_1 = tmp_1;
    if (yDifference_1 < (float)1) goto _LOR_label_2;
    else 
      if (pos2YBottom_1 >= pos1YTop_1) {
        if (pos2YBottom_1 <= pos1YBottom_1) goto _LOR_label_2;
        else goto _LAND_0_label_3;
      }
      else {
        _LAND_0_label_3: ;
        if (pos1YBottom_1 >= pos2YTop_1) {
          if (pos1YBottom_1 <= pos2YBottom_1) 
            _LOR_label_2:
            if (x1_1 < x2_1) retval_1 = -1;
            else 
              if (x1_1 > x2_1) retval_1 = 1; else retval_1 = 0;
          else goto _LAND_label_4;
        }
        else {
          _LAND_label_4: ;
          if (pos1YBottom_1 < pos2YBottom_1) retval_1 = -1;
          else {
            __retres_1 = 1;
            goto return_label_label_1;
          }
        }
      }
    __retres_1 = retval_1;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    float tmp_2;
    int retval_2 = 0;
    if (x2.getDir < x1.getDir) {
      __retres_2 = -1;
      goto return_label_label_5;
    }
    if (x2.getDir > x1.getDir) {
      __retres_2 = 1;
      goto return_label_label_5;
    }
    float x1_2 = x2.getXDirAdj;
    float x2_2 = x1.getXDirAdj;
    float pos1YBottom_2 = x2.getYDirAdj;
    float pos2YBottom_2 = x1.getYDirAdj;
    float pos1YTop_2 = pos1YBottom_2 - x2.getHeightDir;
    float pos2YTop_2 = pos2YBottom_2 - x1.getHeightDir;
    float aux_2 = pos1YBottom_2 - pos2YBottom_2;
    if (aux_2 < (float)0) tmp_2 = - aux_2; else tmp_2 = aux_2;
    float yDifference_2 = tmp_2;
    if (yDifference_2 < (float)1) goto _LOR_label_6;
    else 
      if (pos2YBottom_2 >= pos1YTop_2) {
        if (pos2YBottom_2 <= pos1YBottom_2) goto _LOR_label_6;
        else goto _LAND_0_label_7;
      }
      else {
        _LAND_0_label_7: ;
        if (pos1YBottom_2 >= pos2YTop_2) {
          if (pos1YBottom_2 <= pos2YBottom_2) 
            _LOR_label_6:
            if (x1_2 < x2_2) retval_2 = -1;
            else 
              if (x1_2 > x2_2) retval_2 = 1; else retval_2 = 0;
          else goto _LAND_label_8;
        }
        else {
          _LAND_label_8: ;
          if (pos1YBottom_2 < pos2YBottom_2) retval_2 = -1;
          else {
            __retres_2 = 1;
            goto return_label_label_5;
          }
        }
      }
    __retres_2 = retval_2;
    return_label_label_5: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct TextPosition x1, struct TextPosition x2,
                          struct TextPosition x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    float tmp_3;
    int retval_3 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_3 = -1;
      goto return_label_label_9;
    }
    if (x1.getDir > x2.getDir) {
      __retres_3 = 1;
      goto return_label_label_9;
    }
    float x1_3 = x1.getXDirAdj;
    float x2_3 = x2.getXDirAdj;
    float pos1YBottom_3 = x1.getYDirAdj;
    float pos2YBottom_3 = x2.getYDirAdj;
    float pos1YTop_3 = pos1YBottom_3 - x1.getHeightDir;
    float pos2YTop_3 = pos2YBottom_3 - x2.getHeightDir;
    float aux_3 = pos1YBottom_3 - pos2YBottom_3;
    if (aux_3 < (float)0) tmp_3 = - aux_3; else tmp_3 = aux_3;
    float yDifference_3 = tmp_3;
    if (yDifference_3 < (float)1) goto _LOR_label_10;
    else 
      if (pos2YBottom_3 >= pos1YTop_3) {
        if (pos2YBottom_3 <= pos1YBottom_3) goto _LOR_label_10;
        else goto _LAND_0_label_11;
      }
      else {
        _LAND_0_label_11: ;
        if (pos1YBottom_3 >= pos2YTop_3) {
          if (pos1YBottom_3 <= pos2YBottom_3) 
            _LOR_label_10:
            if (x1_3 < x2_3) retval_3 = -1;
            else 
              if (x1_3 > x2_3) retval_3 = 1; else retval_3 = 0;
          else goto _LAND_label_12;
        }
        else {
          _LAND_label_12: ;
          if (pos1YBottom_3 < pos2YBottom_3) retval_3 = -1;
          else {
            __retres_3 = 1;
            goto return_label_label_9;
          }
        }
      }
    __retres_3 = retval_3;
    return_label_label_9: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    float tmp_4;
    int retval_4 = 0;
    if (x2.getDir < x3.getDir) {
      __retres_4 = -1;
      goto return_label_label_13;
    }
    if (x2.getDir > x3.getDir) {
      __retres_4 = 1;
      goto return_label_label_13;
    }
    float x1_4 = x2.getXDirAdj;
    float x2_4 = x3.getXDirAdj;
    float pos1YBottom_4 = x2.getYDirAdj;
    float pos2YBottom_4 = x3.getYDirAdj;
    float pos1YTop_4 = pos1YBottom_4 - x2.getHeightDir;
    float pos2YTop_4 = pos2YBottom_4 - x3.getHeightDir;
    float aux_4 = pos1YBottom_4 - pos2YBottom_4;
    if (aux_4 < (float)0) tmp_4 = - aux_4; else tmp_4 = aux_4;
    float yDifference_4 = tmp_4;
    if (yDifference_4 < (float)1) goto _LOR_label_14;
    else 
      if (pos2YBottom_4 >= pos1YTop_4) {
        if (pos2YBottom_4 <= pos1YBottom_4) goto _LOR_label_14;
        else goto _LAND_0_label_15;
      }
      else {
        _LAND_0_label_15: ;
        if (pos1YBottom_4 >= pos2YTop_4) {
          if (pos1YBottom_4 <= pos2YBottom_4) 
            _LOR_label_14:
            if (x1_4 < x2_4) retval_4 = -1;
            else 
              if (x1_4 > x2_4) retval_4 = 1; else retval_4 = 0;
          else goto _LAND_label_16;
        }
        else {
          _LAND_label_16: ;
          if (pos1YBottom_4 < pos2YBottom_4) retval_4 = -1;
          else {
            __retres_4 = 1;
            goto return_label_label_13;
          }
        }
      }
    __retres_4 = retval_4;
    return_label_label_13: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    float tmp_5;
    int retval_5 = 0;
    if (x1.getDir < x3.getDir) {
      __retres_5 = -1;
      goto return_label_label_17;
    }
    if (x1.getDir > x3.getDir) {
      __retres_5 = 1;
      goto return_label_label_17;
    }
    float x1_5 = x1.getXDirAdj;
    float x2_5 = x3.getXDirAdj;
    float pos1YBottom_5 = x1.getYDirAdj;
    float pos2YBottom_5 = x3.getYDirAdj;
    float pos1YTop_5 = pos1YBottom_5 - x1.getHeightDir;
    float pos2YTop_5 = pos2YBottom_5 - x3.getHeightDir;
    float aux_5 = pos1YBottom_5 - pos2YBottom_5;
    if (aux_5 < (float)0) tmp_5 = - aux_5; else tmp_5 = aux_5;
    float yDifference_5 = tmp_5;
    if (yDifference_5 < (float)1) goto _LOR_label_18;
    else 
      if (pos2YBottom_5 >= pos1YTop_5) {
        if (pos2YBottom_5 <= pos1YBottom_5) goto _LOR_label_18;
        else goto _LAND_0_label_19;
      }
      else {
        _LAND_0_label_19: ;
        if (pos1YBottom_5 >= pos2YTop_5) {
          if (pos1YBottom_5 <= pos2YBottom_5) 
            _LOR_label_18:
            if (x1_5 < x2_5) retval_5 = -1;
            else 
              if (x1_5 > x2_5) retval_5 = 1; else retval_5 = 0;
          else goto _LAND_label_20;
        }
        else {
          _LAND_label_20: ;
          if (pos1YBottom_5 < pos2YBottom_5) retval_5 = -1;
          else {
            __retres_5 = 1;
            goto return_label_label_17;
          }
        }
      }
    __retres_5 = retval_5;
    return_label_label_17: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct TextPosition x1, struct TextPosition x2,
                          struct TextPosition x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    float tmp_6;
    int retval_6 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_6 = -1;
      goto return_label_label_21;
    }
    if (x1.getDir > x2.getDir) {
      __retres_6 = 1;
      goto return_label_label_21;
    }
    float x1_6 = x1.getXDirAdj;
    float x2_6 = x2.getXDirAdj;
    float pos1YBottom_6 = x1.getYDirAdj;
    float pos2YBottom_6 = x2.getYDirAdj;
    float pos1YTop_6 = pos1YBottom_6 - x1.getHeightDir;
    float pos2YTop_6 = pos2YBottom_6 - x2.getHeightDir;
    float aux_6 = pos1YBottom_6 - pos2YBottom_6;
    if (aux_6 < (float)0) tmp_6 = - aux_6; else tmp_6 = aux_6;
    float yDifference_6 = tmp_6;
    if (yDifference_6 < (float)1) goto _LOR_label_22;
    else 
      if (pos2YBottom_6 >= pos1YTop_6) {
        if (pos2YBottom_6 <= pos1YBottom_6) goto _LOR_label_22;
        else goto _LAND_0_label_23;
      }
      else {
        _LAND_0_label_23: ;
        if (pos1YBottom_6 >= pos2YTop_6) {
          if (pos1YBottom_6 <= pos2YBottom_6) 
            _LOR_label_22:
            if (x1_6 < x2_6) retval_6 = -1;
            else 
              if (x1_6 > x2_6) retval_6 = 1; else retval_6 = 0;
          else goto _LAND_label_24;
        }
        else {
          _LAND_label_24: ;
          if (pos1YBottom_6 < pos2YBottom_6) retval_6 = -1;
          else {
            __retres_6 = 1;
            goto return_label_label_21;
          }
        }
      }
    __retres_6 = retval_6;
    return_label_label_21: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    float tmp_7;
    int retval_7 = 0;
    if (x1.getDir < x3.getDir) {
      __retres_7 = -1;
      goto return_label_label_25;
    }
    if (x1.getDir > x3.getDir) {
      __retres_7 = 1;
      goto return_label_label_25;
    }
    float x1_7 = x1.getXDirAdj;
    float x2_7 = x3.getXDirAdj;
    float pos1YBottom_7 = x1.getYDirAdj;
    float pos2YBottom_7 = x3.getYDirAdj;
    float pos1YTop_7 = pos1YBottom_7 - x1.getHeightDir;
    float pos2YTop_7 = pos2YBottom_7 - x3.getHeightDir;
    float aux_7 = pos1YBottom_7 - pos2YBottom_7;
    if (aux_7 < (float)0) tmp_7 = - aux_7; else tmp_7 = aux_7;
    float yDifference_7 = tmp_7;
    if (yDifference_7 < (float)1) goto _LOR_label_26;
    else 
      if (pos2YBottom_7 >= pos1YTop_7) {
        if (pos2YBottom_7 <= pos1YBottom_7) goto _LOR_label_26;
        else goto _LAND_0_label_27;
      }
      else {
        _LAND_0_label_27: ;
        if (pos1YBottom_7 >= pos2YTop_7) {
          if (pos1YBottom_7 <= pos2YBottom_7) 
            _LOR_label_26:
            if (x1_7 < x2_7) retval_7 = -1;
            else 
              if (x1_7 > x2_7) retval_7 = 1; else retval_7 = 0;
          else goto _LAND_label_28;
        }
        else {
          _LAND_label_28: ;
          if (pos1YBottom_7 < pos2YBottom_7) retval_7 = -1;
          else {
            __retres_7 = 1;
            goto return_label_label_25;
          }
        }
      }
    __retres_7 = retval_7;
    return_label_label_25: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    float tmp_8;
    int retval_8 = 0;
    if (x2.getDir < x3.getDir) {
      __retres_8 = -1;
      goto return_label_label_29;
    }
    if (x2.getDir > x3.getDir) {
      __retres_8 = 1;
      goto return_label_label_29;
    }
    float x1_8 = x2.getXDirAdj;
    float x2_8 = x3.getXDirAdj;
    float pos1YBottom_8 = x2.getYDirAdj;
    float pos2YBottom_8 = x3.getYDirAdj;
    float pos1YTop_8 = pos1YBottom_8 - x2.getHeightDir;
    float pos2YTop_8 = pos2YBottom_8 - x3.getHeightDir;
    float aux_8 = pos1YBottom_8 - pos2YBottom_8;
    if (aux_8 < (float)0) tmp_8 = - aux_8; else tmp_8 = aux_8;
    float yDifference_8 = tmp_8;
    if (yDifference_8 < (float)1) goto _LOR_label_30;
    else 
      if (pos2YBottom_8 >= pos1YTop_8) {
        if (pos2YBottom_8 <= pos1YBottom_8) goto _LOR_label_30;
        else goto _LAND_0_label_31;
      }
      else {
        _LAND_0_label_31: ;
        if (pos1YBottom_8 >= pos2YTop_8) {
          if (pos1YBottom_8 <= pos2YBottom_8) 
            _LOR_label_30:
            if (x1_8 < x2_8) retval_8 = -1;
            else 
              if (x1_8 > x2_8) retval_8 = 1; else retval_8 = 0;
          else goto _LAND_label_32;
        }
        else {
          _LAND_label_32: ;
          if (pos1YBottom_8 < pos2YBottom_8) retval_8 = -1;
          else {
            __retres_8 = 1;
            goto return_label_label_29;
          }
        }
      }
    __retres_8 = retval_8;
    return_label_label_29: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
