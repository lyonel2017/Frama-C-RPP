[kernel] Parsing benchmarks/stackoverflow/PokerHand-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct PokerHand {
   int hand[13] ;
};
/*@
axiomatic Relational_axiome_3 {
  logic int compare1_acsl_pure_3(struct PokerHand o1, struct PokerHand o2) ;
  
  logic int indexOf_acsl_pure_3(struct PokerHand o1, int val) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct PokerHand x1, struct PokerHand x2;
      indexOf_acsl_pure_3(x1, (int)4) ≢ indexOf_acsl_pure_3(x2, (int)4) ⇒
      compare1_acsl_pure_3(x1, x2) ≡
      indexOf_acsl_pure_3(x1, (int)4) - indexOf_acsl_pure_3(x2, (int)4);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
    
    behavior Relational_behavior_3:
      ensures \result ≡ indexOf_acsl_pure_3(\old(o1), \old(val));
 */
int indexOf(struct PokerHand o1, int val);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          \result < i < 13 ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int lastIndexOf(struct PokerHand o1, int val);

/*@
axiomatic CountAxiomatic {
  logic ℤ Count{L}(struct PokerHand a, ℤ n, int v) 
    reads a.hand[0 .. n - 1];
  
  axiom CountEmpty{L}:
    ∀ struct PokerHand a, int v, ℤ n; n ≤ 0 ⇒ Count(a, n, v) ≡ 0;
  
  axiom CountOneHit{L}:
    ∀ struct PokerHand a, int v, ℤ n;
      a.hand[n] ≡ v ⇒ Count(a, n + 1, v) ≡ Count(a, n, v) + 1;
  
  axiom CountOneMiss{L}:
    ∀ struct PokerHand a, int v, ℤ n;
      a.hand[n] ≢ v ⇒ Count(a, n + 1, v) ≡ Count(a, n, v);
  
  }
 */
/*@ ensures \result ≡ Count(\old(o1), 13, \old(val));
    ensures 0 ≤ \result ≤ 13;
    assigns \result;
    assigns \result \from o1, val;
 */
int countOccurrencesOf(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt(struct PokerHand o1, int i);

/*@
axiomatic Relational_axiome_2 {
  logic int compare1_acsl_pure_2(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare1_acsl_pure_2(x1, x2) > 0 ∧ compare1_acsl_pure_2(x2, x3) > 0 ⇒
      compare1_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare1_acsl_pure_1(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct PokerHand x1, struct PokerHand x2;
      compare1_acsl_pure_1(x1, x2) ≡ -compare1_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_4 {
  logic int compare1_acsl_pure_4(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_4{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare1_acsl_pure_4(x1, x2) ≡ 0 ⇒
      compare1_acsl_pure_4(x1, x3) ≡ compare1_acsl_pure_4(x2, x3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare1_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare1_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare1_acsl_pure_3(\old(o1), \old(o2));
    
    behavior Relational_behavior_4:
      ensures \result ≡ compare1_acsl_pure_4(\old(o1), \old(o2));
 */
int compare1(struct PokerHand o1, struct PokerHand o2)
{
  int __retres;
  int tmp_7;
  int tmp_8;
  int tmp_9;
  int tmp_10;
  tmp_7 = indexOf(o1,4);
  tmp_8 = indexOf(o2,4);
  if (tmp_7 == tmp_8) {
    int i1 = 0;
    /*@ loop invariant 0 ≤ i1 ≤ 13;
        loop invariant
          ∀ ℤ k;
            0 ≤ k < i1 ⇒
            (o1.hand[k] ≡ 0 ∨ o1.hand[k] ≡ 4) ∧
            (o2.hand[k] ≡ 0 ∨ o2.hand[k] ≡ 4);
        loop assigns i1;
    */
    while (i1 <= 12) {
      int tmp;
      int tmp_3;
      int tmp_5;
      tmp = charAt(o1,i1);
      if (tmp != 0) {
        int tmp_0;
        tmp_0 = charAt(o1,i1);
        if (tmp_0 != 4) {
          int tmp_1;
          tmp_1 = charAt(o2,i1);
          if (tmp_1 != 0) {
            int tmp_2;
            tmp_2 = charAt(o2,i1);
            if (tmp_2 != 4) {
              __retres = 0;
              goto return_label;
            }
          }
        }
      }
      tmp_3 = charAt(o1,i1);
      if (tmp_3 != 0) {
        int tmp_4;
        tmp_4 = charAt(o1,i1);
        if (tmp_4 != 4) {
          __retres = -1;
          goto return_label;
        }
      }
      tmp_5 = charAt(o2,i1);
      if (tmp_5 != 0) {
        int tmp_6;
        tmp_6 = charAt(o2,i1);
        if (tmp_6 != 4) {
          __retres = 1;
          goto return_label;
        }
      }
      i1 ++;
    }
  }
  tmp_9 = indexOf(o1,4);
  tmp_10 = indexOf(o2,4);
  __retres = tmp_9 - tmp_10;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_6 {
  logic int compare2_acsl_pure_6(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_6{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare2_acsl_pure_6(x1, x2) > 0 ∧ compare2_acsl_pure_6(x2, x3) > 0 ⇒
      compare2_acsl_pure_6(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_7 {
  logic int compare2_acsl_pure_7(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_7{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare2_acsl_pure_7(x1, x2) ≡ 0 ⇒
      compare2_acsl_pure_7(x1, x3) ≡ compare2_acsl_pure_7(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_5 {
  logic int compare2_acsl_pure_5(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_5{L}:
    ∀ struct PokerHand x1, struct PokerHand x2;
      compare2_acsl_pure_5(x1, x2) ≡ -compare2_acsl_pure_5(x2, x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_5:
      ensures \result ≡ compare2_acsl_pure_5(\old(o1), \old(o2));
    
    behavior Relational_behavior_6:
      ensures \result ≡ compare2_acsl_pure_6(\old(o1), \old(o2));
    
    behavior Relational_behavior_7:
      ensures \result ≡ compare2_acsl_pure_7(\old(o1), \old(o2));
 */
int compare2(struct PokerHand o1, struct PokerHand o2)
{
  int __retres;
  int tmp_8;
  int tmp_9;
  int higherTriple = lastIndexOf(o1,3);
  tmp_8 = lastIndexOf(o2,3);
  ;
  if (higherTriple == tmp_8) {
    int i2 = 0;
    /*@ loop invariant 0 ≤ i2 ≤ 13;
        loop invariant
          ∀ ℤ k;
            0 ≤ k < i2 ⇒
            k ≡ higherTriple ∨
            (o1.hand[k] ≢ 2 ∧ o1.hand[k] ≢ 3 ∧ o2.hand[k] ≢ 2 ∧
             o2.hand[k] ≢ 3);
        loop assigns i2;
    */
    while (i2 <= 12) {
      if (i2 != higherTriple) {
        int tmp_0;
        tmp_0 = charAt(o1,i2);
        if (tmp_0 == 2) goto _LOR_0;
        else {
          int tmp_1;
          tmp_1 = charAt(o1,i2);
          if (tmp_1 == 3) {
            int tmp_2;
            _LOR_0: tmp_2 = charAt(o2,i2);
            if (tmp_2 == 2) goto _LOR;
            else {
              int tmp_3;
              tmp_3 = charAt(o2,i2);
              if (tmp_3 == 3) {
                _LOR: {
                        __retres = 0;
                        goto return_label;
                      }
              }
            }
          }
        }
      }
      if (i2 != higherTriple) {
        int tmp_4;
        tmp_4 = charAt(o1,i2);
        if (tmp_4 == 2) goto _LOR_1;
        else {
          int tmp_5;
          tmp_5 = charAt(o1,i2);
          if (tmp_5 == 3) {
            _LOR_1: {
                      __retres = -1;
                      goto return_label;
                    }
          }
        }
      }
      if (i2 != higherTriple) {
        int tmp_6;
        tmp_6 = charAt(o2,i2);
        if (tmp_6 == 2) goto _LOR_2;
        else {
          int tmp_7;
          tmp_7 = charAt(o2,i2);
          if (tmp_7 == 3) {
            _LOR_2: {
                      __retres = 1;
                      goto return_label;
                    }
          }
        }
      }
      i2 ++;
    }
  }
  tmp_9 = lastIndexOf(o2,3);
  ;
  __retres = higherTriple - tmp_9;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_8 {
  logic int compare_acsl_pure_8(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_8{L}:
    ∀ struct PokerHand x1, struct PokerHand x2;
      compare_acsl_pure_8(x1, x2) ≡ -compare_acsl_pure_8(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_9 {
  logic int compare_acsl_pure_9(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_9{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare_acsl_pure_9(x1, x2) > 0 ∧ compare_acsl_pure_9(x2, x3) > 0 ⇒
      compare_acsl_pure_9(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_10 {
  logic int compare_acsl_pure_10(struct PokerHand o1, struct PokerHand o2) ;
  
  lemma Relational_lemma_10{L}:
    ∀ struct PokerHand x1, struct PokerHand x2, struct PokerHand x3;
      compare_acsl_pure_10(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_10(x1, x3) ≡ compare_acsl_pure_10(x2, x3);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_8:
      ensures \result ≡ compare_acsl_pure_8(\old(o1), \old(o2));
    
    behavior Relational_behavior_9:
      ensures \result ≡ compare_acsl_pure_9(\old(o1), \old(o2));
    
    behavior Relational_behavior_10:
      ensures \result ≡ compare_acsl_pure_10(\old(o1), \old(o2));
 */
int compare(struct PokerHand o1, struct PokerHand o2)
{
  int __retres;
  int tmp_0;
  tmp_0 = indexOf(o1,4);
  if (tmp_0 != -1) goto _LOR;
  else {
    int tmp_1;
    tmp_1 = indexOf(o2,4);
    if (tmp_1 != -1) {
      _LOR:
      {
        int tmp;
        tmp = compare1(o1,o2);
        __retres = tmp;
        goto return_label;
      }
    }
  }
  int tripleCount1 = countOccurrencesOf(o1,3);
  int tripleCount2 = countOccurrencesOf(o2,3);
  if (tripleCount1 > 1) goto _LOR_0;
  else 
    if (tripleCount1 == 1) {
      int tmp_5;
      tmp_5 = indexOf(o1,2);
      if (tmp_5 != -1) goto _LOR_0; else goto _LAND;
    }
    else {
      _LAND: ;
      if (tripleCount2 > 1) goto _LOR_0;
      else 
        if (tripleCount2 == 1) {
          int tmp_6;
          tmp_6 = indexOf(o2,2);
          if (tmp_6 != -1) {
            _LOR_0:
            {
              int tmp_4;
              tmp_4 = compare2(o1,o2);
              __retres = tmp_4;
              goto return_label;
            }
          }
        }
    }
  __retres = 0;
  return_label: return __retres;
}

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare2_acsl_pure_5(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_6(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_7(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare_acsl_pure_9(o1, o2) ≡ compare_acsl_pure_8(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
 */
int compare2_aux_10(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare1_acsl_pure_1(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_2(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_3(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_4(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare_acsl_pure_9(o1, o2) ≡ compare_acsl_pure_8(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int compare1_aux_10(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
    
    behavior Relational_behavior:
      ensures \result ≡ indexOf_acsl_pure_3(\old(o1), \old(val));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare_acsl_pure_9(o1, o2) ≡ compare_acsl_pure_8(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int indexOf_aux_10(struct PokerHand o1, int val);

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare2_acsl_pure_5(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_6(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_7(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
 */
int compare2_aux_9(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare1_acsl_pure_1(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_2(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_3(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_4(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int compare1_aux_9(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
    
    behavior Relational_behavior:
      ensures \result ≡ indexOf_acsl_pure_3(\old(o1), \old(val));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int indexOf_aux_9(struct PokerHand o1, int val);

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare2_acsl_pure_5(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_6(\old(o1), \old(o2));
      ensures \result ≡ compare2_acsl_pure_7(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
 */
int compare2_aux_8(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior:
      ensures \result ≡ compare1_acsl_pure_1(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_2(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_3(\old(o1), \old(o2));
      ensures \result ≡ compare1_acsl_pure_4(\old(o1), \old(o2));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int compare1_aux_8(struct PokerHand o1, struct PokerHand o2);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
    
    behavior Relational_behavior:
      ensures \result ≡ indexOf_acsl_pure_3(\old(o1), \old(val));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_4(o1, o2) ≡ compare1_acsl_pure_3(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_6(o1, o2) ≡ compare2_acsl_pure_5(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare2_acsl_pure_7(o1, o2) ≡ compare2_acsl_pure_6(o1, o2);
 */
int indexOf_aux_8(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_7(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          \result < i < 13 ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int lastIndexOf_aux_7(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_6(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          \result < i < 13 ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int lastIndexOf_aux_6(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_5(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          \result < i < 13 ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int lastIndexOf_aux_5(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_4(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
    
    behavior Relational_behavior:
      ensures \result ≡ indexOf_acsl_pure_3(\old(o1), \old(val));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_2(o1, o2) ≡ compare1_acsl_pure_1(o1, o2);
      ensures
        ∀ struct PokerHand o1, struct PokerHand o2;
          compare1_acsl_pure_3(o1, o2) ≡ compare1_acsl_pure_2(o1, o2);
 */
int indexOf_aux_4(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_3(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int indexOf_aux_3(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_2(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int indexOf_aux_2(struct PokerHand o1, int val);

/*@ ensures \result ≡ (\let tmp = \old(o1.hand); tmp[\old(i)]);
    assigns \result;
    assigns \result \from o1, i;
 */
int charAt_aux_1(struct PokerHand o1, int i);

/*@ assigns \result;
    assigns \result \from o1, val;
    
    behavior some:
      assumes ∃ ℤ i; 0 ≤ i < 13 ∧ o1.hand[i] ≡ val;
      ensures 0 ≤ \result < 13;
      ensures (\let tmp = \old(o1.hand); tmp[\result]) ≡ \old(val);
      ensures
        ∀ ℤ i;
          0 ≤ i < \result ⇒
          (\let tmp = \old(o1.hand); tmp[i]) ≢ \old(val);
      assigns \result;
      assigns \result \from o1, val;
    
    behavior none:
      assumes ∀ ℤ i; 0 ≤ i < 13 ⇒ o1.hand[i] ≢ val;
      ensures \result ≡ -1;
      assigns \result;
      assigns \result \from o1, val;
 */
int indexOf_aux_1(struct PokerHand o1, int val);

void relational_wrapper_1(struct PokerHand x1, struct PokerHand x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int tmp_7_1;
    int tmp_8_1;
    int tmp_9_1;
    int tmp_10_1;
    tmp_7_1 = indexOf_aux_1(x1,4);
    tmp_8_1 = indexOf_aux_1(x2,4);
    if (tmp_7_1 == tmp_8_1) {
      int i1_1 = 0;
      /*@ loop invariant 0 ≤ i1_1 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_1 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4);
          loop assigns i1_1;
      */
      while (i1_1 <= 12) {
        int tmp_1;
        int tmp_3_1;
        int tmp_5_1;
        tmp_1 = charAt_aux_1(x1,i1_1);
        if (tmp_1 != 0) {
          int tmp_0_1;
          tmp_0_1 = charAt_aux_1(x1,i1_1);
          if (tmp_0_1 != 4) {
            int tmp_1_1;
            tmp_1_1 = charAt_aux_1(x2,i1_1);
            if (tmp_1_1 != 0) {
              int tmp_2_1;
              tmp_2_1 = charAt_aux_1(x2,i1_1);
              if (tmp_2_1 != 4) {
                __retres_1 = 0;
                goto return_label_label_1;
              }
            }
          }
        }
        tmp_3_1 = charAt_aux_1(x1,i1_1);
        if (tmp_3_1 != 0) {
          int tmp_4_1;
          tmp_4_1 = charAt_aux_1(x1,i1_1);
          if (tmp_4_1 != 4) {
            __retres_1 = -1;
            goto return_label_label_1;
          }
        }
        tmp_5_1 = charAt_aux_1(x2,i1_1);
        if (tmp_5_1 != 0) {
          int tmp_6_1;
          tmp_6_1 = charAt_aux_1(x2,i1_1);
          if (tmp_6_1 != 4) {
            __retres_1 = 1;
            goto return_label_label_1;
          }
        }
        i1_1 ++;
      }
    }
    tmp_9_1 = indexOf_aux_1(x1,4);
    tmp_10_1 = indexOf_aux_1(x2,4);
    __retres_1 = tmp_9_1 - tmp_10_1;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int tmp_7_2;
    int tmp_8_2;
    int tmp_9_2;
    int tmp_10_2;
    tmp_7_2 = indexOf_aux_1(x2,4);
    tmp_8_2 = indexOf_aux_1(x1,4);
    if (tmp_7_2 == tmp_8_2) {
      int i1_2 = 0;
      /*@ loop invariant 0 ≤ i1_2 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_2 ⇒
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4) ∧
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4);
          loop assigns i1_2;
      */
      while (i1_2 <= 12) {
        int tmp_2;
        int tmp_3_2;
        int tmp_5_2;
        tmp_2 = charAt_aux_1(x2,i1_2);
        if (tmp_2 != 0) {
          int tmp_0_2;
          tmp_0_2 = charAt_aux_1(x2,i1_2);
          if (tmp_0_2 != 4) {
            int tmp_1_2;
            tmp_1_2 = charAt_aux_1(x1,i1_2);
            if (tmp_1_2 != 0) {
              int tmp_2_2;
              tmp_2_2 = charAt_aux_1(x1,i1_2);
              if (tmp_2_2 != 4) {
                __retres_2 = 0;
                goto return_label_label_2;
              }
            }
          }
        }
        tmp_3_2 = charAt_aux_1(x2,i1_2);
        if (tmp_3_2 != 0) {
          int tmp_4_2;
          tmp_4_2 = charAt_aux_1(x2,i1_2);
          if (tmp_4_2 != 4) {
            __retres_2 = -1;
            goto return_label_label_2;
          }
        }
        tmp_5_2 = charAt_aux_1(x1,i1_2);
        if (tmp_5_2 != 0) {
          int tmp_6_2;
          tmp_6_2 = charAt_aux_1(x1,i1_2);
          if (tmp_6_2 != 4) {
            __retres_2 = 1;
            goto return_label_label_2;
          }
        }
        i1_2 ++;
      }
    }
    tmp_9_2 = indexOf_aux_1(x2,4);
    tmp_10_2 = indexOf_aux_1(x1,4);
    __retres_2 = tmp_9_2 - tmp_10_2;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct PokerHand x1, struct PokerHand x2,
                          struct PokerHand x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int tmp_7_3;
    int tmp_8_3;
    int tmp_9_3;
    int tmp_10_3;
    tmp_7_3 = indexOf_aux_2(x1,4);
    tmp_8_3 = indexOf_aux_2(x2,4);
    if (tmp_7_3 == tmp_8_3) {
      int i1_3 = 0;
      /*@ loop invariant 0 ≤ i1_3 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_3 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4);
          loop assigns i1_3;
      */
      while (i1_3 <= 12) {
        int tmp_3;
        int tmp_3_3;
        int tmp_5_3;
        tmp_3 = charAt_aux_2(x1,i1_3);
        if (tmp_3 != 0) {
          int tmp_0_3;
          tmp_0_3 = charAt_aux_2(x1,i1_3);
          if (tmp_0_3 != 4) {
            int tmp_1_3;
            tmp_1_3 = charAt_aux_2(x2,i1_3);
            if (tmp_1_3 != 0) {
              int tmp_2_3;
              tmp_2_3 = charAt_aux_2(x2,i1_3);
              if (tmp_2_3 != 4) {
                __retres_3 = 0;
                goto return_label_label_3;
              }
            }
          }
        }
        tmp_3_3 = charAt_aux_2(x1,i1_3);
        if (tmp_3_3 != 0) {
          int tmp_4_3;
          tmp_4_3 = charAt_aux_2(x1,i1_3);
          if (tmp_4_3 != 4) {
            __retres_3 = -1;
            goto return_label_label_3;
          }
        }
        tmp_5_3 = charAt_aux_2(x2,i1_3);
        if (tmp_5_3 != 0) {
          int tmp_6_3;
          tmp_6_3 = charAt_aux_2(x2,i1_3);
          if (tmp_6_3 != 4) {
            __retres_3 = 1;
            goto return_label_label_3;
          }
        }
        i1_3 ++;
      }
    }
    tmp_9_3 = indexOf_aux_2(x1,4);
    tmp_10_3 = indexOf_aux_2(x2,4);
    __retres_3 = tmp_9_3 - tmp_10_3;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int tmp_7_4;
    int tmp_8_4;
    int tmp_9_4;
    int tmp_10_4;
    tmp_7_4 = indexOf_aux_2(x2,4);
    tmp_8_4 = indexOf_aux_2(x3,4);
    if (tmp_7_4 == tmp_8_4) {
      int i1_4 = 0;
      /*@ loop invariant 0 ≤ i1_4 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_4 ⇒
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4) ∧
              (x3.hand[k] ≡ 0 ∨ x3.hand[k] ≡ 4);
          loop assigns i1_4;
      */
      while (i1_4 <= 12) {
        int tmp_4;
        int tmp_3_4;
        int tmp_5_4;
        tmp_4 = charAt_aux_2(x2,i1_4);
        if (tmp_4 != 0) {
          int tmp_0_4;
          tmp_0_4 = charAt_aux_2(x2,i1_4);
          if (tmp_0_4 != 4) {
            int tmp_1_4;
            tmp_1_4 = charAt_aux_2(x3,i1_4);
            if (tmp_1_4 != 0) {
              int tmp_2_4;
              tmp_2_4 = charAt_aux_2(x3,i1_4);
              if (tmp_2_4 != 4) {
                __retres_4 = 0;
                goto return_label_label_4;
              }
            }
          }
        }
        tmp_3_4 = charAt_aux_2(x2,i1_4);
        if (tmp_3_4 != 0) {
          int tmp_4_4;
          tmp_4_4 = charAt_aux_2(x2,i1_4);
          if (tmp_4_4 != 4) {
            __retres_4 = -1;
            goto return_label_label_4;
          }
        }
        tmp_5_4 = charAt_aux_2(x3,i1_4);
        if (tmp_5_4 != 0) {
          int tmp_6_4;
          tmp_6_4 = charAt_aux_2(x3,i1_4);
          if (tmp_6_4 != 4) {
            __retres_4 = 1;
            goto return_label_label_4;
          }
        }
        i1_4 ++;
      }
    }
    tmp_9_4 = indexOf_aux_2(x2,4);
    tmp_10_4 = indexOf_aux_2(x3,4);
    __retres_4 = tmp_9_4 - tmp_10_4;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int tmp_7_5;
    int tmp_8_5;
    int tmp_9_5;
    int tmp_10_5;
    tmp_7_5 = indexOf_aux_2(x1,4);
    tmp_8_5 = indexOf_aux_2(x3,4);
    if (tmp_7_5 == tmp_8_5) {
      int i1_5 = 0;
      /*@ loop invariant 0 ≤ i1_5 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_5 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x3.hand[k] ≡ 0 ∨ x3.hand[k] ≡ 4);
          loop assigns i1_5;
      */
      while (i1_5 <= 12) {
        int tmp_5;
        int tmp_3_5;
        int tmp_5_5;
        tmp_5 = charAt_aux_2(x1,i1_5);
        if (tmp_5 != 0) {
          int tmp_0_5;
          tmp_0_5 = charAt_aux_2(x1,i1_5);
          if (tmp_0_5 != 4) {
            int tmp_1_5;
            tmp_1_5 = charAt_aux_2(x3,i1_5);
            if (tmp_1_5 != 0) {
              int tmp_2_5;
              tmp_2_5 = charAt_aux_2(x3,i1_5);
              if (tmp_2_5 != 4) {
                __retres_5 = 0;
                goto return_label_label_5;
              }
            }
          }
        }
        tmp_3_5 = charAt_aux_2(x1,i1_5);
        if (tmp_3_5 != 0) {
          int tmp_4_5;
          tmp_4_5 = charAt_aux_2(x1,i1_5);
          if (tmp_4_5 != 4) {
            __retres_5 = -1;
            goto return_label_label_5;
          }
        }
        tmp_5_5 = charAt_aux_2(x3,i1_5);
        if (tmp_5_5 != 0) {
          int tmp_6_5;
          tmp_6_5 = charAt_aux_2(x3,i1_5);
          if (tmp_6_5 != 4) {
            __retres_5 = 1;
            goto return_label_label_5;
          }
        }
        i1_5 ++;
      }
    }
    tmp_9_5 = indexOf_aux_2(x1,4);
    tmp_10_5 = indexOf_aux_2(x3,4);
    __retres_5 = tmp_9_5 - tmp_10_5;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct PokerHand x1, struct PokerHand x2)
{
  int aux_local_variable_1;
  int return_variable_relational_6;
  int aux_local_variable_2;
  int return_variable_relational_7;
  int return_variable_relational_8;
  int aux_local_variable_3;
  int return_variable_relational_9;
  int aux_local_variable_4;
  int return_variable_relational_10;
  aux_local_variable_1 = 4;
  return_variable_relational_6 = indexOf_aux_3(x1,aux_local_variable_1);
  aux_local_variable_2 = 4;
  return_variable_relational_7 = indexOf_aux_3(x2,aux_local_variable_2);
  {
    int __retres_8;
    int tmp_7_8;
    int tmp_8_8;
    int tmp_9_8;
    int tmp_10_8;
    tmp_7_8 = indexOf_aux_3(x1,4);
    tmp_8_8 = indexOf_aux_3(x2,4);
    if (tmp_7_8 == tmp_8_8) {
      int i1_8 = 0;
      /*@ loop invariant 0 ≤ i1_8 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_8 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4);
          loop assigns i1_8;
      */
      while (i1_8 <= 12) {
        int tmp_8;
        int tmp_3_8;
        int tmp_5_8;
        tmp_8 = charAt_aux_3(x1,i1_8);
        if (tmp_8 != 0) {
          int tmp_0_8;
          tmp_0_8 = charAt_aux_3(x1,i1_8);
          if (tmp_0_8 != 4) {
            int tmp_1_8;
            tmp_1_8 = charAt_aux_3(x2,i1_8);
            if (tmp_1_8 != 0) {
              int tmp_2_8;
              tmp_2_8 = charAt_aux_3(x2,i1_8);
              if (tmp_2_8 != 4) {
                __retres_8 = 0;
                goto return_label_label_6;
              }
            }
          }
        }
        tmp_3_8 = charAt_aux_3(x1,i1_8);
        if (tmp_3_8 != 0) {
          int tmp_4_8;
          tmp_4_8 = charAt_aux_3(x1,i1_8);
          if (tmp_4_8 != 4) {
            __retres_8 = -1;
            goto return_label_label_6;
          }
        }
        tmp_5_8 = charAt_aux_3(x2,i1_8);
        if (tmp_5_8 != 0) {
          int tmp_6_8;
          tmp_6_8 = charAt_aux_3(x2,i1_8);
          if (tmp_6_8 != 4) {
            __retres_8 = 1;
            goto return_label_label_6;
          }
        }
        i1_8 ++;
      }
    }
    tmp_9_8 = indexOf_aux_3(x1,4);
    tmp_10_8 = indexOf_aux_3(x2,4);
    __retres_8 = tmp_9_8 - tmp_10_8;
    return_label_label_6: return_variable_relational_8 = __retres_8;
  }
  aux_local_variable_3 = 4;
  return_variable_relational_9 = indexOf_aux_3(x1,aux_local_variable_3);
  aux_local_variable_4 = 4;
  return_variable_relational_10 = indexOf_aux_3(x2,aux_local_variable_4);
  /*@ check
      Rpp:
        return_variable_relational_6 ≢ return_variable_relational_7 ⇒
        return_variable_relational_8 ≡
        return_variable_relational_9 - return_variable_relational_10;
  */
  return;
}

void relational_wrapper_4(struct PokerHand x1, struct PokerHand x2,
                          struct PokerHand x3)
{
  int return_variable_relational_11;
  int return_variable_relational_12;
  int return_variable_relational_13;
  {
    int __retres_11;
    int tmp_7_11;
    int tmp_8_11;
    int tmp_9_11;
    int tmp_10_11;
    tmp_7_11 = indexOf_aux_4(x1,4);
    tmp_8_11 = indexOf_aux_4(x2,4);
    if (tmp_7_11 == tmp_8_11) {
      int i1_11 = 0;
      /*@ loop invariant 0 ≤ i1_11 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_11 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4);
          loop assigns i1_11;
      */
      while (i1_11 <= 12) {
        int tmp_11;
        int tmp_3_11;
        int tmp_5_11;
        tmp_11 = charAt_aux_4(x1,i1_11);
        if (tmp_11 != 0) {
          int tmp_0_11;
          tmp_0_11 = charAt_aux_4(x1,i1_11);
          if (tmp_0_11 != 4) {
            int tmp_1_11;
            tmp_1_11 = charAt_aux_4(x2,i1_11);
            if (tmp_1_11 != 0) {
              int tmp_2_11;
              tmp_2_11 = charAt_aux_4(x2,i1_11);
              if (tmp_2_11 != 4) {
                __retres_11 = 0;
                goto return_label_label_7;
              }
            }
          }
        }
        tmp_3_11 = charAt_aux_4(x1,i1_11);
        if (tmp_3_11 != 0) {
          int tmp_4_11;
          tmp_4_11 = charAt_aux_4(x1,i1_11);
          if (tmp_4_11 != 4) {
            __retres_11 = -1;
            goto return_label_label_7;
          }
        }
        tmp_5_11 = charAt_aux_4(x2,i1_11);
        if (tmp_5_11 != 0) {
          int tmp_6_11;
          tmp_6_11 = charAt_aux_4(x2,i1_11);
          if (tmp_6_11 != 4) {
            __retres_11 = 1;
            goto return_label_label_7;
          }
        }
        i1_11 ++;
      }
    }
    tmp_9_11 = indexOf_aux_4(x1,4);
    tmp_10_11 = indexOf_aux_4(x2,4);
    __retres_11 = tmp_9_11 - tmp_10_11;
    return_label_label_7: return_variable_relational_11 = __retres_11;
  }
  {
    int __retres_12;
    int tmp_7_12;
    int tmp_8_12;
    int tmp_9_12;
    int tmp_10_12;
    tmp_7_12 = indexOf_aux_4(x1,4);
    tmp_8_12 = indexOf_aux_4(x3,4);
    if (tmp_7_12 == tmp_8_12) {
      int i1_12 = 0;
      /*@ loop invariant 0 ≤ i1_12 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_12 ⇒
              (x1.hand[k] ≡ 0 ∨ x1.hand[k] ≡ 4) ∧
              (x3.hand[k] ≡ 0 ∨ x3.hand[k] ≡ 4);
          loop assigns i1_12;
      */
      while (i1_12 <= 12) {
        int tmp_12;
        int tmp_3_12;
        int tmp_5_12;
        tmp_12 = charAt_aux_4(x1,i1_12);
        if (tmp_12 != 0) {
          int tmp_0_12;
          tmp_0_12 = charAt_aux_4(x1,i1_12);
          if (tmp_0_12 != 4) {
            int tmp_1_12;
            tmp_1_12 = charAt_aux_4(x3,i1_12);
            if (tmp_1_12 != 0) {
              int tmp_2_12;
              tmp_2_12 = charAt_aux_4(x3,i1_12);
              if (tmp_2_12 != 4) {
                __retres_12 = 0;
                goto return_label_label_8;
              }
            }
          }
        }
        tmp_3_12 = charAt_aux_4(x1,i1_12);
        if (tmp_3_12 != 0) {
          int tmp_4_12;
          tmp_4_12 = charAt_aux_4(x1,i1_12);
          if (tmp_4_12 != 4) {
            __retres_12 = -1;
            goto return_label_label_8;
          }
        }
        tmp_5_12 = charAt_aux_4(x3,i1_12);
        if (tmp_5_12 != 0) {
          int tmp_6_12;
          tmp_6_12 = charAt_aux_4(x3,i1_12);
          if (tmp_6_12 != 4) {
            __retres_12 = 1;
            goto return_label_label_8;
          }
        }
        i1_12 ++;
      }
    }
    tmp_9_12 = indexOf_aux_4(x1,4);
    tmp_10_12 = indexOf_aux_4(x3,4);
    __retres_12 = tmp_9_12 - tmp_10_12;
    return_label_label_8: return_variable_relational_12 = __retres_12;
  }
  {
    int __retres_13;
    int tmp_7_13;
    int tmp_8_13;
    int tmp_9_13;
    int tmp_10_13;
    tmp_7_13 = indexOf_aux_4(x2,4);
    tmp_8_13 = indexOf_aux_4(x3,4);
    if (tmp_7_13 == tmp_8_13) {
      int i1_13 = 0;
      /*@ loop invariant 0 ≤ i1_13 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i1_13 ⇒
              (x2.hand[k] ≡ 0 ∨ x2.hand[k] ≡ 4) ∧
              (x3.hand[k] ≡ 0 ∨ x3.hand[k] ≡ 4);
          loop assigns i1_13;
      */
      while (i1_13 <= 12) {
        int tmp_13;
        int tmp_3_13;
        int tmp_5_13;
        tmp_13 = charAt_aux_4(x2,i1_13);
        if (tmp_13 != 0) {
          int tmp_0_13;
          tmp_0_13 = charAt_aux_4(x2,i1_13);
          if (tmp_0_13 != 4) {
            int tmp_1_13;
            tmp_1_13 = charAt_aux_4(x3,i1_13);
            if (tmp_1_13 != 0) {
              int tmp_2_13;
              tmp_2_13 = charAt_aux_4(x3,i1_13);
              if (tmp_2_13 != 4) {
                __retres_13 = 0;
                goto return_label_label_9;
              }
            }
          }
        }
        tmp_3_13 = charAt_aux_4(x2,i1_13);
        if (tmp_3_13 != 0) {
          int tmp_4_13;
          tmp_4_13 = charAt_aux_4(x2,i1_13);
          if (tmp_4_13 != 4) {
            __retres_13 = -1;
            goto return_label_label_9;
          }
        }
        tmp_5_13 = charAt_aux_4(x3,i1_13);
        if (tmp_5_13 != 0) {
          int tmp_6_13;
          tmp_6_13 = charAt_aux_4(x3,i1_13);
          if (tmp_6_13 != 4) {
            __retres_13 = 1;
            goto return_label_label_9;
          }
        }
        i1_13 ++;
      }
    }
    tmp_9_13 = indexOf_aux_4(x2,4);
    tmp_10_13 = indexOf_aux_4(x3,4);
    __retres_13 = tmp_9_13 - tmp_10_13;
    return_label_label_9: return_variable_relational_13 = __retres_13;
  }
  /*@ check
      Rpp:
        return_variable_relational_11 ≡ 0 ⇒
        return_variable_relational_12 ≡ return_variable_relational_13;
  */
  return;
}

void relational_wrapper_5(struct PokerHand x1, struct PokerHand x2)
{
  int return_variable_relational_14;
  int return_variable_relational_15;
  {
    int __retres_14;
    int tmp_8_14;
    int tmp_9_14;
    int higherTriple_14 = lastIndexOf(x1,3);
    tmp_8_14 = lastIndexOf_aux_5(x2,3);
    ;
    if (higherTriple_14 == tmp_8_14) {
      int i2_14 = 0;
      /*@ loop invariant 0 ≤ i2_14 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_14 ⇒
              k ≡ higherTriple_14 ∨
              (x1.hand[k] ≢ 2 ∧ x1.hand[k] ≢ 3 ∧ x2.hand[k] ≢ 2 ∧
               x2.hand[k] ≢ 3);
          loop assigns i2_14;
      */
      while (i2_14 <= 12) {
        if (i2_14 != higherTriple_14) {
          int tmp_0_14;
          tmp_0_14 = charAt_aux_5(x1,i2_14);
          if (tmp_0_14 == 2) goto _LOR_0_label_10;
          else {
            int tmp_1_14;
            tmp_1_14 = charAt_aux_5(x1,i2_14);
            if (tmp_1_14 == 3) {
              int tmp_2_14;
              _LOR_0_label_10: tmp_2_14 = charAt_aux_5(x2,i2_14);
              if (tmp_2_14 == 2) goto _LOR_label_11;
              else {
                int tmp_3_14;
                tmp_3_14 = charAt_aux_5(x2,i2_14);
                if (tmp_3_14 == 3) {
                  _LOR_label_11:
                  {
                    __retres_14 = 0;
                    goto return_label_label_12;
                  }
                }
              }
            }
          }
        }
        if (i2_14 != higherTriple_14) {
          int tmp_4_14;
          tmp_4_14 = charAt_aux_5(x1,i2_14);
          if (tmp_4_14 == 2) goto _LOR_1_label_13;
          else {
            int tmp_5_14;
            tmp_5_14 = charAt_aux_5(x1,i2_14);
            if (tmp_5_14 == 3) {
              _LOR_1_label_13:
              {
                __retres_14 = -1;
                goto return_label_label_12;
              }
            }
          }
        }
        if (i2_14 != higherTriple_14) {
          int tmp_6_14;
          tmp_6_14 = charAt_aux_5(x2,i2_14);
          if (tmp_6_14 == 2) goto _LOR_2_label_14;
          else {
            int tmp_7_14;
            tmp_7_14 = charAt_aux_5(x2,i2_14);
            if (tmp_7_14 == 3) {
              _LOR_2_label_14:
              {
                __retres_14 = 1;
                goto return_label_label_12;
              }
            }
          }
        }
        i2_14 ++;
      }
    }
    tmp_9_14 = lastIndexOf_aux_5(x2,3);
    ;
    __retres_14 = higherTriple_14 - tmp_9_14;
    return_label_label_12: return_variable_relational_14 = __retres_14;
  }
  {
    int __retres_15;
    int tmp_8_15;
    int tmp_9_15;
    int higherTriple_15 = lastIndexOf(x2,3);
    tmp_8_15 = lastIndexOf_aux_5(x1,3);
    ;
    if (higherTriple_15 == tmp_8_15) {
      int i2_15 = 0;
      /*@ loop invariant 0 ≤ i2_15 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_15 ⇒
              k ≡ higherTriple_15 ∨
              (x2.hand[k] ≢ 2 ∧ x2.hand[k] ≢ 3 ∧ x1.hand[k] ≢ 2 ∧
               x1.hand[k] ≢ 3);
          loop assigns i2_15;
      */
      while (i2_15 <= 12) {
        if (i2_15 != higherTriple_15) {
          int tmp_0_15;
          tmp_0_15 = charAt_aux_5(x2,i2_15);
          if (tmp_0_15 == 2) goto _LOR_0_label_15;
          else {
            int tmp_1_15;
            tmp_1_15 = charAt_aux_5(x2,i2_15);
            if (tmp_1_15 == 3) {
              int tmp_2_15;
              _LOR_0_label_15: tmp_2_15 = charAt_aux_5(x1,i2_15);
              if (tmp_2_15 == 2) goto _LOR_label_16;
              else {
                int tmp_3_15;
                tmp_3_15 = charAt_aux_5(x1,i2_15);
                if (tmp_3_15 == 3) {
                  _LOR_label_16:
                  {
                    __retres_15 = 0;
                    goto return_label_label_17;
                  }
                }
              }
            }
          }
        }
        if (i2_15 != higherTriple_15) {
          int tmp_4_15;
          tmp_4_15 = charAt_aux_5(x2,i2_15);
          if (tmp_4_15 == 2) goto _LOR_1_label_18;
          else {
            int tmp_5_15;
            tmp_5_15 = charAt_aux_5(x2,i2_15);
            if (tmp_5_15 == 3) {
              _LOR_1_label_18:
              {
                __retres_15 = -1;
                goto return_label_label_17;
              }
            }
          }
        }
        if (i2_15 != higherTriple_15) {
          int tmp_6_15;
          tmp_6_15 = charAt_aux_5(x1,i2_15);
          if (tmp_6_15 == 2) goto _LOR_2_label_19;
          else {
            int tmp_7_15;
            tmp_7_15 = charAt_aux_5(x1,i2_15);
            if (tmp_7_15 == 3) {
              _LOR_2_label_19:
              {
                __retres_15 = 1;
                goto return_label_label_17;
              }
            }
          }
        }
        i2_15 ++;
      }
    }
    tmp_9_15 = lastIndexOf_aux_5(x1,3);
    ;
    __retres_15 = higherTriple_15 - tmp_9_15;
    return_label_label_17: return_variable_relational_15 = __retres_15;
  }
  /*@ check
      Rpp: return_variable_relational_14 ≡ -return_variable_relational_15;
  */
  return;
}

void relational_wrapper_6(struct PokerHand x1, struct PokerHand x2,
                          struct PokerHand x3)
{
  int return_variable_relational_16;
  int return_variable_relational_17;
  int return_variable_relational_18;
  {
    int __retres_16;
    int tmp_8_16;
    int tmp_9_16;
    int higherTriple_16 = lastIndexOf(x1,3);
    tmp_8_16 = lastIndexOf_aux_6(x2,3);
    ;
    if (higherTriple_16 == tmp_8_16) {
      int i2_16 = 0;
      /*@ loop invariant 0 ≤ i2_16 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_16 ⇒
              k ≡ higherTriple_16 ∨
              (x1.hand[k] ≢ 2 ∧ x1.hand[k] ≢ 3 ∧ x2.hand[k] ≢ 2 ∧
               x2.hand[k] ≢ 3);
          loop assigns i2_16;
      */
      while (i2_16 <= 12) {
        if (i2_16 != higherTriple_16) {
          int tmp_0_16;
          tmp_0_16 = charAt_aux_6(x1,i2_16);
          if (tmp_0_16 == 2) goto _LOR_0_label_20;
          else {
            int tmp_1_16;
            tmp_1_16 = charAt_aux_6(x1,i2_16);
            if (tmp_1_16 == 3) {
              int tmp_2_16;
              _LOR_0_label_20: tmp_2_16 = charAt_aux_6(x2,i2_16);
              if (tmp_2_16 == 2) goto _LOR_label_21;
              else {
                int tmp_3_16;
                tmp_3_16 = charAt_aux_6(x2,i2_16);
                if (tmp_3_16 == 3) {
                  _LOR_label_21:
                  {
                    __retres_16 = 0;
                    goto return_label_label_22;
                  }
                }
              }
            }
          }
        }
        if (i2_16 != higherTriple_16) {
          int tmp_4_16;
          tmp_4_16 = charAt_aux_6(x1,i2_16);
          if (tmp_4_16 == 2) goto _LOR_1_label_23;
          else {
            int tmp_5_16;
            tmp_5_16 = charAt_aux_6(x1,i2_16);
            if (tmp_5_16 == 3) {
              _LOR_1_label_23:
              {
                __retres_16 = -1;
                goto return_label_label_22;
              }
            }
          }
        }
        if (i2_16 != higherTriple_16) {
          int tmp_6_16;
          tmp_6_16 = charAt_aux_6(x2,i2_16);
          if (tmp_6_16 == 2) goto _LOR_2_label_24;
          else {
            int tmp_7_16;
            tmp_7_16 = charAt_aux_6(x2,i2_16);
            if (tmp_7_16 == 3) {
              _LOR_2_label_24:
              {
                __retres_16 = 1;
                goto return_label_label_22;
              }
            }
          }
        }
        i2_16 ++;
      }
    }
    tmp_9_16 = lastIndexOf_aux_6(x2,3);
    ;
    __retres_16 = higherTriple_16 - tmp_9_16;
    return_label_label_22: return_variable_relational_16 = __retres_16;
  }
  {
    int __retres_17;
    int tmp_8_17;
    int tmp_9_17;
    int higherTriple_17 = lastIndexOf(x2,3);
    tmp_8_17 = lastIndexOf_aux_6(x3,3);
    ;
    if (higherTriple_17 == tmp_8_17) {
      int i2_17 = 0;
      /*@ loop invariant 0 ≤ i2_17 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_17 ⇒
              k ≡ higherTriple_17 ∨
              (x2.hand[k] ≢ 2 ∧ x2.hand[k] ≢ 3 ∧ x3.hand[k] ≢ 2 ∧
               x3.hand[k] ≢ 3);
          loop assigns i2_17;
      */
      while (i2_17 <= 12) {
        if (i2_17 != higherTriple_17) {
          int tmp_0_17;
          tmp_0_17 = charAt_aux_6(x2,i2_17);
          if (tmp_0_17 == 2) goto _LOR_0_label_25;
          else {
            int tmp_1_17;
            tmp_1_17 = charAt_aux_6(x2,i2_17);
            if (tmp_1_17 == 3) {
              int tmp_2_17;
              _LOR_0_label_25: tmp_2_17 = charAt_aux_6(x3,i2_17);
              if (tmp_2_17 == 2) goto _LOR_label_26;
              else {
                int tmp_3_17;
                tmp_3_17 = charAt_aux_6(x3,i2_17);
                if (tmp_3_17 == 3) {
                  _LOR_label_26:
                  {
                    __retres_17 = 0;
                    goto return_label_label_27;
                  }
                }
              }
            }
          }
        }
        if (i2_17 != higherTriple_17) {
          int tmp_4_17;
          tmp_4_17 = charAt_aux_6(x2,i2_17);
          if (tmp_4_17 == 2) goto _LOR_1_label_28;
          else {
            int tmp_5_17;
            tmp_5_17 = charAt_aux_6(x2,i2_17);
            if (tmp_5_17 == 3) {
              _LOR_1_label_28:
              {
                __retres_17 = -1;
                goto return_label_label_27;
              }
            }
          }
        }
        if (i2_17 != higherTriple_17) {
          int tmp_6_17;
          tmp_6_17 = charAt_aux_6(x3,i2_17);
          if (tmp_6_17 == 2) goto _LOR_2_label_29;
          else {
            int tmp_7_17;
            tmp_7_17 = charAt_aux_6(x3,i2_17);
            if (tmp_7_17 == 3) {
              _LOR_2_label_29:
              {
                __retres_17 = 1;
                goto return_label_label_27;
              }
            }
          }
        }
        i2_17 ++;
      }
    }
    tmp_9_17 = lastIndexOf_aux_6(x3,3);
    ;
    __retres_17 = higherTriple_17 - tmp_9_17;
    return_label_label_27: return_variable_relational_17 = __retres_17;
  }
  {
    int __retres_18;
    int tmp_8_18;
    int tmp_9_18;
    int higherTriple_18 = lastIndexOf(x1,3);
    tmp_8_18 = lastIndexOf_aux_6(x3,3);
    ;
    if (higherTriple_18 == tmp_8_18) {
      int i2_18 = 0;
      /*@ loop invariant 0 ≤ i2_18 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_18 ⇒
              k ≡ higherTriple_18 ∨
              (x1.hand[k] ≢ 2 ∧ x1.hand[k] ≢ 3 ∧ x3.hand[k] ≢ 2 ∧
               x3.hand[k] ≢ 3);
          loop assigns i2_18;
      */
      while (i2_18 <= 12) {
        if (i2_18 != higherTriple_18) {
          int tmp_0_18;
          tmp_0_18 = charAt_aux_6(x1,i2_18);
          if (tmp_0_18 == 2) goto _LOR_0_label_30;
          else {
            int tmp_1_18;
            tmp_1_18 = charAt_aux_6(x1,i2_18);
            if (tmp_1_18 == 3) {
              int tmp_2_18;
              _LOR_0_label_30: tmp_2_18 = charAt_aux_6(x3,i2_18);
              if (tmp_2_18 == 2) goto _LOR_label_31;
              else {
                int tmp_3_18;
                tmp_3_18 = charAt_aux_6(x3,i2_18);
                if (tmp_3_18 == 3) {
                  _LOR_label_31:
                  {
                    __retres_18 = 0;
                    goto return_label_label_32;
                  }
                }
              }
            }
          }
        }
        if (i2_18 != higherTriple_18) {
          int tmp_4_18;
          tmp_4_18 = charAt_aux_6(x1,i2_18);
          if (tmp_4_18 == 2) goto _LOR_1_label_33;
          else {
            int tmp_5_18;
            tmp_5_18 = charAt_aux_6(x1,i2_18);
            if (tmp_5_18 == 3) {
              _LOR_1_label_33:
              {
                __retres_18 = -1;
                goto return_label_label_32;
              }
            }
          }
        }
        if (i2_18 != higherTriple_18) {
          int tmp_6_18;
          tmp_6_18 = charAt_aux_6(x3,i2_18);
          if (tmp_6_18 == 2) goto _LOR_2_label_34;
          else {
            int tmp_7_18;
            tmp_7_18 = charAt_aux_6(x3,i2_18);
            if (tmp_7_18 == 3) {
              _LOR_2_label_34:
              {
                __retres_18 = 1;
                goto return_label_label_32;
              }
            }
          }
        }
        i2_18 ++;
      }
    }
    tmp_9_18 = lastIndexOf_aux_6(x3,3);
    ;
    __retres_18 = higherTriple_18 - tmp_9_18;
    return_label_label_32: return_variable_relational_18 = __retres_18;
  }
  /*@ check
      Rpp:
        return_variable_relational_16 > 0 ∧
        return_variable_relational_17 > 0 ⇒
        return_variable_relational_18 > 0;
  */
  return;
}

void relational_wrapper_7(struct PokerHand x1, struct PokerHand x2,
                          struct PokerHand x3)
{
  int return_variable_relational_19;
  int return_variable_relational_20;
  int return_variable_relational_21;
  {
    int __retres_19;
    int tmp_8_19;
    int tmp_9_19;
    int higherTriple_19 = lastIndexOf(x1,3);
    tmp_8_19 = lastIndexOf_aux_7(x2,3);
    ;
    if (higherTriple_19 == tmp_8_19) {
      int i2_19 = 0;
      /*@ loop invariant 0 ≤ i2_19 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_19 ⇒
              k ≡ higherTriple_19 ∨
              (x1.hand[k] ≢ 2 ∧ x1.hand[k] ≢ 3 ∧ x2.hand[k] ≢ 2 ∧
               x2.hand[k] ≢ 3);
          loop assigns i2_19;
      */
      while (i2_19 <= 12) {
        if (i2_19 != higherTriple_19) {
          int tmp_0_19;
          tmp_0_19 = charAt_aux_7(x1,i2_19);
          if (tmp_0_19 == 2) goto _LOR_0_label_35;
          else {
            int tmp_1_19;
            tmp_1_19 = charAt_aux_7(x1,i2_19);
            if (tmp_1_19 == 3) {
              int tmp_2_19;
              _LOR_0_label_35: tmp_2_19 = charAt_aux_7(x2,i2_19);
              if (tmp_2_19 == 2) goto _LOR_label_36;
              else {
                int tmp_3_19;
                tmp_3_19 = charAt_aux_7(x2,i2_19);
                if (tmp_3_19 == 3) {
                  _LOR_label_36:
                  {
                    __retres_19 = 0;
                    goto return_label_label_37;
                  }
                }
              }
            }
          }
        }
        if (i2_19 != higherTriple_19) {
          int tmp_4_19;
          tmp_4_19 = charAt_aux_7(x1,i2_19);
          if (tmp_4_19 == 2) goto _LOR_1_label_38;
          else {
            int tmp_5_19;
            tmp_5_19 = charAt_aux_7(x1,i2_19);
            if (tmp_5_19 == 3) {
              _LOR_1_label_38:
              {
                __retres_19 = -1;
                goto return_label_label_37;
              }
            }
          }
        }
        if (i2_19 != higherTriple_19) {
          int tmp_6_19;
          tmp_6_19 = charAt_aux_7(x2,i2_19);
          if (tmp_6_19 == 2) goto _LOR_2_label_39;
          else {
            int tmp_7_19;
            tmp_7_19 = charAt_aux_7(x2,i2_19);
            if (tmp_7_19 == 3) {
              _LOR_2_label_39:
              {
                __retres_19 = 1;
                goto return_label_label_37;
              }
            }
          }
        }
        i2_19 ++;
      }
    }
    tmp_9_19 = lastIndexOf_aux_7(x2,3);
    ;
    __retres_19 = higherTriple_19 - tmp_9_19;
    return_label_label_37: return_variable_relational_19 = __retres_19;
  }
  {
    int __retres_20;
    int tmp_8_20;
    int tmp_9_20;
    int higherTriple_20 = lastIndexOf(x1,3);
    tmp_8_20 = lastIndexOf_aux_7(x3,3);
    ;
    if (higherTriple_20 == tmp_8_20) {
      int i2_20 = 0;
      /*@ loop invariant 0 ≤ i2_20 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_20 ⇒
              k ≡ higherTriple_20 ∨
              (x1.hand[k] ≢ 2 ∧ x1.hand[k] ≢ 3 ∧ x3.hand[k] ≢ 2 ∧
               x3.hand[k] ≢ 3);
          loop assigns i2_20;
      */
      while (i2_20 <= 12) {
        if (i2_20 != higherTriple_20) {
          int tmp_0_20;
          tmp_0_20 = charAt_aux_7(x1,i2_20);
          if (tmp_0_20 == 2) goto _LOR_0_label_40;
          else {
            int tmp_1_20;
            tmp_1_20 = charAt_aux_7(x1,i2_20);
            if (tmp_1_20 == 3) {
              int tmp_2_20;
              _LOR_0_label_40: tmp_2_20 = charAt_aux_7(x3,i2_20);
              if (tmp_2_20 == 2) goto _LOR_label_41;
              else {
                int tmp_3_20;
                tmp_3_20 = charAt_aux_7(x3,i2_20);
                if (tmp_3_20 == 3) {
                  _LOR_label_41:
                  {
                    __retres_20 = 0;
                    goto return_label_label_42;
                  }
                }
              }
            }
          }
        }
        if (i2_20 != higherTriple_20) {
          int tmp_4_20;
          tmp_4_20 = charAt_aux_7(x1,i2_20);
          if (tmp_4_20 == 2) goto _LOR_1_label_43;
          else {
            int tmp_5_20;
            tmp_5_20 = charAt_aux_7(x1,i2_20);
            if (tmp_5_20 == 3) {
              _LOR_1_label_43:
              {
                __retres_20 = -1;
                goto return_label_label_42;
              }
            }
          }
        }
        if (i2_20 != higherTriple_20) {
          int tmp_6_20;
          tmp_6_20 = charAt_aux_7(x3,i2_20);
          if (tmp_6_20 == 2) goto _LOR_2_label_44;
          else {
            int tmp_7_20;
            tmp_7_20 = charAt_aux_7(x3,i2_20);
            if (tmp_7_20 == 3) {
              _LOR_2_label_44:
              {
                __retres_20 = 1;
                goto return_label_label_42;
              }
            }
          }
        }
        i2_20 ++;
      }
    }
    tmp_9_20 = lastIndexOf_aux_7(x3,3);
    ;
    __retres_20 = higherTriple_20 - tmp_9_20;
    return_label_label_42: return_variable_relational_20 = __retres_20;
  }
  {
    int __retres_21;
    int tmp_8_21;
    int tmp_9_21;
    int higherTriple_21 = lastIndexOf(x2,3);
    tmp_8_21 = lastIndexOf_aux_7(x3,3);
    ;
    if (higherTriple_21 == tmp_8_21) {
      int i2_21 = 0;
      /*@ loop invariant 0 ≤ i2_21 ≤ 13;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i2_21 ⇒
              k ≡ higherTriple_21 ∨
              (x2.hand[k] ≢ 2 ∧ x2.hand[k] ≢ 3 ∧ x3.hand[k] ≢ 2 ∧
               x3.hand[k] ≢ 3);
          loop assigns i2_21;
      */
      while (i2_21 <= 12) {
        if (i2_21 != higherTriple_21) {
          int tmp_0_21;
          tmp_0_21 = charAt_aux_7(x2,i2_21);
          if (tmp_0_21 == 2) goto _LOR_0_label_45;
          else {
            int tmp_1_21;
            tmp_1_21 = charAt_aux_7(x2,i2_21);
            if (tmp_1_21 == 3) {
              int tmp_2_21;
              _LOR_0_label_45: tmp_2_21 = charAt_aux_7(x3,i2_21);
              if (tmp_2_21 == 2) goto _LOR_label_46;
              else {
                int tmp_3_21;
                tmp_3_21 = charAt_aux_7(x3,i2_21);
                if (tmp_3_21 == 3) {
                  _LOR_label_46:
                  {
                    __retres_21 = 0;
                    goto return_label_label_47;
                  }
                }
              }
            }
          }
        }
        if (i2_21 != higherTriple_21) {
          int tmp_4_21;
          tmp_4_21 = charAt_aux_7(x2,i2_21);
          if (tmp_4_21 == 2) goto _LOR_1_label_48;
          else {
            int tmp_5_21;
            tmp_5_21 = charAt_aux_7(x2,i2_21);
            if (tmp_5_21 == 3) {
              _LOR_1_label_48:
              {
                __retres_21 = -1;
                goto return_label_label_47;
              }
            }
          }
        }
        if (i2_21 != higherTriple_21) {
          int tmp_6_21;
          tmp_6_21 = charAt_aux_7(x3,i2_21);
          if (tmp_6_21 == 2) goto _LOR_2_label_49;
          else {
            int tmp_7_21;
            tmp_7_21 = charAt_aux_7(x3,i2_21);
            if (tmp_7_21 == 3) {
              _LOR_2_label_49:
              {
                __retres_21 = 1;
                goto return_label_label_47;
              }
            }
          }
        }
        i2_21 ++;
      }
    }
    tmp_9_21 = lastIndexOf_aux_7(x3,3);
    ;
    __retres_21 = higherTriple_21 - tmp_9_21;
    return_label_label_47: return_variable_relational_21 = __retres_21;
  }
  /*@ check
      Rpp:
        return_variable_relational_19 ≡ 0 ⇒
        return_variable_relational_20 ≡ return_variable_relational_21;
  */
  return;
}

void relational_wrapper_8(struct PokerHand x1, struct PokerHand x2)
{
  int return_variable_relational_22;
  int return_variable_relational_23;
  {
    int __retres_22;
    int tmp_0_22;
    tmp_0_22 = indexOf_aux_8(x1,4);
    if (tmp_0_22 != -1) goto _LOR_label_50;
    else {
      int tmp_1_22;
      tmp_1_22 = indexOf_aux_8(x2,4);
      if (tmp_1_22 != -1) {
        _LOR_label_50:
        {
          int tmp_22;
          tmp_22 = compare1_aux_8(x1,x2);
          __retres_22 = tmp_22;
          goto return_label_label_51;
        }
      }
    }
    int tripleCount1_22 = countOccurrencesOf(x1,3);
    int tripleCount2_22 = countOccurrencesOf(x2,3);
    if (tripleCount1_22 > 1) goto _LOR_0_label_52;
    else 
      if (tripleCount1_22 == 1) {
        int tmp_5_22;
        tmp_5_22 = indexOf_aux_8(x1,2);
        if (tmp_5_22 != -1) goto _LOR_0_label_52; else goto _LAND_label_53;
      }
      else {
        _LAND_label_53: ;
        if (tripleCount2_22 > 1) goto _LOR_0_label_52;
        else 
          if (tripleCount2_22 == 1) {
            int tmp_6_22;
            tmp_6_22 = indexOf_aux_8(x2,2);
            if (tmp_6_22 != -1) {
              _LOR_0_label_52:
              {
                int tmp_4_22;
                tmp_4_22 = compare2_aux_8(x1,x2);
                __retres_22 = tmp_4_22;
                goto return_label_label_51;
              }
            }
          }
      }
    __retres_22 = 0;
    return_label_label_51: return_variable_relational_22 = __retres_22;
  }
  {
    int __retres_23;
    int tmp_0_23;
    tmp_0_23 = indexOf_aux_8(x2,4);
    if (tmp_0_23 != -1) goto _LOR_label_54;
    else {
      int tmp_1_23;
      tmp_1_23 = indexOf_aux_8(x1,4);
      if (tmp_1_23 != -1) {
        _LOR_label_54:
        {
          int tmp_23;
          tmp_23 = compare1_aux_8(x2,x1);
          __retres_23 = tmp_23;
          goto return_label_label_55;
        }
      }
    }
    int tripleCount1_23 = countOccurrencesOf(x2,3);
    int tripleCount2_23 = countOccurrencesOf(x1,3);
    if (tripleCount1_23 > 1) goto _LOR_0_label_56;
    else 
      if (tripleCount1_23 == 1) {
        int tmp_5_23;
        tmp_5_23 = indexOf_aux_8(x2,2);
        if (tmp_5_23 != -1) goto _LOR_0_label_56; else goto _LAND_label_57;
      }
      else {
        _LAND_label_57: ;
        if (tripleCount2_23 > 1) goto _LOR_0_label_56;
        else 
          if (tripleCount2_23 == 1) {
            int tmp_6_23;
            tmp_6_23 = indexOf_aux_8(x1,2);
            if (tmp_6_23 != -1) {
              _LOR_0_label_56:
              {
                int tmp_4_23;
                tmp_4_23 = compare2_aux_8(x2,x1);
                __retres_23 = tmp_4_23;
                goto return_label_label_55;
              }
            }
          }
      }
    __retres_23 = 0;
    return_label_label_55: return_variable_relational_23 = __retres_23;
  }
  /*@ check
      Rpp: return_variable_relational_22 ≡ -return_variable_relational_23;
  */
  return;
}

void relational_wrapper_9(struct PokerHand x1, struct PokerHand x2,
                          struct PokerHand x3)
{
  int return_variable_relational_24;
  int return_variable_relational_25;
  int return_variable_relational_26;
  {
    int __retres_24;
    int tmp_0_24;
    tmp_0_24 = indexOf_aux_9(x1,4);
    if (tmp_0_24 != -1) goto _LOR_label_58;
    else {
      int tmp_1_24;
      tmp_1_24 = indexOf_aux_9(x2,4);
      if (tmp_1_24 != -1) {
        _LOR_label_58:
        {
          int tmp_24;
          tmp_24 = compare1_aux_9(x1,x2);
          __retres_24 = tmp_24;
          goto return_label_label_59;
        }
      }
    }
    int tripleCount1_24 = countOccurrencesOf(x1,3);
    int tripleCount2_24 = countOccurrencesOf(x2,3);
    if (tripleCount1_24 > 1) goto _LOR_0_label_60;
    else 
      if (tripleCount1_24 == 1) {
        int tmp_5_24;
        tmp_5_24 = indexOf_aux_9(x1,2);
        if (tmp_5_24 != -1) goto _LOR_0_label_60; else goto _LAND_label_61;
      }
      else {
        _LAND_label_61: ;
        if (tripleCount2_24 > 1) goto _LOR_0_label_60;
        else 
          if (tripleCount2_24 == 1) {
            int tmp_6_24;
            tmp_6_24 = indexOf_aux_9(x2,2);
            if (tmp_6_24 != -1) {
              _LOR_0_label_60:
              {
                int tmp_4_24;
                tmp_4_24 = compare2_aux_9(x1,x2);
                __retres_24 = tmp_4_24;
                goto return_label_label_59;
              }
            }
          }
      }
    __retres_24 = 0;
    return_label_label_59: return_variable_relational_24 = __retres_24;
  }
  {
    int __retres_25;
    int tmp_0_25;
    tmp_0_25 = indexOf_aux_9(x2,4);
    if (tmp_0_25 != -1) goto _LOR_label_62;
    else {
      int tmp_1_25;
      tmp_1_25 = indexOf_aux_9(x3,4);
      if (tmp_1_25 != -1) {
        _LOR_label_62:
        {
          int tmp_25;
          tmp_25 = compare1_aux_9(x2,x3);
          __retres_25 = tmp_25;
          goto return_label_label_63;
        }
      }
    }
    int tripleCount1_25 = countOccurrencesOf(x2,3);
    int tripleCount2_25 = countOccurrencesOf(x3,3);
    if (tripleCount1_25 > 1) goto _LOR_0_label_64;
    else 
      if (tripleCount1_25 == 1) {
        int tmp_5_25;
        tmp_5_25 = indexOf_aux_9(x2,2);
        if (tmp_5_25 != -1) goto _LOR_0_label_64; else goto _LAND_label_65;
      }
      else {
        _LAND_label_65: ;
        if (tripleCount2_25 > 1) goto _LOR_0_label_64;
        else 
          if (tripleCount2_25 == 1) {
            int tmp_6_25;
            tmp_6_25 = indexOf_aux_9(x3,2);
            if (tmp_6_25 != -1) {
              _LOR_0_label_64:
              {
                int tmp_4_25;
                tmp_4_25 = compare2_aux_9(x2,x3);
                __retres_25 = tmp_4_25;
                goto return_label_label_63;
              }
            }
          }
      }
    __retres_25 = 0;
    return_label_label_63: return_variable_relational_25 = __retres_25;
  }
  {
    int __retres_26;
    int tmp_0_26;
    tmp_0_26 = indexOf_aux_9(x1,4);
    if (tmp_0_26 != -1) goto _LOR_label_66;
    else {
      int tmp_1_26;
      tmp_1_26 = indexOf_aux_9(x3,4);
      if (tmp_1_26 != -1) {
        _LOR_label_66:
        {
          int tmp_26;
          tmp_26 = compare1_aux_9(x1,x3);
          __retres_26 = tmp_26;
          goto return_label_label_67;
        }
      }
    }
    int tripleCount1_26 = countOccurrencesOf(x1,3);
    int tripleCount2_26 = countOccurrencesOf(x3,3);
    if (tripleCount1_26 > 1) goto _LOR_0_label_68;
    else 
      if (tripleCount1_26 == 1) {
        int tmp_5_26;
        tmp_5_26 = indexOf_aux_9(x1,2);
        if (tmp_5_26 != -1) goto _LOR_0_label_68; else goto _LAND_label_69;
      }
      else {
        _LAND_label_69: ;
        if (tripleCount2_26 > 1) goto _LOR_0_label_68;
        else 
          if (tripleCount2_26 == 1) {
            int tmp_6_26;
            tmp_6_26 = indexOf_aux_9(x3,2);
            if (tmp_6_26 != -1) {
              _LOR_0_label_68:
              {
                int tmp_4_26;
                tmp_4_26 = compare2_aux_9(x1,x3);
                __retres_26 = tmp_4_26;
                goto return_label_label_67;
              }
            }
          }
      }
    __retres_26 = 0;
    return_label_label_67: return_variable_relational_26 = __retres_26;
  }
  /*@ check
      Rpp:
        return_variable_relational_24 > 0 ∧
        return_variable_relational_25 > 0 ⇒
        return_variable_relational_26 > 0;
  */
  return;
}

void relational_wrapper_10(struct PokerHand x1, struct PokerHand x2,
                           struct PokerHand x3)
{
  int return_variable_relational_27;
  int return_variable_relational_28;
  int return_variable_relational_29;
  {
    int __retres_27;
    int tmp_0_27;
    tmp_0_27 = indexOf_aux_10(x1,4);
    if (tmp_0_27 != -1) goto _LOR_label_70;
    else {
      int tmp_1_27;
      tmp_1_27 = indexOf_aux_10(x2,4);
      if (tmp_1_27 != -1) {
        _LOR_label_70:
        {
          int tmp_27;
          tmp_27 = compare1_aux_10(x1,x2);
          __retres_27 = tmp_27;
          goto return_label_label_71;
        }
      }
    }
    int tripleCount1_27 = countOccurrencesOf(x1,3);
    int tripleCount2_27 = countOccurrencesOf(x2,3);
    if (tripleCount1_27 > 1) goto _LOR_0_label_72;
    else 
      if (tripleCount1_27 == 1) {
        int tmp_5_27;
        tmp_5_27 = indexOf_aux_10(x1,2);
        if (tmp_5_27 != -1) goto _LOR_0_label_72; else goto _LAND_label_73;
      }
      else {
        _LAND_label_73: ;
        if (tripleCount2_27 > 1) goto _LOR_0_label_72;
        else 
          if (tripleCount2_27 == 1) {
            int tmp_6_27;
            tmp_6_27 = indexOf_aux_10(x2,2);
            if (tmp_6_27 != -1) {
              _LOR_0_label_72:
              {
                int tmp_4_27;
                tmp_4_27 = compare2_aux_10(x1,x2);
                __retres_27 = tmp_4_27;
                goto return_label_label_71;
              }
            }
          }
      }
    __retres_27 = 0;
    return_label_label_71: return_variable_relational_27 = __retres_27;
  }
  {
    int __retres_28;
    int tmp_0_28;
    tmp_0_28 = indexOf_aux_10(x1,4);
    if (tmp_0_28 != -1) goto _LOR_label_74;
    else {
      int tmp_1_28;
      tmp_1_28 = indexOf_aux_10(x3,4);
      if (tmp_1_28 != -1) {
        _LOR_label_74:
        {
          int tmp_28;
          tmp_28 = compare1_aux_10(x1,x3);
          __retres_28 = tmp_28;
          goto return_label_label_75;
        }
      }
    }
    int tripleCount1_28 = countOccurrencesOf(x1,3);
    int tripleCount2_28 = countOccurrencesOf(x3,3);
    if (tripleCount1_28 > 1) goto _LOR_0_label_76;
    else 
      if (tripleCount1_28 == 1) {
        int tmp_5_28;
        tmp_5_28 = indexOf_aux_10(x1,2);
        if (tmp_5_28 != -1) goto _LOR_0_label_76; else goto _LAND_label_77;
      }
      else {
        _LAND_label_77: ;
        if (tripleCount2_28 > 1) goto _LOR_0_label_76;
        else 
          if (tripleCount2_28 == 1) {
            int tmp_6_28;
            tmp_6_28 = indexOf_aux_10(x3,2);
            if (tmp_6_28 != -1) {
              _LOR_0_label_76:
              {
                int tmp_4_28;
                tmp_4_28 = compare2_aux_10(x1,x3);
                __retres_28 = tmp_4_28;
                goto return_label_label_75;
              }
            }
          }
      }
    __retres_28 = 0;
    return_label_label_75: return_variable_relational_28 = __retres_28;
  }
  {
    int __retres_29;
    int tmp_0_29;
    tmp_0_29 = indexOf_aux_10(x2,4);
    if (tmp_0_29 != -1) goto _LOR_label_78;
    else {
      int tmp_1_29;
      tmp_1_29 = indexOf_aux_10(x3,4);
      if (tmp_1_29 != -1) {
        _LOR_label_78:
        {
          int tmp_29;
          tmp_29 = compare1_aux_10(x2,x3);
          __retres_29 = tmp_29;
          goto return_label_label_79;
        }
      }
    }
    int tripleCount1_29 = countOccurrencesOf(x2,3);
    int tripleCount2_29 = countOccurrencesOf(x3,3);
    if (tripleCount1_29 > 1) goto _LOR_0_label_80;
    else 
      if (tripleCount1_29 == 1) {
        int tmp_5_29;
        tmp_5_29 = indexOf_aux_10(x2,2);
        if (tmp_5_29 != -1) goto _LOR_0_label_80; else goto _LAND_label_81;
      }
      else {
        _LAND_label_81: ;
        if (tripleCount2_29 > 1) goto _LOR_0_label_80;
        else 
          if (tripleCount2_29 == 1) {
            int tmp_6_29;
            tmp_6_29 = indexOf_aux_10(x3,2);
            if (tmp_6_29 != -1) {
              _LOR_0_label_80:
              {
                int tmp_4_29;
                tmp_4_29 = compare2_aux_10(x2,x3);
                __retres_29 = tmp_4_29;
                goto return_label_label_79;
              }
            }
          }
      }
    __retres_29 = 0;
    return_label_label_79: return_variable_relational_29 = __retres_29;
  }
  /*@ check
      Rpp:
        return_variable_relational_27 ≡ 0 ⇒
        return_variable_relational_28 ≡ return_variable_relational_29;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
