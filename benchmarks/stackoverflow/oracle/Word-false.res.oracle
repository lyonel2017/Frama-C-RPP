[kernel] Parsing benchmarks/stackoverflow/Word-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Word {
   int count ;
   int i[1000] ;
   int length ;
};
/*@
type invariant NzbFile_is_bool(struct Word s) =
  s.length ≥ 0 ∧ s.length < 1000;
 */
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y);

/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Word x1, struct Word x2, struct Word x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Word x1, struct Word x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Word x1, struct Word x2, struct Word x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ requires 0 ≤ o1.length < 1000;
    requires 0 ≤ o2.length < 1000;
    assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Word o1, struct Word o2)
{
  int __retres;
  int left = o1.count;
  int right = o2.count;
  if (left == right) 
    if (o1.length > o2.length) {
      int i1 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1 ⇒ o1.i[k] ≥ o2.i[k];
          loop invariant 0 ≤ i1 ≤ o1.length;
          loop assigns i1;
      */
      while (i1 < o1.length) {
        int tmp;
        tmp = IntCompare(o1.i[i1],o2.i[i1]);
        if (tmp < 0) {
          __retres = 1;
          goto return_label;
        }
        i1 ++;
      }
      __retres = -1;
      goto return_label;
    }
    else {
      int i2 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2 ⇒ o1.i[k] ≥ o2.i[k];
          loop invariant 0 ≤ i2 ≤ o2.length;
          loop assigns i2;
      */
      while (i2 < o2.length) {
        int tmp_0;
        tmp_0 = IntCompare(o1.i[i2],o2.i[i2]);
        if (tmp_0 < 0) {
          __retres = -1;
          goto return_label;
        }
        i2 ++;
      }
      __retres = 1;
      goto return_label;
    }
  else {
    int tmp_1;
    if (left > right) tmp_1 = 1; else tmp_1 = -1;
    __retres = tmp_1;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);

/*@ requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_1(struct Word x1, struct Word x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_1 = x1.count;
    int right_1 = x2.count;
    if (left_1 == right_1) 
      if (x1.length > x2.length) {
        int i1_1 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_1 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i1_1 ≤ x1.length;
            loop assigns i1_1;
        */
        while (i1_1 < x1.length) {
          int tmp_1;
          tmp_1 = IntCompare_aux_1(x1.i[i1_1],x2.i[i1_1]);
          if (tmp_1 < 0) {
            __retres_1 = 1;
            goto return_label_label_1;
          }
          i1_1 ++;
        }
        __retres_1 = -1;
        goto return_label_label_1;
      }
      else {
        int i2_1 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_1 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i2_1 ≤ x2.length;
            loop assigns i2_1;
        */
        while (i2_1 < x2.length) {
          int tmp_0_1;
          tmp_0_1 = IntCompare_aux_1(x1.i[i2_1],x2.i[i2_1]);
          if (tmp_0_1 < 0) {
            __retres_1 = -1;
            goto return_label_label_1;
          }
          i2_1 ++;
        }
        __retres_1 = 1;
        goto return_label_label_1;
      }
    else {
      int tmp_1_1;
      if (left_1 > right_1) tmp_1_1 = 1; else tmp_1_1 = -1;
      __retres_1 = tmp_1_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    int left_2 = x2.count;
    int right_2 = x1.count;
    if (left_2 == right_2) 
      if (x2.length > x1.length) {
        int i1_2 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_2 ⇒ x2.i[k] ≥ x1.i[k];
            loop invariant 0 ≤ i1_2 ≤ x2.length;
            loop assigns i1_2;
        */
        while (i1_2 < x2.length) {
          int tmp_2;
          tmp_2 = IntCompare_aux_1(x2.i[i1_2],x1.i[i1_2]);
          if (tmp_2 < 0) {
            __retres_2 = 1;
            goto return_label_label_2;
          }
          i1_2 ++;
        }
        __retres_2 = -1;
        goto return_label_label_2;
      }
      else {
        int i2_2 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_2 ⇒ x2.i[k] ≥ x1.i[k];
            loop invariant 0 ≤ i2_2 ≤ x1.length;
            loop assigns i2_2;
        */
        while (i2_2 < x1.length) {
          int tmp_0_2;
          tmp_0_2 = IntCompare_aux_1(x2.i[i2_2],x1.i[i2_2]);
          if (tmp_0_2 < 0) {
            __retres_2 = -1;
            goto return_label_label_2;
          }
          i2_2 ++;
        }
        __retres_2 = 1;
        goto return_label_label_2;
      }
    else {
      int tmp_1_2;
      if (left_2 > right_2) tmp_1_2 = 1; else tmp_1_2 = -1;
      __retres_2 = tmp_1_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

/*@ requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_2(struct Word x1, struct Word x2, struct Word x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_3 = x1.count;
    int right_3 = x2.count;
    if (left_3 == right_3) 
      if (x1.length > x2.length) {
        int i1_3 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_3 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i1_3 ≤ x1.length;
            loop assigns i1_3;
        */
        while (i1_3 < x1.length) {
          int tmp_3;
          tmp_3 = IntCompare_aux_2(x1.i[i1_3],x2.i[i1_3]);
          if (tmp_3 < 0) {
            __retres_3 = 1;
            goto return_label_label_3;
          }
          i1_3 ++;
        }
        __retres_3 = -1;
        goto return_label_label_3;
      }
      else {
        int i2_3 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_3 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i2_3 ≤ x2.length;
            loop assigns i2_3;
        */
        while (i2_3 < x2.length) {
          int tmp_0_3;
          tmp_0_3 = IntCompare_aux_2(x1.i[i2_3],x2.i[i2_3]);
          if (tmp_0_3 < 0) {
            __retres_3 = -1;
            goto return_label_label_3;
          }
          i2_3 ++;
        }
        __retres_3 = 1;
        goto return_label_label_3;
      }
    else {
      int tmp_1_3;
      if (left_3 > right_3) tmp_1_3 = 1; else tmp_1_3 = -1;
      __retres_3 = tmp_1_3;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_4 = x2.count;
    int right_4 = x3.count;
    if (left_4 == right_4) 
      if (x2.length > x3.length) {
        int i1_4 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_4 ⇒ x2.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i1_4 ≤ x2.length;
            loop assigns i1_4;
        */
        while (i1_4 < x2.length) {
          int tmp_4;
          tmp_4 = IntCompare_aux_2(x2.i[i1_4],x3.i[i1_4]);
          if (tmp_4 < 0) {
            __retres_4 = 1;
            goto return_label_label_4;
          }
          i1_4 ++;
        }
        __retres_4 = -1;
        goto return_label_label_4;
      }
      else {
        int i2_4 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_4 ⇒ x2.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i2_4 ≤ x3.length;
            loop assigns i2_4;
        */
        while (i2_4 < x3.length) {
          int tmp_0_4;
          tmp_0_4 = IntCompare_aux_2(x2.i[i2_4],x3.i[i2_4]);
          if (tmp_0_4 < 0) {
            __retres_4 = -1;
            goto return_label_label_4;
          }
          i2_4 ++;
        }
        __retres_4 = 1;
        goto return_label_label_4;
      }
    else {
      int tmp_1_4;
      if (left_4 > right_4) tmp_1_4 = 1; else tmp_1_4 = -1;
      __retres_4 = tmp_1_4;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_5 = x1.count;
    int right_5 = x3.count;
    if (left_5 == right_5) 
      if (x1.length > x3.length) {
        int i1_5 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_5 ⇒ x1.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i1_5 ≤ x1.length;
            loop assigns i1_5;
        */
        while (i1_5 < x1.length) {
          int tmp_5;
          tmp_5 = IntCompare_aux_2(x1.i[i1_5],x3.i[i1_5]);
          if (tmp_5 < 0) {
            __retres_5 = 1;
            goto return_label_label_5;
          }
          i1_5 ++;
        }
        __retres_5 = -1;
        goto return_label_label_5;
      }
      else {
        int i2_5 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_5 ⇒ x1.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i2_5 ≤ x3.length;
            loop assigns i2_5;
        */
        while (i2_5 < x3.length) {
          int tmp_0_5;
          tmp_0_5 = IntCompare_aux_2(x1.i[i2_5],x3.i[i2_5]);
          if (tmp_0_5 < 0) {
            __retres_5 = -1;
            goto return_label_label_5;
          }
          i2_5 ++;
        }
        __retres_5 = 1;
        goto return_label_label_5;
      }
    else {
      int tmp_1_5;
      if (left_5 > right_5) tmp_1_5 = 1; else tmp_1_5 = -1;
      __retres_5 = tmp_1_5;
      goto return_label_label_5;
    }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

/*@ requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_3(struct Word x1, struct Word x2, struct Word x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_6 = x1.count;
    int right_6 = x2.count;
    if (left_6 == right_6) 
      if (x1.length > x2.length) {
        int i1_6 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_6 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i1_6 ≤ x1.length;
            loop assigns i1_6;
        */
        while (i1_6 < x1.length) {
          int tmp_6;
          tmp_6 = IntCompare_aux_3(x1.i[i1_6],x2.i[i1_6]);
          if (tmp_6 < 0) {
            __retres_6 = 1;
            goto return_label_label_6;
          }
          i1_6 ++;
        }
        __retres_6 = -1;
        goto return_label_label_6;
      }
      else {
        int i2_6 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_6 ⇒ x1.i[k] ≥ x2.i[k];
            loop invariant 0 ≤ i2_6 ≤ x2.length;
            loop assigns i2_6;
        */
        while (i2_6 < x2.length) {
          int tmp_0_6;
          tmp_0_6 = IntCompare_aux_3(x1.i[i2_6],x2.i[i2_6]);
          if (tmp_0_6 < 0) {
            __retres_6 = -1;
            goto return_label_label_6;
          }
          i2_6 ++;
        }
        __retres_6 = 1;
        goto return_label_label_6;
      }
    else {
      int tmp_1_6;
      if (left_6 > right_6) tmp_1_6 = 1; else tmp_1_6 = -1;
      __retres_6 = tmp_1_6;
      goto return_label_label_6;
    }
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_7 = x1.count;
    int right_7 = x3.count;
    if (left_7 == right_7) 
      if (x1.length > x3.length) {
        int i1_7 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_7 ⇒ x1.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i1_7 ≤ x1.length;
            loop assigns i1_7;
        */
        while (i1_7 < x1.length) {
          int tmp_7;
          tmp_7 = IntCompare_aux_3(x1.i[i1_7],x3.i[i1_7]);
          if (tmp_7 < 0) {
            __retres_7 = 1;
            goto return_label_label_7;
          }
          i1_7 ++;
        }
        __retres_7 = -1;
        goto return_label_label_7;
      }
      else {
        int i2_7 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_7 ⇒ x1.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i2_7 ≤ x3.length;
            loop assigns i2_7;
        */
        while (i2_7 < x3.length) {
          int tmp_0_7;
          tmp_0_7 = IntCompare_aux_3(x1.i[i2_7],x3.i[i2_7]);
          if (tmp_0_7 < 0) {
            __retres_7 = -1;
            goto return_label_label_7;
          }
          i2_7 ++;
        }
        __retres_7 = 1;
        goto return_label_label_7;
      }
    else {
      int tmp_1_7;
      if (left_7 > right_7) tmp_1_7 = 1; else tmp_1_7 = -1;
      __retres_7 = tmp_1_7;
      goto return_label_label_7;
    }
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_8 = x2.count;
    int right_8 = x3.count;
    if (left_8 == right_8) 
      if (x2.length > x3.length) {
        int i1_8 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i1_8 ⇒ x2.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i1_8 ≤ x2.length;
            loop assigns i1_8;
        */
        while (i1_8 < x2.length) {
          int tmp_8;
          tmp_8 = IntCompare_aux_3(x2.i[i1_8],x3.i[i1_8]);
          if (tmp_8 < 0) {
            __retres_8 = 1;
            goto return_label_label_8;
          }
          i1_8 ++;
        }
        __retres_8 = -1;
        goto return_label_label_8;
      }
      else {
        int i2_8 = 0;
        /*@ loop invariant ∀ ℤ k; 0 ≤ k < i2_8 ⇒ x2.i[k] ≥ x3.i[k];
            loop invariant 0 ≤ i2_8 ≤ x3.length;
            loop assigns i2_8;
        */
        while (i2_8 < x3.length) {
          int tmp_0_8;
          tmp_0_8 = IntCompare_aux_3(x2.i[i2_8],x3.i[i2_8]);
          if (tmp_0_8 < 0) {
            __retres_8 = -1;
            goto return_label_label_8;
          }
          i2_8 ++;
        }
        __retres_8 = 1;
        goto return_label_label_8;
      }
    else {
      int tmp_1_8;
      if (left_8 > right_8) tmp_1_8 = 1; else tmp_1_8 = -1;
      __retres_8 = tmp_1_8;
      goto return_label_label_8;
    }
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
