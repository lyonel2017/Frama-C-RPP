[kernel] Parsing benchmarks/stackoverflow/Word-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Word {
   int count ;
   int i[1000] ;
   int length ;
};
/*@
type invariant NzbFile_is_bool(struct Word s) =
  s.length ≥ 0 ∧ s.length < 1000;
 */
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y);

/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Word x1, struct Word x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Word x1, struct Word x2, struct Word x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Word o1, struct Word o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Word x1, struct Word x2, struct Word x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ requires 0 ≤ o1.length < 1000;
    requires 0 ≤ o2.length < 1000;
    assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Word o1, struct Word o2)
{
  int __retres;
  int left = o1.count;
  int right = o2.count;
  if (left == right) {
    int i = 0;
    /*@ loop invariant ∀ ℤ k; 0 ≤ k < i ⇒ o1.i[k] ≡ o2.i[k];
        loop invariant 0 ≤ i ≤ o1.length ∧ i ≤ o2.length;
        loop assigns i;
    */
    while (1) {
      if (i < o1.length) {
        if (! (i < o2.length)) break;
      }
      else break;
      if (o1.i[i] - o2.i[i] < 0) {
        __retres = -1;
        goto return_label;
      }
      if (o1.i[i] - o2.i[i] > 0) {
        __retres = 1;
        goto return_label;
      }
      i ++;
    }
    __retres = o1.length - o2.length;
    goto return_label;
  }
  else {
    int tmp;
    if (left > right) tmp = 1; else tmp = -1;
    __retres = tmp;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_1(struct Word x1, struct Word x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_1 = x1.count;
    int right_1 = x2.count;
    if (left_1 == right_1) {
      int i_1 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_1 ⇒ x1.i[k] ≡ x2.i[k];
          loop invariant 0 ≤ i_1 ≤ x1.length ∧ i_1 ≤ x2.length;
          loop assigns i_1;
      */
      while (1) {
        if (i_1 < x1.length) {
          if (! (i_1 < x2.length)) break;
        }
        else break;
        if (x1.i[i_1] - x2.i[i_1] < 0) {
          __retres_1 = -1;
          goto return_label_label_1;
        }
        if (x1.i[i_1] - x2.i[i_1] > 0) {
          __retres_1 = 1;
          goto return_label_label_1;
        }
        i_1 ++;
      }
      __retres_1 = x1.length - x2.length;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      if (left_1 > right_1) tmp_1 = 1; else tmp_1 = -1;
      __retres_1 = tmp_1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    int left_2 = x2.count;
    int right_2 = x1.count;
    if (left_2 == right_2) {
      int i_2 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_2 ⇒ x2.i[k] ≡ x1.i[k];
          loop invariant 0 ≤ i_2 ≤ x2.length ∧ i_2 ≤ x1.length;
          loop assigns i_2;
      */
      while (1) {
        if (i_2 < x2.length) {
          if (! (i_2 < x1.length)) break;
        }
        else break;
        if (x2.i[i_2] - x1.i[i_2] < 0) {
          __retres_2 = -1;
          goto return_label_label_2;
        }
        if (x2.i[i_2] - x1.i[i_2] > 0) {
          __retres_2 = 1;
          goto return_label_label_2;
        }
        i_2 ++;
      }
      __retres_2 = x2.length - x1.length;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      if (left_2 > right_2) tmp_2 = 1; else tmp_2 = -1;
      __retres_2 = tmp_2;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

/*@ requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_2(struct Word x1, struct Word x2, struct Word x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_3 = x1.count;
    int right_3 = x2.count;
    if (left_3 == right_3) {
      int i_3 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_3 ⇒ x1.i[k] ≡ x2.i[k];
          loop invariant 0 ≤ i_3 ≤ x1.length ∧ i_3 ≤ x2.length;
          loop assigns i_3;
      */
      while (1) {
        if (i_3 < x1.length) {
          if (! (i_3 < x2.length)) break;
        }
        else break;
        if (x1.i[i_3] - x2.i[i_3] < 0) {
          __retres_3 = -1;
          goto return_label_label_3;
        }
        if (x1.i[i_3] - x2.i[i_3] > 0) {
          __retres_3 = 1;
          goto return_label_label_3;
        }
        i_3 ++;
      }
      __retres_3 = x1.length - x2.length;
      goto return_label_label_3;
    }
    else {
      int tmp_3;
      if (left_3 > right_3) tmp_3 = 1; else tmp_3 = -1;
      __retres_3 = tmp_3;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_4 = x2.count;
    int right_4 = x3.count;
    if (left_4 == right_4) {
      int i_4 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_4 ⇒ x2.i[k] ≡ x3.i[k];
          loop invariant 0 ≤ i_4 ≤ x2.length ∧ i_4 ≤ x3.length;
          loop assigns i_4;
      */
      while (1) {
        if (i_4 < x2.length) {
          if (! (i_4 < x3.length)) break;
        }
        else break;
        if (x2.i[i_4] - x3.i[i_4] < 0) {
          __retres_4 = -1;
          goto return_label_label_4;
        }
        if (x2.i[i_4] - x3.i[i_4] > 0) {
          __retres_4 = 1;
          goto return_label_label_4;
        }
        i_4 ++;
      }
      __retres_4 = x2.length - x3.length;
      goto return_label_label_4;
    }
    else {
      int tmp_4;
      if (left_4 > right_4) tmp_4 = 1; else tmp_4 = -1;
      __retres_4 = tmp_4;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_5 = x1.count;
    int right_5 = x3.count;
    if (left_5 == right_5) {
      int i_5 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_5 ⇒ x1.i[k] ≡ x3.i[k];
          loop invariant 0 ≤ i_5 ≤ x1.length ∧ i_5 ≤ x3.length;
          loop assigns i_5;
      */
      while (1) {
        if (i_5 < x1.length) {
          if (! (i_5 < x3.length)) break;
        }
        else break;
        if (x1.i[i_5] - x3.i[i_5] < 0) {
          __retres_5 = -1;
          goto return_label_label_5;
        }
        if (x1.i[i_5] - x3.i[i_5] > 0) {
          __retres_5 = 1;
          goto return_label_label_5;
        }
        i_5 ++;
      }
      __retres_5 = x1.length - x3.length;
      goto return_label_label_5;
    }
    else {
      int tmp_5;
      if (left_5 > right_5) tmp_5 = 1; else tmp_5 = -1;
      __retres_5 = tmp_5;
      goto return_label_label_5;
    }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

/*@ requires 0 ≤ x2.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x3.length < 1000;
    requires 0 ≤ x1.length < 1000;
    requires 0 ≤ x2.length < 1000;
 */
void relational_wrapper_3(struct Word x1, struct Word x2, struct Word x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    int left_6 = x1.count;
    int right_6 = x2.count;
    if (left_6 == right_6) {
      int i_6 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_6 ⇒ x1.i[k] ≡ x2.i[k];
          loop invariant 0 ≤ i_6 ≤ x1.length ∧ i_6 ≤ x2.length;
          loop assigns i_6;
      */
      while (1) {
        if (i_6 < x1.length) {
          if (! (i_6 < x2.length)) break;
        }
        else break;
        if (x1.i[i_6] - x2.i[i_6] < 0) {
          __retres_6 = -1;
          goto return_label_label_6;
        }
        if (x1.i[i_6] - x2.i[i_6] > 0) {
          __retres_6 = 1;
          goto return_label_label_6;
        }
        i_6 ++;
      }
      __retres_6 = x1.length - x2.length;
      goto return_label_label_6;
    }
    else {
      int tmp_6;
      if (left_6 > right_6) tmp_6 = 1; else tmp_6 = -1;
      __retres_6 = tmp_6;
      goto return_label_label_6;
    }
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    /*@ assert Rpp: 0 ≤ x1.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_7 = x1.count;
    int right_7 = x3.count;
    if (left_7 == right_7) {
      int i_7 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_7 ⇒ x1.i[k] ≡ x3.i[k];
          loop invariant 0 ≤ i_7 ≤ x1.length ∧ i_7 ≤ x3.length;
          loop assigns i_7;
      */
      while (1) {
        if (i_7 < x1.length) {
          if (! (i_7 < x3.length)) break;
        }
        else break;
        if (x1.i[i_7] - x3.i[i_7] < 0) {
          __retres_7 = -1;
          goto return_label_label_7;
        }
        if (x1.i[i_7] - x3.i[i_7] > 0) {
          __retres_7 = 1;
          goto return_label_label_7;
        }
        i_7 ++;
      }
      __retres_7 = x1.length - x3.length;
      goto return_label_label_7;
    }
    else {
      int tmp_7;
      if (left_7 > right_7) tmp_7 = 1; else tmp_7 = -1;
      __retres_7 = tmp_7;
      goto return_label_label_7;
    }
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    /*@ assert Rpp: 0 ≤ x2.length < 1000; */
    /*@ assert Rpp: 0 ≤ x3.length < 1000; */
    int left_8 = x2.count;
    int right_8 = x3.count;
    if (left_8 == right_8) {
      int i_8 = 0;
      /*@ loop invariant ∀ ℤ k; 0 ≤ k < i_8 ⇒ x2.i[k] ≡ x3.i[k];
          loop invariant 0 ≤ i_8 ≤ x2.length ∧ i_8 ≤ x3.length;
          loop assigns i_8;
      */
      while (1) {
        if (i_8 < x2.length) {
          if (! (i_8 < x3.length)) break;
        }
        else break;
        if (x2.i[i_8] - x3.i[i_8] < 0) {
          __retres_8 = -1;
          goto return_label_label_8;
        }
        if (x2.i[i_8] - x3.i[i_8] > 0) {
          __retres_8 = 1;
          goto return_label_label_8;
        }
        i_8 ++;
      }
      __retres_8 = x2.length - x3.length;
      goto return_label_label_8;
    }
    else {
      int tmp_8;
      if (left_8 > right_8) tmp_8 = 1; else tmp_8 = -1;
      __retres_8 = tmp_8;
      goto return_label_label_8;
    }
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
