[kernel] Parsing tests/../benchmarks/stackoverflow/Time-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Time {
   int ora ;
   int volume_totale ;
};
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y)
{
  int __retres;
  if (x < y) {
    __retres = -1;
    goto return_label;
  }
  if (x > y) {
    __retres = 1;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Time o1, struct Time o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Time x1, struct Time x2, struct Time x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Time o1, struct Time o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Time x1, struct Time x2, struct Time x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Time o1, struct Time o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Time x1, struct Time x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Time o1, struct Time o2)
{
  int time1 = o1.ora;
  int time2 = o2.ora;
  int cmp = IntCompare(time1,time2);
  if (cmp == 0) {
    int voltot1 = o1.volume_totale;
    int voltot2 = o2.volume_totale;
    cmp = IntCompare(voltot1,voltot2);
  }
  return cmp;
}

int IntCompare_aux_1(int x, int y);

void relational_wrapper_1(struct Time x1, struct Time x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int time1_1 = x1.ora;
    int time2_1 = x2.ora;
    int cmp_1 = IntCompare(time1_1,time2_1);
    if (cmp_1 == 0) {
      int voltot1_1 = x1.volume_totale;
      int voltot2_1 = x2.volume_totale;
      cmp_1 = IntCompare_aux_1(voltot1_1,voltot2_1);
    }
    return_variable_relational_1 = cmp_1;
  }
  {
    int time1_2 = x2.ora;
    int time2_2 = x1.ora;
    int cmp_2 = IntCompare(time1_2,time2_2);
    if (cmp_2 == 0) {
      int voltot1_2 = x2.volume_totale;
      int voltot2_2 = x1.volume_totale;
      cmp_2 = IntCompare_aux_1(voltot1_2,voltot2_2);
    }
    return_variable_relational_2 = cmp_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

int IntCompare_aux_2(int x, int y);

void relational_wrapper_2(struct Time x1, struct Time x2, struct Time x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int time1_3 = x1.ora;
    int time2_3 = x2.ora;
    int cmp_3 = IntCompare(time1_3,time2_3);
    if (cmp_3 == 0) {
      int voltot1_3 = x1.volume_totale;
      int voltot2_3 = x2.volume_totale;
      cmp_3 = IntCompare_aux_2(voltot1_3,voltot2_3);
    }
    return_variable_relational_3 = cmp_3;
  }
  {
    int time1_4 = x2.ora;
    int time2_4 = x3.ora;
    int cmp_4 = IntCompare(time1_4,time2_4);
    if (cmp_4 == 0) {
      int voltot1_4 = x2.volume_totale;
      int voltot2_4 = x3.volume_totale;
      cmp_4 = IntCompare_aux_2(voltot1_4,voltot2_4);
    }
    return_variable_relational_4 = cmp_4;
  }
  {
    int time1_5 = x1.ora;
    int time2_5 = x3.ora;
    int cmp_5 = IntCompare(time1_5,time2_5);
    if (cmp_5 == 0) {
      int voltot1_5 = x1.volume_totale;
      int voltot2_5 = x3.volume_totale;
      cmp_5 = IntCompare_aux_2(voltot1_5,voltot2_5);
    }
    return_variable_relational_5 = cmp_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

int IntCompare_aux_3(int x, int y);

void relational_wrapper_3(struct Time x1, struct Time x2, struct Time x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int time1_6 = x1.ora;
    int time2_6 = x2.ora;
    int cmp_6 = IntCompare(time1_6,time2_6);
    if (cmp_6 == 0) {
      int voltot1_6 = x1.volume_totale;
      int voltot2_6 = x2.volume_totale;
      cmp_6 = IntCompare_aux_3(voltot1_6,voltot2_6);
    }
    return_variable_relational_6 = cmp_6;
  }
  {
    int time1_7 = x1.ora;
    int time2_7 = x3.ora;
    int cmp_7 = IntCompare(time1_7,time2_7);
    if (cmp_7 == 0) {
      int voltot1_7 = x1.volume_totale;
      int voltot2_7 = x3.volume_totale;
      cmp_7 = IntCompare_aux_3(voltot1_7,voltot2_7);
    }
    return_variable_relational_7 = cmp_7;
  }
  {
    int time1_8 = x2.ora;
    int time2_8 = x3.ora;
    int cmp_8 = IntCompare(time1_8,time2_8);
    if (cmp_8 == 0) {
      int voltot1_8 = x2.volume_totale;
      int voltot2_8 = x3.volume_totale;
      cmp_8 = IntCompare_aux_3(voltot1_8,voltot2_8);
    }
    return_variable_relational_8 = cmp_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
