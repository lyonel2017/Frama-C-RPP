[kernel] Parsing benchmarks/stackoverflow/FileItem-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
struct FileItem {
   int *FileName ;
   int *toInt ;
};
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct FileItem o1, struct FileItem o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct FileItem x1, struct FileItem x2, struct FileItem x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct FileItem o1, struct FileItem o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct FileItem x1, struct FileItem x2, struct FileItem x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct FileItem o1, struct FileItem o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct FileItem x1, struct FileItem x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct FileItem o1, struct FileItem o2)
{
  int __retres;
  int result = 0;
  if (o1.toInt == (int *)0) 
    if (o2.toInt == (int *)0) {
      __retres = 0;
      goto return_label;
    }
    else {
      __retres = 1;
      goto return_label;
    }
  else 
    if (o2.toInt == (int *)0) {
      __retres = -1;
      goto return_label;
    }
  int *n1 = o1.FileName;
  int *n2 = o2.FileName;
  if (n1 == (int *)0) 
    if (n2 == (int *)0) {
      __retres = 0;
      goto return_label;
    }
    else {
      __retres = 1;
      goto return_label;
    }
  else 
    if (n2 == (int *)0) {
      __retres = -1;
      goto return_label;
    }
  __retres = (int)(n1 - n2);
  return_label: return __retres;
}

void relational_wrapper_1(struct FileItem x1, struct FileItem x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int result_1 = 0;
    if (x1.toInt == (int *)0) 
      if (x2.toInt == (int *)0) {
        __retres_1 = 0;
        goto return_label_label_1;
      }
      else {
        __retres_1 = 1;
        goto return_label_label_1;
      }
    else 
      if (x2.toInt == (int *)0) {
        __retres_1 = -1;
        goto return_label_label_1;
      }
    int *n1_1 = x1.FileName;
    int *n2_1 = x2.FileName;
    if (n1_1 == (int *)0) 
      if (n2_1 == (int *)0) {
        __retres_1 = 0;
        goto return_label_label_1;
      }
      else {
        __retres_1 = 1;
        goto return_label_label_1;
      }
    else 
      if (n2_1 == (int *)0) {
        __retres_1 = -1;
        goto return_label_label_1;
      }
    __retres_1 = (int)(n1_1 - n2_1);
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int result_2 = 0;
    if (x2.toInt == (int *)0) 
      if (x1.toInt == (int *)0) {
        __retres_2 = 0;
        goto return_label_label_2;
      }
      else {
        __retres_2 = 1;
        goto return_label_label_2;
      }
    else 
      if (x1.toInt == (int *)0) {
        __retres_2 = -1;
        goto return_label_label_2;
      }
    int *n1_2 = x2.FileName;
    int *n2_2 = x1.FileName;
    if (n1_2 == (int *)0) 
      if (n2_2 == (int *)0) {
        __retres_2 = 0;
        goto return_label_label_2;
      }
      else {
        __retres_2 = 1;
        goto return_label_label_2;
      }
    else 
      if (n2_2 == (int *)0) {
        __retres_2 = -1;
        goto return_label_label_2;
      }
    __retres_2 = (int)(n1_2 - n2_2);
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct FileItem x1, struct FileItem x2,
                          struct FileItem x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int result_3 = 0;
    if (x1.toInt == (int *)0) 
      if (x2.toInt == (int *)0) {
        __retres_3 = 0;
        goto return_label_label_3;
      }
      else {
        __retres_3 = 1;
        goto return_label_label_3;
      }
    else 
      if (x2.toInt == (int *)0) {
        __retres_3 = -1;
        goto return_label_label_3;
      }
    int *n1_3 = x1.FileName;
    int *n2_3 = x2.FileName;
    if (n1_3 == (int *)0) 
      if (n2_3 == (int *)0) {
        __retres_3 = 0;
        goto return_label_label_3;
      }
      else {
        __retres_3 = 1;
        goto return_label_label_3;
      }
    else 
      if (n2_3 == (int *)0) {
        __retres_3 = -1;
        goto return_label_label_3;
      }
    __retres_3 = (int)(n1_3 - n2_3);
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int result_4 = 0;
    if (x2.toInt == (int *)0) 
      if (x3.toInt == (int *)0) {
        __retres_4 = 0;
        goto return_label_label_4;
      }
      else {
        __retres_4 = 1;
        goto return_label_label_4;
      }
    else 
      if (x3.toInt == (int *)0) {
        __retres_4 = -1;
        goto return_label_label_4;
      }
    int *n1_4 = x2.FileName;
    int *n2_4 = x3.FileName;
    if (n1_4 == (int *)0) 
      if (n2_4 == (int *)0) {
        __retres_4 = 0;
        goto return_label_label_4;
      }
      else {
        __retres_4 = 1;
        goto return_label_label_4;
      }
    else 
      if (n2_4 == (int *)0) {
        __retres_4 = -1;
        goto return_label_label_4;
      }
    __retres_4 = (int)(n1_4 - n2_4);
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int result_5 = 0;
    if (x1.toInt == (int *)0) 
      if (x3.toInt == (int *)0) {
        __retres_5 = 0;
        goto return_label_label_5;
      }
      else {
        __retres_5 = 1;
        goto return_label_label_5;
      }
    else 
      if (x3.toInt == (int *)0) {
        __retres_5 = -1;
        goto return_label_label_5;
      }
    int *n1_5 = x1.FileName;
    int *n2_5 = x3.FileName;
    if (n1_5 == (int *)0) 
      if (n2_5 == (int *)0) {
        __retres_5 = 0;
        goto return_label_label_5;
      }
      else {
        __retres_5 = 1;
        goto return_label_label_5;
      }
    else 
      if (n2_5 == (int *)0) {
        __retres_5 = -1;
        goto return_label_label_5;
      }
    __retres_5 = (int)(n1_5 - n2_5);
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct FileItem x1, struct FileItem x2,
                          struct FileItem x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    int result_6 = 0;
    if (x1.toInt == (int *)0) 
      if (x2.toInt == (int *)0) {
        __retres_6 = 0;
        goto return_label_label_6;
      }
      else {
        __retres_6 = 1;
        goto return_label_label_6;
      }
    else 
      if (x2.toInt == (int *)0) {
        __retres_6 = -1;
        goto return_label_label_6;
      }
    int *n1_6 = x1.FileName;
    int *n2_6 = x2.FileName;
    if (n1_6 == (int *)0) 
      if (n2_6 == (int *)0) {
        __retres_6 = 0;
        goto return_label_label_6;
      }
      else {
        __retres_6 = 1;
        goto return_label_label_6;
      }
    else 
      if (n2_6 == (int *)0) {
        __retres_6 = -1;
        goto return_label_label_6;
      }
    __retres_6 = (int)(n1_6 - n2_6);
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    int result_7 = 0;
    if (x1.toInt == (int *)0) 
      if (x3.toInt == (int *)0) {
        __retres_7 = 0;
        goto return_label_label_7;
      }
      else {
        __retres_7 = 1;
        goto return_label_label_7;
      }
    else 
      if (x3.toInt == (int *)0) {
        __retres_7 = -1;
        goto return_label_label_7;
      }
    int *n1_7 = x1.FileName;
    int *n2_7 = x3.FileName;
    if (n1_7 == (int *)0) 
      if (n2_7 == (int *)0) {
        __retres_7 = 0;
        goto return_label_label_7;
      }
      else {
        __retres_7 = 1;
        goto return_label_label_7;
      }
    else 
      if (n2_7 == (int *)0) {
        __retres_7 = -1;
        goto return_label_label_7;
      }
    __retres_7 = (int)(n1_7 - n2_7);
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    int result_8 = 0;
    if (x2.toInt == (int *)0) 
      if (x3.toInt == (int *)0) {
        __retres_8 = 0;
        goto return_label_label_8;
      }
      else {
        __retres_8 = 1;
        goto return_label_label_8;
      }
    else 
      if (x3.toInt == (int *)0) {
        __retres_8 = -1;
        goto return_label_label_8;
      }
    int *n1_8 = x2.FileName;
    int *n2_8 = x3.FileName;
    if (n1_8 == (int *)0) 
      if (n2_8 == (int *)0) {
        __retres_8 = 0;
        goto return_label_label_8;
      }
      else {
        __retres_8 = 1;
        goto return_label_label_8;
      }
    else 
      if (n2_8 == (int *)0) {
        __retres_8 = -1;
        goto return_label_label_8;
      }
    __retres_8 = (int)(n1_8 - n2_8);
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
