[kernel] Parsing benchmarks/stackoverflow/NzbFile-true.c (with preprocessing)
[kernel:typing:int-conversion] benchmarks/stackoverflow/NzbFile-true.c:50: Warning: 
  Conversion from a pointer to an integer without an explicit cast
[kernel:typing:incompatible-types-call] benchmarks/stackoverflow/NzbFile-true.c:50: Warning: 
  expected 'int' but got argument of type 'int *': o2.FileName
[kernel:typing:int-conversion] benchmarks/stackoverflow/NzbFile-true.c:50: Warning: 
  Conversion from a pointer to an integer without an explicit cast
[kernel:typing:incompatible-types-call] benchmarks/stackoverflow/NzbFile-true.c:50: Warning: 
  expected 'int' but got argument of type 'int *': o1.FileName
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
struct NzbFile {
   int *FileName ;
   int getFileName_toLowerCase_endsWith[5] ;
   int Subject ;
};
/*@
type invariant NzbFile_is_bool(struct NzbFile s) =
  ∀ ℤ k;
    0 ≤ k < 5 ⇒
    s.getFileName_toLowerCase_endsWith[k] ≡ 0 ∨
    s.getFileName_toLowerCase_endsWith[k] ≡ 1;

*/
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y);

/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct NzbFile o1, struct NzbFile o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct NzbFile x1, struct NzbFile x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct NzbFile o1, struct NzbFile o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct NzbFile x1, struct NzbFile x2, struct NzbFile x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct NzbFile o1, struct NzbFile o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct NzbFile x1, struct NzbFile x2, struct NzbFile x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct NzbFile o1, struct NzbFile o2)
{
  int __retres;
  if (o1.FileName != (int *)0) {
    if (o2.FileName != (int *)0) {
      int tmp;
      int i = 0;
      /*@ loop invariant 0 ≤ i ≤ 5;
          loop invariant
            ∀ ℤ k;
              0 ≤ k < i ⇒
              o1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
              o2.getFileName_toLowerCase_endsWith[k] ≡ 0;
          loop assigns i;
      */
      while (i < 5) {
        if (o1.getFileName_toLowerCase_endsWith[i]) 
          if (o2.getFileName_toLowerCase_endsWith[i]) {
            __retres = 0;
            goto return_label;
          }
        if (o1.getFileName_toLowerCase_endsWith[i]) {
          __retres = -1000 - i;
          goto return_label;
        }
        if (o2.getFileName_toLowerCase_endsWith[i]) {
          __retres = 1000 + i;
          goto return_label;
        }
        i ++;
      }
      tmp = IntCompare((int)o1.FileName,(int)o2.FileName);
      __retres = tmp;
      goto return_label;
    }
    else goto _LAND_1;
  }
  else {
    _LAND_1: ;
    if (o1.FileName != (int *)0) {
      if (o2.FileName == (int *)0) {
        __retres = -1005;
        goto return_label;
      }
      else goto _LAND_0;
    }
    else {
      _LAND_0: ;
      if (o1.FileName == (int *)0) {
        if (o2.FileName != (int *)0) {
          __retres = 1005;
          goto return_label;
        }
        else goto _LAND;
      }
      else {
        _LAND:
        {
          int tmp_0;
          tmp_0 = IntCompare(o1.Subject,o2.Subject);
          __retres = tmp_0;
          goto return_label;
        }
      }
    }
  }
  return_label: return __retres;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);

void relational_wrapper_1(struct NzbFile x1, struct NzbFile x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    if (x1.FileName != (int *)0) {
      if (x2.FileName != (int *)0) {
        int tmp_1;
        int i_1 = 0;
        /*@ loop invariant 0 ≤ i_1 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_1 ⇒
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_1;
        */
        while (i_1 < 5) {
          if (x1.getFileName_toLowerCase_endsWith[i_1]) 
            if (x2.getFileName_toLowerCase_endsWith[i_1]) {
              __retres_1 = 0;
              goto return_label_label_1;
            }
          if (x1.getFileName_toLowerCase_endsWith[i_1]) {
            __retres_1 = -1000 - i_1;
            goto return_label_label_1;
          }
          if (x2.getFileName_toLowerCase_endsWith[i_1]) {
            __retres_1 = 1000 + i_1;
            goto return_label_label_1;
          }
          i_1 ++;
        }
        tmp_1 = IntCompare_aux_1((int)x1.FileName,(int)x2.FileName);
        __retres_1 = tmp_1;
        goto return_label_label_1;
      }
      else goto _LAND_1_label_2;
    }
    else {
      _LAND_1_label_2: ;
      if (x1.FileName != (int *)0) {
        if (x2.FileName == (int *)0) {
          __retres_1 = -1005;
          goto return_label_label_1;
        }
        else goto _LAND_0_label_3;
      }
      else {
        _LAND_0_label_3: ;
        if (x1.FileName == (int *)0) {
          if (x2.FileName != (int *)0) {
            __retres_1 = 1005;
            goto return_label_label_1;
          }
          else goto _LAND_label_4;
        }
        else {
          _LAND_label_4:
          {
            int tmp_0_1;
            tmp_0_1 = IntCompare_aux_1(x1.Subject,x2.Subject);
            __retres_1 = tmp_0_1;
            goto return_label_label_1;
          }
        }
      }
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    if (x2.FileName != (int *)0) {
      if (x1.FileName != (int *)0) {
        int tmp_2;
        int i_2 = 0;
        /*@ loop invariant 0 ≤ i_2 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_2 ⇒
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_2;
        */
        while (i_2 < 5) {
          if (x2.getFileName_toLowerCase_endsWith[i_2]) 
            if (x1.getFileName_toLowerCase_endsWith[i_2]) {
              __retres_2 = 0;
              goto return_label_label_5;
            }
          if (x2.getFileName_toLowerCase_endsWith[i_2]) {
            __retres_2 = -1000 - i_2;
            goto return_label_label_5;
          }
          if (x1.getFileName_toLowerCase_endsWith[i_2]) {
            __retres_2 = 1000 + i_2;
            goto return_label_label_5;
          }
          i_2 ++;
        }
        tmp_2 = IntCompare_aux_1((int)x2.FileName,(int)x1.FileName);
        __retres_2 = tmp_2;
        goto return_label_label_5;
      }
      else goto _LAND_1_label_6;
    }
    else {
      _LAND_1_label_6: ;
      if (x2.FileName != (int *)0) {
        if (x1.FileName == (int *)0) {
          __retres_2 = -1005;
          goto return_label_label_5;
        }
        else goto _LAND_0_label_7;
      }
      else {
        _LAND_0_label_7: ;
        if (x2.FileName == (int *)0) {
          if (x1.FileName != (int *)0) {
            __retres_2 = 1005;
            goto return_label_label_5;
          }
          else goto _LAND_label_8;
        }
        else {
          _LAND_label_8:
          {
            int tmp_0_2;
            tmp_0_2 = IntCompare_aux_1(x2.Subject,x1.Subject);
            __retres_2 = tmp_0_2;
            goto return_label_label_5;
          }
        }
      }
    }
    return_label_label_5: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct NzbFile x1, struct NzbFile x2,
                          struct NzbFile x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    if (x1.FileName != (int *)0) {
      if (x2.FileName != (int *)0) {
        int tmp_3;
        int i_3 = 0;
        /*@ loop invariant 0 ≤ i_3 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_3 ⇒
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_3;
        */
        while (i_3 < 5) {
          if (x1.getFileName_toLowerCase_endsWith[i_3]) 
            if (x2.getFileName_toLowerCase_endsWith[i_3]) {
              __retres_3 = 0;
              goto return_label_label_9;
            }
          if (x1.getFileName_toLowerCase_endsWith[i_3]) {
            __retres_3 = -1000 - i_3;
            goto return_label_label_9;
          }
          if (x2.getFileName_toLowerCase_endsWith[i_3]) {
            __retres_3 = 1000 + i_3;
            goto return_label_label_9;
          }
          i_3 ++;
        }
        tmp_3 = IntCompare_aux_2((int)x1.FileName,(int)x2.FileName);
        __retres_3 = tmp_3;
        goto return_label_label_9;
      }
      else goto _LAND_1_label_10;
    }
    else {
      _LAND_1_label_10: ;
      if (x1.FileName != (int *)0) {
        if (x2.FileName == (int *)0) {
          __retres_3 = -1005;
          goto return_label_label_9;
        }
        else goto _LAND_0_label_11;
      }
      else {
        _LAND_0_label_11: ;
        if (x1.FileName == (int *)0) {
          if (x2.FileName != (int *)0) {
            __retres_3 = 1005;
            goto return_label_label_9;
          }
          else goto _LAND_label_12;
        }
        else {
          _LAND_label_12:
          {
            int tmp_0_3;
            tmp_0_3 = IntCompare_aux_2(x1.Subject,x2.Subject);
            __retres_3 = tmp_0_3;
            goto return_label_label_9;
          }
        }
      }
    }
    return_label_label_9: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    if (x2.FileName != (int *)0) {
      if (x3.FileName != (int *)0) {
        int tmp_4;
        int i_4 = 0;
        /*@ loop invariant 0 ≤ i_4 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_4 ⇒
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x3.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_4;
        */
        while (i_4 < 5) {
          if (x2.getFileName_toLowerCase_endsWith[i_4]) 
            if (x3.getFileName_toLowerCase_endsWith[i_4]) {
              __retres_4 = 0;
              goto return_label_label_13;
            }
          if (x2.getFileName_toLowerCase_endsWith[i_4]) {
            __retres_4 = -1000 - i_4;
            goto return_label_label_13;
          }
          if (x3.getFileName_toLowerCase_endsWith[i_4]) {
            __retres_4 = 1000 + i_4;
            goto return_label_label_13;
          }
          i_4 ++;
        }
        tmp_4 = IntCompare_aux_2((int)x2.FileName,(int)x3.FileName);
        __retres_4 = tmp_4;
        goto return_label_label_13;
      }
      else goto _LAND_1_label_14;
    }
    else {
      _LAND_1_label_14: ;
      if (x2.FileName != (int *)0) {
        if (x3.FileName == (int *)0) {
          __retres_4 = -1005;
          goto return_label_label_13;
        }
        else goto _LAND_0_label_15;
      }
      else {
        _LAND_0_label_15: ;
        if (x2.FileName == (int *)0) {
          if (x3.FileName != (int *)0) {
            __retres_4 = 1005;
            goto return_label_label_13;
          }
          else goto _LAND_label_16;
        }
        else {
          _LAND_label_16:
          {
            int tmp_0_4;
            tmp_0_4 = IntCompare_aux_2(x2.Subject,x3.Subject);
            __retres_4 = tmp_0_4;
            goto return_label_label_13;
          }
        }
      }
    }
    return_label_label_13: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    if (x1.FileName != (int *)0) {
      if (x3.FileName != (int *)0) {
        int tmp_5;
        int i_5 = 0;
        /*@ loop invariant 0 ≤ i_5 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_5 ⇒
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x3.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_5;
        */
        while (i_5 < 5) {
          if (x1.getFileName_toLowerCase_endsWith[i_5]) 
            if (x3.getFileName_toLowerCase_endsWith[i_5]) {
              __retres_5 = 0;
              goto return_label_label_17;
            }
          if (x1.getFileName_toLowerCase_endsWith[i_5]) {
            __retres_5 = -1000 - i_5;
            goto return_label_label_17;
          }
          if (x3.getFileName_toLowerCase_endsWith[i_5]) {
            __retres_5 = 1000 + i_5;
            goto return_label_label_17;
          }
          i_5 ++;
        }
        tmp_5 = IntCompare_aux_2((int)x1.FileName,(int)x3.FileName);
        __retres_5 = tmp_5;
        goto return_label_label_17;
      }
      else goto _LAND_1_label_18;
    }
    else {
      _LAND_1_label_18: ;
      if (x1.FileName != (int *)0) {
        if (x3.FileName == (int *)0) {
          __retres_5 = -1005;
          goto return_label_label_17;
        }
        else goto _LAND_0_label_19;
      }
      else {
        _LAND_0_label_19: ;
        if (x1.FileName == (int *)0) {
          if (x3.FileName != (int *)0) {
            __retres_5 = 1005;
            goto return_label_label_17;
          }
          else goto _LAND_label_20;
        }
        else {
          _LAND_label_20:
          {
            int tmp_0_5;
            tmp_0_5 = IntCompare_aux_2(x1.Subject,x3.Subject);
            __retres_5 = tmp_0_5;
            goto return_label_label_17;
          }
        }
      }
    }
    return_label_label_17: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct NzbFile x1, struct NzbFile x2,
                          struct NzbFile x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    if (x1.FileName != (int *)0) {
      if (x2.FileName != (int *)0) {
        int tmp_6;
        int i_6 = 0;
        /*@ loop invariant 0 ≤ i_6 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_6 ⇒
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_6;
        */
        while (i_6 < 5) {
          if (x1.getFileName_toLowerCase_endsWith[i_6]) 
            if (x2.getFileName_toLowerCase_endsWith[i_6]) {
              __retres_6 = 0;
              goto return_label_label_21;
            }
          if (x1.getFileName_toLowerCase_endsWith[i_6]) {
            __retres_6 = -1000 - i_6;
            goto return_label_label_21;
          }
          if (x2.getFileName_toLowerCase_endsWith[i_6]) {
            __retres_6 = 1000 + i_6;
            goto return_label_label_21;
          }
          i_6 ++;
        }
        tmp_6 = IntCompare_aux_3((int)x1.FileName,(int)x2.FileName);
        __retres_6 = tmp_6;
        goto return_label_label_21;
      }
      else goto _LAND_1_label_22;
    }
    else {
      _LAND_1_label_22: ;
      if (x1.FileName != (int *)0) {
        if (x2.FileName == (int *)0) {
          __retres_6 = -1005;
          goto return_label_label_21;
        }
        else goto _LAND_0_label_23;
      }
      else {
        _LAND_0_label_23: ;
        if (x1.FileName == (int *)0) {
          if (x2.FileName != (int *)0) {
            __retres_6 = 1005;
            goto return_label_label_21;
          }
          else goto _LAND_label_24;
        }
        else {
          _LAND_label_24:
          {
            int tmp_0_6;
            tmp_0_6 = IntCompare_aux_3(x1.Subject,x2.Subject);
            __retres_6 = tmp_0_6;
            goto return_label_label_21;
          }
        }
      }
    }
    return_label_label_21: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    if (x1.FileName != (int *)0) {
      if (x3.FileName != (int *)0) {
        int tmp_7;
        int i_7 = 0;
        /*@ loop invariant 0 ≤ i_7 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_7 ⇒
                x1.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x3.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_7;
        */
        while (i_7 < 5) {
          if (x1.getFileName_toLowerCase_endsWith[i_7]) 
            if (x3.getFileName_toLowerCase_endsWith[i_7]) {
              __retres_7 = 0;
              goto return_label_label_25;
            }
          if (x1.getFileName_toLowerCase_endsWith[i_7]) {
            __retres_7 = -1000 - i_7;
            goto return_label_label_25;
          }
          if (x3.getFileName_toLowerCase_endsWith[i_7]) {
            __retres_7 = 1000 + i_7;
            goto return_label_label_25;
          }
          i_7 ++;
        }
        tmp_7 = IntCompare_aux_3((int)x1.FileName,(int)x3.FileName);
        __retres_7 = tmp_7;
        goto return_label_label_25;
      }
      else goto _LAND_1_label_26;
    }
    else {
      _LAND_1_label_26: ;
      if (x1.FileName != (int *)0) {
        if (x3.FileName == (int *)0) {
          __retres_7 = -1005;
          goto return_label_label_25;
        }
        else goto _LAND_0_label_27;
      }
      else {
        _LAND_0_label_27: ;
        if (x1.FileName == (int *)0) {
          if (x3.FileName != (int *)0) {
            __retres_7 = 1005;
            goto return_label_label_25;
          }
          else goto _LAND_label_28;
        }
        else {
          _LAND_label_28:
          {
            int tmp_0_7;
            tmp_0_7 = IntCompare_aux_3(x1.Subject,x3.Subject);
            __retres_7 = tmp_0_7;
            goto return_label_label_25;
          }
        }
      }
    }
    return_label_label_25: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    if (x2.FileName != (int *)0) {
      if (x3.FileName != (int *)0) {
        int tmp_8;
        int i_8 = 0;
        /*@ loop invariant 0 ≤ i_8 ≤ 5;
            loop invariant
              ∀ ℤ k;
                0 ≤ k < i_8 ⇒
                x2.getFileName_toLowerCase_endsWith[k] ≡ 0 ∧
                x3.getFileName_toLowerCase_endsWith[k] ≡ 0;
            loop assigns i_8;
        */
        while (i_8 < 5) {
          if (x2.getFileName_toLowerCase_endsWith[i_8]) 
            if (x3.getFileName_toLowerCase_endsWith[i_8]) {
              __retres_8 = 0;
              goto return_label_label_29;
            }
          if (x2.getFileName_toLowerCase_endsWith[i_8]) {
            __retres_8 = -1000 - i_8;
            goto return_label_label_29;
          }
          if (x3.getFileName_toLowerCase_endsWith[i_8]) {
            __retres_8 = 1000 + i_8;
            goto return_label_label_29;
          }
          i_8 ++;
        }
        tmp_8 = IntCompare_aux_3((int)x2.FileName,(int)x3.FileName);
        __retres_8 = tmp_8;
        goto return_label_label_29;
      }
      else goto _LAND_1_label_30;
    }
    else {
      _LAND_1_label_30: ;
      if (x2.FileName != (int *)0) {
        if (x3.FileName == (int *)0) {
          __retres_8 = -1005;
          goto return_label_label_29;
        }
        else goto _LAND_0_label_31;
      }
      else {
        _LAND_0_label_31: ;
        if (x2.FileName == (int *)0) {
          if (x3.FileName != (int *)0) {
            __retres_8 = 1005;
            goto return_label_label_29;
          }
          else goto _LAND_label_32;
        }
        else {
          _LAND_label_32:
          {
            int tmp_0_8;
            tmp_0_8 = IntCompare_aux_3(x2.Subject,x3.Subject);
            __retres_8 = tmp_0_8;
            goto return_label_label_29;
          }
        }
      }
    }
    return_label_label_29: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
