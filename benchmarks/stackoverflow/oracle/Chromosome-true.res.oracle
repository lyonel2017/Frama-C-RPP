[kernel] Parsing tests/../benchmarks/stackoverflow/Chromosome-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Chromosome {
   int score[7] ;
   int isNull ;
};
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y)
{
  int __retres;
  if (x < y) {
    __retres = -1;
    goto return_label;
  }
  if (x > y) {
    __retres = 1;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Chromosome x1, struct Chromosome x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Chromosome x1, struct Chromosome x2, struct Chromosome x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Chromosome x1, struct Chromosome x2, struct Chromosome x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }

*/
/*@ requires o1.isNull ≢ 0;
    assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Chromosome o1, struct Chromosome o2)
{
  int __retres;
  if (o2.isNull == 0) {
    __retres = 1;
    goto return_label;
  }
  int comp = 0;
  int i = 0;
  /*@ loop invariant 0 ≤ i ≤ 5;
      loop invariant ∀ ℤ k; 0 ≤ k < i ⇒ o1.score[k] ≡ o2.score[k];
      loop assigns comp, i;
  */
  while (i < 5) {
    comp = IntCompare(o1.score[i],o2.score[i]);
    if (comp != 0) {
      __retres = comp;
      goto return_label;
    }
    i ++;
  }
  __retres = 0;
  return_label: return __retres;
}

int IntCompare_aux_1(int x, int y);

/*@ requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0; */
void relational_wrapper_1(struct Chromosome x1, struct Chromosome x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    int comp_1 = 0;
    int i_1 = 0;
    /*@ loop invariant 0 ≤ i_1 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_1 ⇒ x1.score[k] ≡ x2.score[k];
        loop assigns comp_1, i_1;
    */
    while (i_1 < 5) {
      comp_1 = IntCompare_aux_1(x1.score[i_1],x2.score[i_1]);
      if (comp_1 != 0) {
        __retres_1 = comp_1;
        goto return_label_label_1;
      }
      i_1 ++;
    }
    __retres_1 = 0;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x1.isNull == 0) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    int comp_2 = 0;
    int i_2 = 0;
    /*@ loop invariant 0 ≤ i_2 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_2 ⇒ x2.score[k] ≡ x1.score[k];
        loop assigns comp_2, i_2;
    */
    while (i_2 < 5) {
      comp_2 = IntCompare_aux_1(x2.score[i_2],x1.score[i_2]);
      if (comp_2 != 0) {
        __retres_2 = comp_2;
        goto return_label_label_2;
      }
      i_2 ++;
    }
    __retres_2 = 0;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

int IntCompare_aux_2(int x, int y);

/*@ requires x1.isNull ≢ 0;
    requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0;
 */
void relational_wrapper_2(struct Chromosome x1, struct Chromosome x2,
                          struct Chromosome x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    int comp_3 = 0;
    int i_3 = 0;
    /*@ loop invariant 0 ≤ i_3 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_3 ⇒ x1.score[k] ≡ x2.score[k];
        loop assigns comp_3, i_3;
    */
    while (i_3 < 5) {
      comp_3 = IntCompare_aux_2(x1.score[i_3],x2.score[i_3]);
      if (comp_3 != 0) {
        __retres_3 = comp_3;
        goto return_label_label_3;
      }
      i_3 ++;
    }
    __retres_3 = 0;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    int comp_4 = 0;
    int i_4 = 0;
    /*@ loop invariant 0 ≤ i_4 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_4 ⇒ x2.score[k] ≡ x3.score[k];
        loop assigns comp_4, i_4;
    */
    while (i_4 < 5) {
      comp_4 = IntCompare_aux_2(x2.score[i_4],x3.score[i_4]);
      if (comp_4 != 0) {
        __retres_4 = comp_4;
        goto return_label_label_4;
      }
      i_4 ++;
    }
    __retres_4 = 0;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_5 = 1;
      goto return_label_label_5;
    }
    int comp_5 = 0;
    int i_5 = 0;
    /*@ loop invariant 0 ≤ i_5 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_5 ⇒ x1.score[k] ≡ x3.score[k];
        loop assigns comp_5, i_5;
    */
    while (i_5 < 5) {
      comp_5 = IntCompare_aux_2(x1.score[i_5],x3.score[i_5]);
      if (comp_5 != 0) {
        __retres_5 = comp_5;
        goto return_label_label_5;
      }
      i_5 ++;
    }
    __retres_5 = 0;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

int IntCompare_aux_3(int x, int y);

/*@ requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0;
    requires x1.isNull ≢ 0;
 */
void relational_wrapper_3(struct Chromosome x1, struct Chromosome x2,
                          struct Chromosome x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_6 = 1;
      goto return_label_label_6;
    }
    int comp_6 = 0;
    int i_6 = 0;
    /*@ loop invariant 0 ≤ i_6 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_6 ⇒ x1.score[k] ≡ x2.score[k];
        loop assigns comp_6, i_6;
    */
    while (i_6 < 5) {
      comp_6 = IntCompare_aux_3(x1.score[i_6],x2.score[i_6]);
      if (comp_6 != 0) {
        __retres_6 = comp_6;
        goto return_label_label_6;
      }
      i_6 ++;
    }
    __retres_6 = 0;
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_7 = 1;
      goto return_label_label_7;
    }
    int comp_7 = 0;
    int i_7 = 0;
    /*@ loop invariant 0 ≤ i_7 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_7 ⇒ x1.score[k] ≡ x3.score[k];
        loop assigns comp_7, i_7;
    */
    while (i_7 < 5) {
      comp_7 = IntCompare_aux_3(x1.score[i_7],x3.score[i_7]);
      if (comp_7 != 0) {
        __retres_7 = comp_7;
        goto return_label_label_7;
      }
      i_7 ++;
    }
    __retres_7 = 0;
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_8 = 1;
      goto return_label_label_8;
    }
    int comp_8 = 0;
    int i_8 = 0;
    /*@ loop invariant 0 ≤ i_8 ≤ 5;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_8 ⇒ x2.score[k] ≡ x3.score[k];
        loop assigns comp_8, i_8;
    */
    while (i_8 < 5) {
      comp_8 = IntCompare_aux_3(x2.score[i_8],x3.score[i_8]);
      if (comp_8 != 0) {
        __retres_8 = comp_8;
        goto return_label_label_8;
      }
      i_8 ++;
    }
    __retres_8 = 0;
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
