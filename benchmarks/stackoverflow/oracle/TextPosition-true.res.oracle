[kernel] Parsing tests/../benchmarks/stackoverflow/TextPosition-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct TextPosition {
   int getDir ;
   float getYDirAdj ;
   float getXDirAdj ;
   float getHeightDir ;
   float getWidthDirAdj ;
};
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct TextPosition x1, struct TextPosition x2,
        struct TextPosition x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct TextPosition x1, struct TextPosition x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3
  (struct TextPosition o1, struct TextPosition o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct TextPosition x1, struct TextPosition x2,
        struct TextPosition x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct TextPosition o1, struct TextPosition o2)
{
  int __retres;
  float tmp;
  int retval = 0;
  if (o1.getDir < o2.getDir) {
    __retres = -1;
    goto return_label;
  }
  if (o1.getDir > o2.getDir) {
    __retres = 1;
    goto return_label;
  }
  float pos1YBottom = o1.getYDirAdj;
  float pos2YBottom = o2.getYDirAdj;
  float aux = pos1YBottom - pos2YBottom;
  if (aux < (float)0) tmp = - aux; else tmp = aux;
  float yDifference = tmp;
  if (yDifference < (float)1) {
    float tmp_0;
    float x1 = o1.getXDirAdj;
    float x2 = o2.getXDirAdj;
    aux = x1 - x2;
    if (aux < (float)0) tmp_0 = - aux; else tmp_0 = aux;
    float xDifference = tmp_0;
    if (xDifference < (float)1) {
      float tmp_1;
      float pos1Height = o1.getHeightDir;
      float pos2Height = o2.getHeightDir;
      aux = pos1Height - pos2Height;
      if (aux < (float)0) tmp_1 = - aux; else tmp_1 = aux;
      float heightDifference = tmp_1;
      if (heightDifference < (float)1) {
        float tmp_2;
        float pos1Width = o1.getWidthDirAdj;
        float pos2Width = o2.getWidthDirAdj;
        aux = pos1Width - pos2Width;
        if (aux < (float)0) tmp_2 = - aux; else tmp_2 = aux;
        float widthDifference = tmp_2;
        if (widthDifference < (float)1) retval = 0;
        else 
          if (pos1Width < pos2Width) retval = -1; else retval = 1;
      }
      else 
        if (pos1Height < pos2Height) retval = -1; else retval = 1;
    }
    else 
      if (x1 < x2) retval = -1; else retval = 1;
  }
  else 
    if (pos1YBottom < pos2YBottom) retval = -1; else retval = 1;
  __retres = retval;
  return_label: return __retres;
}

void relational_wrapper_1(struct TextPosition x1, struct TextPosition x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    float tmp_1;
    int retval_1 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    if (x1.getDir > x2.getDir) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    float pos1YBottom_1 = x1.getYDirAdj;
    float pos2YBottom_1 = x2.getYDirAdj;
    float aux_1 = pos1YBottom_1 - pos2YBottom_1;
    if (aux_1 < (float)0) tmp_1 = - aux_1; else tmp_1 = aux_1;
    float yDifference_1 = tmp_1;
    if (yDifference_1 < (float)1) {
      float tmp_0_1;
      float x1_1 = x1.getXDirAdj;
      float x2_1 = x2.getXDirAdj;
      aux_1 = x1_1 - x2_1;
      if (aux_1 < (float)0) tmp_0_1 = - aux_1; else tmp_0_1 = aux_1;
      float xDifference_1 = tmp_0_1;
      if (xDifference_1 < (float)1) {
        float tmp_1_1;
        float pos1Height_1 = x1.getHeightDir;
        float pos2Height_1 = x2.getHeightDir;
        aux_1 = pos1Height_1 - pos2Height_1;
        if (aux_1 < (float)0) tmp_1_1 = - aux_1; else tmp_1_1 = aux_1;
        float heightDifference_1 = tmp_1_1;
        if (heightDifference_1 < (float)1) {
          float tmp_2_1;
          float pos1Width_1 = x1.getWidthDirAdj;
          float pos2Width_1 = x2.getWidthDirAdj;
          aux_1 = pos1Width_1 - pos2Width_1;
          if (aux_1 < (float)0) tmp_2_1 = - aux_1; else tmp_2_1 = aux_1;
          float widthDifference_1 = tmp_2_1;
          if (widthDifference_1 < (float)1) retval_1 = 0;
          else 
            if (pos1Width_1 < pos2Width_1) retval_1 = -1; else retval_1 = 1;
        }
        else 
          if (pos1Height_1 < pos2Height_1) retval_1 = -1; else retval_1 = 1;
      }
      else 
        if (x1_1 < x2_1) retval_1 = -1; else retval_1 = 1;
    }
    else 
      if (pos1YBottom_1 < pos2YBottom_1) retval_1 = -1; else retval_1 = 1;
    __retres_1 = retval_1;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    float tmp_2;
    int retval_2 = 0;
    if (x2.getDir < x1.getDir) {
      __retres_2 = -1;
      goto return_label_label_2;
    }
    if (x2.getDir > x1.getDir) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    float pos1YBottom_2 = x2.getYDirAdj;
    float pos2YBottom_2 = x1.getYDirAdj;
    float aux_2 = pos1YBottom_2 - pos2YBottom_2;
    if (aux_2 < (float)0) tmp_2 = - aux_2; else tmp_2 = aux_2;
    float yDifference_2 = tmp_2;
    if (yDifference_2 < (float)1) {
      float tmp_0_2;
      float x1_2 = x2.getXDirAdj;
      float x2_2 = x1.getXDirAdj;
      aux_2 = x1_2 - x2_2;
      if (aux_2 < (float)0) tmp_0_2 = - aux_2; else tmp_0_2 = aux_2;
      float xDifference_2 = tmp_0_2;
      if (xDifference_2 < (float)1) {
        float tmp_1_2;
        float pos1Height_2 = x2.getHeightDir;
        float pos2Height_2 = x1.getHeightDir;
        aux_2 = pos1Height_2 - pos2Height_2;
        if (aux_2 < (float)0) tmp_1_2 = - aux_2; else tmp_1_2 = aux_2;
        float heightDifference_2 = tmp_1_2;
        if (heightDifference_2 < (float)1) {
          float tmp_2_2;
          float pos1Width_2 = x2.getWidthDirAdj;
          float pos2Width_2 = x1.getWidthDirAdj;
          aux_2 = pos1Width_2 - pos2Width_2;
          if (aux_2 < (float)0) tmp_2_2 = - aux_2; else tmp_2_2 = aux_2;
          float widthDifference_2 = tmp_2_2;
          if (widthDifference_2 < (float)1) retval_2 = 0;
          else 
            if (pos1Width_2 < pos2Width_2) retval_2 = -1; else retval_2 = 1;
        }
        else 
          if (pos1Height_2 < pos2Height_2) retval_2 = -1; else retval_2 = 1;
      }
      else 
        if (x1_2 < x2_2) retval_2 = -1; else retval_2 = 1;
    }
    else 
      if (pos1YBottom_2 < pos2YBottom_2) retval_2 = -1; else retval_2 = 1;
    __retres_2 = retval_2;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct TextPosition x1, struct TextPosition x2,
                          struct TextPosition x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    float tmp_3;
    int retval_3 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_3 = -1;
      goto return_label_label_3;
    }
    if (x1.getDir > x2.getDir) {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    float pos1YBottom_3 = x1.getYDirAdj;
    float pos2YBottom_3 = x2.getYDirAdj;
    float aux_3 = pos1YBottom_3 - pos2YBottom_3;
    if (aux_3 < (float)0) tmp_3 = - aux_3; else tmp_3 = aux_3;
    float yDifference_3 = tmp_3;
    if (yDifference_3 < (float)1) {
      float tmp_0_3;
      float x1_3 = x1.getXDirAdj;
      float x2_3 = x2.getXDirAdj;
      aux_3 = x1_3 - x2_3;
      if (aux_3 < (float)0) tmp_0_3 = - aux_3; else tmp_0_3 = aux_3;
      float xDifference_3 = tmp_0_3;
      if (xDifference_3 < (float)1) {
        float tmp_1_3;
        float pos1Height_3 = x1.getHeightDir;
        float pos2Height_3 = x2.getHeightDir;
        aux_3 = pos1Height_3 - pos2Height_3;
        if (aux_3 < (float)0) tmp_1_3 = - aux_3; else tmp_1_3 = aux_3;
        float heightDifference_3 = tmp_1_3;
        if (heightDifference_3 < (float)1) {
          float tmp_2_3;
          float pos1Width_3 = x1.getWidthDirAdj;
          float pos2Width_3 = x2.getWidthDirAdj;
          aux_3 = pos1Width_3 - pos2Width_3;
          if (aux_3 < (float)0) tmp_2_3 = - aux_3; else tmp_2_3 = aux_3;
          float widthDifference_3 = tmp_2_3;
          if (widthDifference_3 < (float)1) retval_3 = 0;
          else 
            if (pos1Width_3 < pos2Width_3) retval_3 = -1; else retval_3 = 1;
        }
        else 
          if (pos1Height_3 < pos2Height_3) retval_3 = -1; else retval_3 = 1;
      }
      else 
        if (x1_3 < x2_3) retval_3 = -1; else retval_3 = 1;
    }
    else 
      if (pos1YBottom_3 < pos2YBottom_3) retval_3 = -1; else retval_3 = 1;
    __retres_3 = retval_3;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    float tmp_4;
    int retval_4 = 0;
    if (x2.getDir < x3.getDir) {
      __retres_4 = -1;
      goto return_label_label_4;
    }
    if (x2.getDir > x3.getDir) {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    float pos1YBottom_4 = x2.getYDirAdj;
    float pos2YBottom_4 = x3.getYDirAdj;
    float aux_4 = pos1YBottom_4 - pos2YBottom_4;
    if (aux_4 < (float)0) tmp_4 = - aux_4; else tmp_4 = aux_4;
    float yDifference_4 = tmp_4;
    if (yDifference_4 < (float)1) {
      float tmp_0_4;
      float x1_4 = x2.getXDirAdj;
      float x2_4 = x3.getXDirAdj;
      aux_4 = x1_4 - x2_4;
      if (aux_4 < (float)0) tmp_0_4 = - aux_4; else tmp_0_4 = aux_4;
      float xDifference_4 = tmp_0_4;
      if (xDifference_4 < (float)1) {
        float tmp_1_4;
        float pos1Height_4 = x2.getHeightDir;
        float pos2Height_4 = x3.getHeightDir;
        aux_4 = pos1Height_4 - pos2Height_4;
        if (aux_4 < (float)0) tmp_1_4 = - aux_4; else tmp_1_4 = aux_4;
        float heightDifference_4 = tmp_1_4;
        if (heightDifference_4 < (float)1) {
          float tmp_2_4;
          float pos1Width_4 = x2.getWidthDirAdj;
          float pos2Width_4 = x3.getWidthDirAdj;
          aux_4 = pos1Width_4 - pos2Width_4;
          if (aux_4 < (float)0) tmp_2_4 = - aux_4; else tmp_2_4 = aux_4;
          float widthDifference_4 = tmp_2_4;
          if (widthDifference_4 < (float)1) retval_4 = 0;
          else 
            if (pos1Width_4 < pos2Width_4) retval_4 = -1; else retval_4 = 1;
        }
        else 
          if (pos1Height_4 < pos2Height_4) retval_4 = -1; else retval_4 = 1;
      }
      else 
        if (x1_4 < x2_4) retval_4 = -1; else retval_4 = 1;
    }
    else 
      if (pos1YBottom_4 < pos2YBottom_4) retval_4 = -1; else retval_4 = 1;
    __retres_4 = retval_4;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    float tmp_5;
    int retval_5 = 0;
    if (x1.getDir < x3.getDir) {
      __retres_5 = -1;
      goto return_label_label_5;
    }
    if (x1.getDir > x3.getDir) {
      __retres_5 = 1;
      goto return_label_label_5;
    }
    float pos1YBottom_5 = x1.getYDirAdj;
    float pos2YBottom_5 = x3.getYDirAdj;
    float aux_5 = pos1YBottom_5 - pos2YBottom_5;
    if (aux_5 < (float)0) tmp_5 = - aux_5; else tmp_5 = aux_5;
    float yDifference_5 = tmp_5;
    if (yDifference_5 < (float)1) {
      float tmp_0_5;
      float x1_5 = x1.getXDirAdj;
      float x2_5 = x3.getXDirAdj;
      aux_5 = x1_5 - x2_5;
      if (aux_5 < (float)0) tmp_0_5 = - aux_5; else tmp_0_5 = aux_5;
      float xDifference_5 = tmp_0_5;
      if (xDifference_5 < (float)1) {
        float tmp_1_5;
        float pos1Height_5 = x1.getHeightDir;
        float pos2Height_5 = x3.getHeightDir;
        aux_5 = pos1Height_5 - pos2Height_5;
        if (aux_5 < (float)0) tmp_1_5 = - aux_5; else tmp_1_5 = aux_5;
        float heightDifference_5 = tmp_1_5;
        if (heightDifference_5 < (float)1) {
          float tmp_2_5;
          float pos1Width_5 = x1.getWidthDirAdj;
          float pos2Width_5 = x3.getWidthDirAdj;
          aux_5 = pos1Width_5 - pos2Width_5;
          if (aux_5 < (float)0) tmp_2_5 = - aux_5; else tmp_2_5 = aux_5;
          float widthDifference_5 = tmp_2_5;
          if (widthDifference_5 < (float)1) retval_5 = 0;
          else 
            if (pos1Width_5 < pos2Width_5) retval_5 = -1; else retval_5 = 1;
        }
        else 
          if (pos1Height_5 < pos2Height_5) retval_5 = -1; else retval_5 = 1;
      }
      else 
        if (x1_5 < x2_5) retval_5 = -1; else retval_5 = 1;
    }
    else 
      if (pos1YBottom_5 < pos2YBottom_5) retval_5 = -1; else retval_5 = 1;
    __retres_5 = retval_5;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct TextPosition x1, struct TextPosition x2,
                          struct TextPosition x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    float tmp_6;
    int retval_6 = 0;
    if (x1.getDir < x2.getDir) {
      __retres_6 = -1;
      goto return_label_label_6;
    }
    if (x1.getDir > x2.getDir) {
      __retres_6 = 1;
      goto return_label_label_6;
    }
    float pos1YBottom_6 = x1.getYDirAdj;
    float pos2YBottom_6 = x2.getYDirAdj;
    float aux_6 = pos1YBottom_6 - pos2YBottom_6;
    if (aux_6 < (float)0) tmp_6 = - aux_6; else tmp_6 = aux_6;
    float yDifference_6 = tmp_6;
    if (yDifference_6 < (float)1) {
      float tmp_0_6;
      float x1_6 = x1.getXDirAdj;
      float x2_6 = x2.getXDirAdj;
      aux_6 = x1_6 - x2_6;
      if (aux_6 < (float)0) tmp_0_6 = - aux_6; else tmp_0_6 = aux_6;
      float xDifference_6 = tmp_0_6;
      if (xDifference_6 < (float)1) {
        float tmp_1_6;
        float pos1Height_6 = x1.getHeightDir;
        float pos2Height_6 = x2.getHeightDir;
        aux_6 = pos1Height_6 - pos2Height_6;
        if (aux_6 < (float)0) tmp_1_6 = - aux_6; else tmp_1_6 = aux_6;
        float heightDifference_6 = tmp_1_6;
        if (heightDifference_6 < (float)1) {
          float tmp_2_6;
          float pos1Width_6 = x1.getWidthDirAdj;
          float pos2Width_6 = x2.getWidthDirAdj;
          aux_6 = pos1Width_6 - pos2Width_6;
          if (aux_6 < (float)0) tmp_2_6 = - aux_6; else tmp_2_6 = aux_6;
          float widthDifference_6 = tmp_2_6;
          if (widthDifference_6 < (float)1) retval_6 = 0;
          else 
            if (pos1Width_6 < pos2Width_6) retval_6 = -1; else retval_6 = 1;
        }
        else 
          if (pos1Height_6 < pos2Height_6) retval_6 = -1; else retval_6 = 1;
      }
      else 
        if (x1_6 < x2_6) retval_6 = -1; else retval_6 = 1;
    }
    else 
      if (pos1YBottom_6 < pos2YBottom_6) retval_6 = -1; else retval_6 = 1;
    __retres_6 = retval_6;
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    float tmp_7;
    int retval_7 = 0;
    if (x1.getDir < x3.getDir) {
      __retres_7 = -1;
      goto return_label_label_7;
    }
    if (x1.getDir > x3.getDir) {
      __retres_7 = 1;
      goto return_label_label_7;
    }
    float pos1YBottom_7 = x1.getYDirAdj;
    float pos2YBottom_7 = x3.getYDirAdj;
    float aux_7 = pos1YBottom_7 - pos2YBottom_7;
    if (aux_7 < (float)0) tmp_7 = - aux_7; else tmp_7 = aux_7;
    float yDifference_7 = tmp_7;
    if (yDifference_7 < (float)1) {
      float tmp_0_7;
      float x1_7 = x1.getXDirAdj;
      float x2_7 = x3.getXDirAdj;
      aux_7 = x1_7 - x2_7;
      if (aux_7 < (float)0) tmp_0_7 = - aux_7; else tmp_0_7 = aux_7;
      float xDifference_7 = tmp_0_7;
      if (xDifference_7 < (float)1) {
        float tmp_1_7;
        float pos1Height_7 = x1.getHeightDir;
        float pos2Height_7 = x3.getHeightDir;
        aux_7 = pos1Height_7 - pos2Height_7;
        if (aux_7 < (float)0) tmp_1_7 = - aux_7; else tmp_1_7 = aux_7;
        float heightDifference_7 = tmp_1_7;
        if (heightDifference_7 < (float)1) {
          float tmp_2_7;
          float pos1Width_7 = x1.getWidthDirAdj;
          float pos2Width_7 = x3.getWidthDirAdj;
          aux_7 = pos1Width_7 - pos2Width_7;
          if (aux_7 < (float)0) tmp_2_7 = - aux_7; else tmp_2_7 = aux_7;
          float widthDifference_7 = tmp_2_7;
          if (widthDifference_7 < (float)1) retval_7 = 0;
          else 
            if (pos1Width_7 < pos2Width_7) retval_7 = -1; else retval_7 = 1;
        }
        else 
          if (pos1Height_7 < pos2Height_7) retval_7 = -1; else retval_7 = 1;
      }
      else 
        if (x1_7 < x2_7) retval_7 = -1; else retval_7 = 1;
    }
    else 
      if (pos1YBottom_7 < pos2YBottom_7) retval_7 = -1; else retval_7 = 1;
    __retres_7 = retval_7;
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    float tmp_8;
    int retval_8 = 0;
    if (x2.getDir < x3.getDir) {
      __retres_8 = -1;
      goto return_label_label_8;
    }
    if (x2.getDir > x3.getDir) {
      __retres_8 = 1;
      goto return_label_label_8;
    }
    float pos1YBottom_8 = x2.getYDirAdj;
    float pos2YBottom_8 = x3.getYDirAdj;
    float aux_8 = pos1YBottom_8 - pos2YBottom_8;
    if (aux_8 < (float)0) tmp_8 = - aux_8; else tmp_8 = aux_8;
    float yDifference_8 = tmp_8;
    if (yDifference_8 < (float)1) {
      float tmp_0_8;
      float x1_8 = x2.getXDirAdj;
      float x2_8 = x3.getXDirAdj;
      aux_8 = x1_8 - x2_8;
      if (aux_8 < (float)0) tmp_0_8 = - aux_8; else tmp_0_8 = aux_8;
      float xDifference_8 = tmp_0_8;
      if (xDifference_8 < (float)1) {
        float tmp_1_8;
        float pos1Height_8 = x2.getHeightDir;
        float pos2Height_8 = x3.getHeightDir;
        aux_8 = pos1Height_8 - pos2Height_8;
        if (aux_8 < (float)0) tmp_1_8 = - aux_8; else tmp_1_8 = aux_8;
        float heightDifference_8 = tmp_1_8;
        if (heightDifference_8 < (float)1) {
          float tmp_2_8;
          float pos1Width_8 = x2.getWidthDirAdj;
          float pos2Width_8 = x3.getWidthDirAdj;
          aux_8 = pos1Width_8 - pos2Width_8;
          if (aux_8 < (float)0) tmp_2_8 = - aux_8; else tmp_2_8 = aux_8;
          float widthDifference_8 = tmp_2_8;
          if (widthDifference_8 < (float)1) retval_8 = 0;
          else 
            if (pos1Width_8 < pos2Width_8) retval_8 = -1; else retval_8 = 1;
        }
        else 
          if (pos1Height_8 < pos2Height_8) retval_8 = -1; else retval_8 = 1;
      }
      else 
        if (x1_8 < x2_8) retval_8 = -1; else retval_8 = 1;
    }
    else 
      if (pos1YBottom_8 < pos2YBottom_8) retval_8 = -1; else retval_8 = 1;
    __retres_8 = retval_8;
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
