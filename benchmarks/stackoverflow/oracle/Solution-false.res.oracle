[kernel] Parsing tests/../benchmarks/stackoverflow/Solution-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct SolutionComparator {
   int getValue ;
   int solutionCost ;
};
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1
  (struct SolutionComparator o1, struct SolutionComparator o2, int *t) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct SolutionComparator x1, struct SolutionComparator x2, int *t;
      compare_acsl_pure_1(x1, x2, t) ≡ -compare_acsl_pure_1(x2, x1, t);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2
  (struct SolutionComparator o1, struct SolutionComparator o2, int *t) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct SolutionComparator x1, struct SolutionComparator x2,
        struct SolutionComparator x3, int *t;
      compare_acsl_pure_2(x1, x2, t) > 0 ∧
      compare_acsl_pure_2(x2, x3, t) > 0 ⇒
      compare_acsl_pure_2(x1, x3, t) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3
  (struct SolutionComparator o1, struct SolutionComparator o2, int *t) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct SolutionComparator x1, struct SolutionComparator x2,
        struct SolutionComparator x3, int *t;
      compare_acsl_pure_3(x1, x2, t) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3, t) ≡ compare_acsl_pure_3(x2, x3, t);
  
  }
 */
/*@ requires \valid(t + (0 .. 1));
    assigns \result;
    assigns \result \from o1, o2, *(t + (0 .. 1));
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2), \old(t));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2), \old(t));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2), \old(t));
 */
int compare(struct SolutionComparator o1, struct SolutionComparator o2,
            int *t)
{
  int __retres;
  int v1 = o1.getValue;
  int v2 = o2.getValue;
  if (v1 == -1) {
    if (v2 == -1) {
      __retres = 0;
      goto return_label;
    }
    else goto _LAND;
  }
  else {
    _LAND: ;
    if (v1 == -1) {
      __retres = 1;
      goto return_label;
    }
    else 
      if (v2 == -1) {
        __retres = -1;
        goto return_label;
      }
      else 
        if (v1 == v2) {
          int comp = o1.solutionCost - o2.solutionCost;
          if (comp > 0) {
            __retres = 1;
            goto return_label;
          }
          else 
            if (comp < 0) {
              __retres = -1;
              goto return_label;
            }
            else {
              __retres = 0;
              goto return_label;
            }
        }
        else {
          int target = *(t + 0);
          int comp1 = target - v1;
          int abscomp1 = 0;
          if (comp1 >= 0) abscomp1 = comp1; else abscomp1 = - comp1;
          int comp2 = target - v2;
          int abscomp2 = 0;
          if (comp2 >= 0) abscomp2 = comp2; else abscomp2 = - comp2;
          int comp3 = abscomp1 - abscomp2;
          if (comp3 > 0) {
            __retres = 1;
            goto return_label;
          }
          else 
            if (comp3 < 0) {
              __retres = -1;
              goto return_label;
            }
            else {
              __retres = 0;
              goto return_label;
            }
        }
  }
  return_label: return __retres;
}

/*@ requires \valid(t + (0 .. 1));
    requires \valid(t + (0 .. 1)); */
void relational_wrapper_1(struct SolutionComparator x1,
                          struct SolutionComparator x2, int *t)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_1 = x1.getValue;
    int v2_1 = x2.getValue;
    if (v1_1 == -1) {
      if (v2_1 == -1) {
        __retres_1 = 0;
        goto return_label_label_1;
      }
      else goto _LAND_label_2;
    }
    else {
      _LAND_label_2: ;
      if (v1_1 == -1) {
        __retres_1 = 1;
        goto return_label_label_1;
      }
      else 
        if (v2_1 == -1) {
          __retres_1 = -1;
          goto return_label_label_1;
        }
        else 
          if (v1_1 == v2_1) {
            int comp_1 = x1.solutionCost - x2.solutionCost;
            if (comp_1 > 0) {
              __retres_1 = 1;
              goto return_label_label_1;
            }
            else 
              if (comp_1 < 0) {
                __retres_1 = -1;
                goto return_label_label_1;
              }
              else {
                __retres_1 = 0;
                goto return_label_label_1;
              }
          }
          else {
            int target_1 = *(t + 0);
            int comp1_1 = target_1 - v1_1;
            int abscomp1_1 = 0;
            if (comp1_1 >= 0) abscomp1_1 = comp1_1;
            else abscomp1_1 = - comp1_1;
            int comp2_1 = target_1 - v2_1;
            int abscomp2_1 = 0;
            if (comp2_1 >= 0) abscomp2_1 = comp2_1;
            else abscomp2_1 = - comp2_1;
            int comp3_1 = abscomp1_1 - abscomp2_1;
            if (comp3_1 > 0) {
              __retres_1 = 1;
              goto return_label_label_1;
            }
            else 
              if (comp3_1 < 0) {
                __retres_1 = -1;
                goto return_label_label_1;
              }
              else {
                __retres_1 = 0;
                goto return_label_label_1;
              }
          }
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_2 = x2.getValue;
    int v2_2 = x1.getValue;
    if (v1_2 == -1) {
      if (v2_2 == -1) {
        __retres_2 = 0;
        goto return_label_label_3;
      }
      else goto _LAND_label_4;
    }
    else {
      _LAND_label_4: ;
      if (v1_2 == -1) {
        __retres_2 = 1;
        goto return_label_label_3;
      }
      else 
        if (v2_2 == -1) {
          __retres_2 = -1;
          goto return_label_label_3;
        }
        else 
          if (v1_2 == v2_2) {
            int comp_2 = x2.solutionCost - x1.solutionCost;
            if (comp_2 > 0) {
              __retres_2 = 1;
              goto return_label_label_3;
            }
            else 
              if (comp_2 < 0) {
                __retres_2 = -1;
                goto return_label_label_3;
              }
              else {
                __retres_2 = 0;
                goto return_label_label_3;
              }
          }
          else {
            int target_2 = *(t + 0);
            int comp1_2 = target_2 - v1_2;
            int abscomp1_2 = 0;
            if (comp1_2 >= 0) abscomp1_2 = comp1_2;
            else abscomp1_2 = - comp1_2;
            int comp2_2 = target_2 - v2_2;
            int abscomp2_2 = 0;
            if (comp2_2 >= 0) abscomp2_2 = comp2_2;
            else abscomp2_2 = - comp2_2;
            int comp3_2 = abscomp1_2 - abscomp2_2;
            if (comp3_2 > 0) {
              __retres_2 = 1;
              goto return_label_label_3;
            }
            else 
              if (comp3_2 < 0) {
                __retres_2 = -1;
                goto return_label_label_3;
              }
              else {
                __retres_2 = 0;
                goto return_label_label_3;
              }
          }
    }
    return_label_label_3: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

/*@ requires \valid(t + (0 .. 1));
    requires \valid(t + (0 .. 1));
    requires \valid(t + (0 .. 1));
 */
void relational_wrapper_2(struct SolutionComparator x1,
                          struct SolutionComparator x2,
                          struct SolutionComparator x3, int *t)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_3 = x1.getValue;
    int v2_3 = x2.getValue;
    if (v1_3 == -1) {
      if (v2_3 == -1) {
        __retres_3 = 0;
        goto return_label_label_5;
      }
      else goto _LAND_label_6;
    }
    else {
      _LAND_label_6: ;
      if (v1_3 == -1) {
        __retres_3 = 1;
        goto return_label_label_5;
      }
      else 
        if (v2_3 == -1) {
          __retres_3 = -1;
          goto return_label_label_5;
        }
        else 
          if (v1_3 == v2_3) {
            int comp_3 = x1.solutionCost - x2.solutionCost;
            if (comp_3 > 0) {
              __retres_3 = 1;
              goto return_label_label_5;
            }
            else 
              if (comp_3 < 0) {
                __retres_3 = -1;
                goto return_label_label_5;
              }
              else {
                __retres_3 = 0;
                goto return_label_label_5;
              }
          }
          else {
            int target_3 = *(t + 0);
            int comp1_3 = target_3 - v1_3;
            int abscomp1_3 = 0;
            if (comp1_3 >= 0) abscomp1_3 = comp1_3;
            else abscomp1_3 = - comp1_3;
            int comp2_3 = target_3 - v2_3;
            int abscomp2_3 = 0;
            if (comp2_3 >= 0) abscomp2_3 = comp2_3;
            else abscomp2_3 = - comp2_3;
            int comp3_3 = abscomp1_3 - abscomp2_3;
            if (comp3_3 > 0) {
              __retres_3 = 1;
              goto return_label_label_5;
            }
            else 
              if (comp3_3 < 0) {
                __retres_3 = -1;
                goto return_label_label_5;
              }
              else {
                __retres_3 = 0;
                goto return_label_label_5;
              }
          }
    }
    return_label_label_5: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_4 = x2.getValue;
    int v2_4 = x3.getValue;
    if (v1_4 == -1) {
      if (v2_4 == -1) {
        __retres_4 = 0;
        goto return_label_label_7;
      }
      else goto _LAND_label_8;
    }
    else {
      _LAND_label_8: ;
      if (v1_4 == -1) {
        __retres_4 = 1;
        goto return_label_label_7;
      }
      else 
        if (v2_4 == -1) {
          __retres_4 = -1;
          goto return_label_label_7;
        }
        else 
          if (v1_4 == v2_4) {
            int comp_4 = x2.solutionCost - x3.solutionCost;
            if (comp_4 > 0) {
              __retres_4 = 1;
              goto return_label_label_7;
            }
            else 
              if (comp_4 < 0) {
                __retres_4 = -1;
                goto return_label_label_7;
              }
              else {
                __retres_4 = 0;
                goto return_label_label_7;
              }
          }
          else {
            int target_4 = *(t + 0);
            int comp1_4 = target_4 - v1_4;
            int abscomp1_4 = 0;
            if (comp1_4 >= 0) abscomp1_4 = comp1_4;
            else abscomp1_4 = - comp1_4;
            int comp2_4 = target_4 - v2_4;
            int abscomp2_4 = 0;
            if (comp2_4 >= 0) abscomp2_4 = comp2_4;
            else abscomp2_4 = - comp2_4;
            int comp3_4 = abscomp1_4 - abscomp2_4;
            if (comp3_4 > 0) {
              __retres_4 = 1;
              goto return_label_label_7;
            }
            else 
              if (comp3_4 < 0) {
                __retres_4 = -1;
                goto return_label_label_7;
              }
              else {
                __retres_4 = 0;
                goto return_label_label_7;
              }
          }
    }
    return_label_label_7: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_5 = x1.getValue;
    int v2_5 = x3.getValue;
    if (v1_5 == -1) {
      if (v2_5 == -1) {
        __retres_5 = 0;
        goto return_label_label_9;
      }
      else goto _LAND_label_10;
    }
    else {
      _LAND_label_10: ;
      if (v1_5 == -1) {
        __retres_5 = 1;
        goto return_label_label_9;
      }
      else 
        if (v2_5 == -1) {
          __retres_5 = -1;
          goto return_label_label_9;
        }
        else 
          if (v1_5 == v2_5) {
            int comp_5 = x1.solutionCost - x3.solutionCost;
            if (comp_5 > 0) {
              __retres_5 = 1;
              goto return_label_label_9;
            }
            else 
              if (comp_5 < 0) {
                __retres_5 = -1;
                goto return_label_label_9;
              }
              else {
                __retres_5 = 0;
                goto return_label_label_9;
              }
          }
          else {
            int target_5 = *(t + 0);
            int comp1_5 = target_5 - v1_5;
            int abscomp1_5 = 0;
            if (comp1_5 >= 0) abscomp1_5 = comp1_5;
            else abscomp1_5 = - comp1_5;
            int comp2_5 = target_5 - v2_5;
            int abscomp2_5 = 0;
            if (comp2_5 >= 0) abscomp2_5 = comp2_5;
            else abscomp2_5 = - comp2_5;
            int comp3_5 = abscomp1_5 - abscomp2_5;
            if (comp3_5 > 0) {
              __retres_5 = 1;
              goto return_label_label_9;
            }
            else 
              if (comp3_5 < 0) {
                __retres_5 = -1;
                goto return_label_label_9;
              }
              else {
                __retres_5 = 0;
                goto return_label_label_9;
              }
          }
    }
    return_label_label_9: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

/*@ requires \valid(t + (0 .. 1));
    requires \valid(t + (0 .. 1));
    requires \valid(t + (0 .. 1));
 */
void relational_wrapper_3(struct SolutionComparator x1,
                          struct SolutionComparator x2,
                          struct SolutionComparator x3, int *t)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_6 = x1.getValue;
    int v2_6 = x2.getValue;
    if (v1_6 == -1) {
      if (v2_6 == -1) {
        __retres_6 = 0;
        goto return_label_label_11;
      }
      else goto _LAND_label_12;
    }
    else {
      _LAND_label_12: ;
      if (v1_6 == -1) {
        __retres_6 = 1;
        goto return_label_label_11;
      }
      else 
        if (v2_6 == -1) {
          __retres_6 = -1;
          goto return_label_label_11;
        }
        else 
          if (v1_6 == v2_6) {
            int comp_6 = x1.solutionCost - x2.solutionCost;
            if (comp_6 > 0) {
              __retres_6 = 1;
              goto return_label_label_11;
            }
            else 
              if (comp_6 < 0) {
                __retres_6 = -1;
                goto return_label_label_11;
              }
              else {
                __retres_6 = 0;
                goto return_label_label_11;
              }
          }
          else {
            int target_6 = *(t + 0);
            int comp1_6 = target_6 - v1_6;
            int abscomp1_6 = 0;
            if (comp1_6 >= 0) abscomp1_6 = comp1_6;
            else abscomp1_6 = - comp1_6;
            int comp2_6 = target_6 - v2_6;
            int abscomp2_6 = 0;
            if (comp2_6 >= 0) abscomp2_6 = comp2_6;
            else abscomp2_6 = - comp2_6;
            int comp3_6 = abscomp1_6 - abscomp2_6;
            if (comp3_6 > 0) {
              __retres_6 = 1;
              goto return_label_label_11;
            }
            else 
              if (comp3_6 < 0) {
                __retres_6 = -1;
                goto return_label_label_11;
              }
              else {
                __retres_6 = 0;
                goto return_label_label_11;
              }
          }
    }
    return_label_label_11: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_7 = x1.getValue;
    int v2_7 = x3.getValue;
    if (v1_7 == -1) {
      if (v2_7 == -1) {
        __retres_7 = 0;
        goto return_label_label_13;
      }
      else goto _LAND_label_14;
    }
    else {
      _LAND_label_14: ;
      if (v1_7 == -1) {
        __retres_7 = 1;
        goto return_label_label_13;
      }
      else 
        if (v2_7 == -1) {
          __retres_7 = -1;
          goto return_label_label_13;
        }
        else 
          if (v1_7 == v2_7) {
            int comp_7 = x1.solutionCost - x3.solutionCost;
            if (comp_7 > 0) {
              __retres_7 = 1;
              goto return_label_label_13;
            }
            else 
              if (comp_7 < 0) {
                __retres_7 = -1;
                goto return_label_label_13;
              }
              else {
                __retres_7 = 0;
                goto return_label_label_13;
              }
          }
          else {
            int target_7 = *(t + 0);
            int comp1_7 = target_7 - v1_7;
            int abscomp1_7 = 0;
            if (comp1_7 >= 0) abscomp1_7 = comp1_7;
            else abscomp1_7 = - comp1_7;
            int comp2_7 = target_7 - v2_7;
            int abscomp2_7 = 0;
            if (comp2_7 >= 0) abscomp2_7 = comp2_7;
            else abscomp2_7 = - comp2_7;
            int comp3_7 = abscomp1_7 - abscomp2_7;
            if (comp3_7 > 0) {
              __retres_7 = 1;
              goto return_label_label_13;
            }
            else 
              if (comp3_7 < 0) {
                __retres_7 = -1;
                goto return_label_label_13;
              }
              else {
                __retres_7 = 0;
                goto return_label_label_13;
              }
          }
    }
    return_label_label_13: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    /*@ assert Rpp: \valid(t + (0 .. 1)); */
    int v1_8 = x2.getValue;
    int v2_8 = x3.getValue;
    if (v1_8 == -1) {
      if (v2_8 == -1) {
        __retres_8 = 0;
        goto return_label_label_15;
      }
      else goto _LAND_label_16;
    }
    else {
      _LAND_label_16: ;
      if (v1_8 == -1) {
        __retres_8 = 1;
        goto return_label_label_15;
      }
      else 
        if (v2_8 == -1) {
          __retres_8 = -1;
          goto return_label_label_15;
        }
        else 
          if (v1_8 == v2_8) {
            int comp_8 = x2.solutionCost - x3.solutionCost;
            if (comp_8 > 0) {
              __retres_8 = 1;
              goto return_label_label_15;
            }
            else 
              if (comp_8 < 0) {
                __retres_8 = -1;
                goto return_label_label_15;
              }
              else {
                __retres_8 = 0;
                goto return_label_label_15;
              }
          }
          else {
            int target_8 = *(t + 0);
            int comp1_8 = target_8 - v1_8;
            int abscomp1_8 = 0;
            if (comp1_8 >= 0) abscomp1_8 = comp1_8;
            else abscomp1_8 = - comp1_8;
            int comp2_8 = target_8 - v2_8;
            int abscomp2_8 = 0;
            if (comp2_8 >= 0) abscomp2_8 = comp2_8;
            else abscomp2_8 = - comp2_8;
            int comp3_8 = abscomp1_8 - abscomp2_8;
            if (comp3_8 > 0) {
              __retres_8 = 1;
              goto return_label_label_15;
            }
            else 
              if (comp3_8 < 0) {
                __retres_8 = -1;
                goto return_label_label_15;
              }
              else {
                __retres_8 = 0;
                goto return_label_label_15;
              }
          }
    }
    return_label_label_15: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
