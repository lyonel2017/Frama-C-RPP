[kernel] Parsing benchmarks/stackoverflow/CatBPos-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct CatBPos {
   int getHdopBPosGetTime ;
   int getBPosGetTime ;
   int getBPosGetStat ;
   int getBPosIsDeparture ;
   int getBPosIsVacation ;
   int getBPosIsArrival ;
   int getHdopBPosGetTimeIsNotVoid ;
};
/*@
axiomatic Relational_axiome_2 {
  logic int IntCompare_acsl_pure_2(int x, int y) ;
  
  lemma Relational_lemma_2{L}:
    ∀ int x1, int x2, int x3;
      IntCompare_acsl_pure_2(x1, x2) > 0 ∧
      IntCompare_acsl_pure_2(x2, x3) > 0 ⇒
      IntCompare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int IntCompare_acsl_pure_3(int x, int y) ;
  
  lemma Relational_lemma_3{L}:
    ∀ int x1, int x2, int x3;
      IntCompare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      IntCompare_acsl_pure_3(x1, x3) ≡ IntCompare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int IntCompare_acsl_pure_1(int x, int y) ;
  
  lemma Relational_lemma_1{L}:
    ∀ int x1, int x2;
      IntCompare_acsl_pure_1(x1, x2) ≡ -IntCompare_acsl_pure_1(x2, x1);
  
  }
 */
/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior_1:
      ensures \result ≡ IntCompare_acsl_pure_1(\old(x), \old(y));
    
    behavior Relational_behavior_2:
      ensures \result ≡ IntCompare_acsl_pure_2(\old(x), \old(y));
    
    behavior Relational_behavior_3:
      ensures \result ≡ IntCompare_acsl_pure_3(\old(x), \old(y));
 */
int IntCompare(int x, int y)
{
  int __retres;
  if (x < y) {
    __retres = -1;
    goto return_label;
  }
  if (x > y) {
    __retres = 1;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_5 {
  logic int compare_acsl_pure_5(struct CatBPos o1, struct CatBPos o2) ;
  
  lemma Relational_lemma_5{L}:
    ∀ struct CatBPos x1, struct CatBPos x2, struct CatBPos x3;
      compare_acsl_pure_5(x1, x2) > 0 ∧ compare_acsl_pure_5(x2, x3) > 0 ⇒
      compare_acsl_pure_5(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_6 {
  logic int compare_acsl_pure_6(struct CatBPos o1, struct CatBPos o2) ;
  
  lemma Relational_lemma_6{L}:
    ∀ struct CatBPos x1, struct CatBPos x2, struct CatBPos x3;
      compare_acsl_pure_6(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_6(x1, x3) ≡ compare_acsl_pure_6(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_4 {
  logic int compare_acsl_pure_4(struct CatBPos o1, struct CatBPos o2) ;
  
  lemma Relational_lemma_4{L}:
    ∀ struct CatBPos x1, struct CatBPos x2;
      compare_acsl_pure_4(x1, x2) ≡ -compare_acsl_pure_4(x2, x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_4:
      ensures \result ≡ compare_acsl_pure_4(\old(o1), \old(o2));
    
    behavior Relational_behavior_5:
      ensures \result ≡ compare_acsl_pure_5(\old(o1), \old(o2));
    
    behavior Relational_behavior_6:
      ensures \result ≡ compare_acsl_pure_6(\old(o1), \old(o2));
 */
int compare(struct CatBPos o1, struct CatBPos o2)
{
  int __retres;
  int lCompare;
  if (o1.getHdopBPosGetTimeIsNotVoid) 
    if (o2.getHdopBPosGetTimeIsNotVoid) {
      lCompare = IntCompare(o1.getHdopBPosGetTime,o2.getHdopBPosGetTime);
      if (lCompare != 0) {
        __retres = lCompare;
        goto return_label;
      }
    }
  lCompare = IntCompare(o1.getBPosGetTime,o2.getBPosGetTime);
  if (lCompare != 0) {
    __retres = lCompare;
    goto return_label;
  }
  if (o1.getBPosIsDeparture) {
    if (o2.getBPosIsVacation) {
      __retres = 1;
      goto return_label;
    }
    else goto _LAND;
  }
  else {
    _LAND: ;
    if (o1.getBPosIsVacation) 
      if (o2.getBPosIsArrival) {
        __retres = 1;
        goto return_label;
      }
  }
  if (o1.getBPosIsDeparture) 
    if (o2.getBPosIsArrival) 
      if (o1.getBPosGetStat == o2.getBPosGetStat) {
        __retres = 1;
        goto return_label;
      }
  __retres = 0;
  return_label: return __retres;
}

/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ IntCompare_acsl_pure_1(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_2(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_3(\old(x), \old(y));
    
    behavior Relational_behavior_helper:
      ensures
        ∀ struct CatBPos o1, struct CatBPos o2;
          compare_acsl_pure_5(o1, o2) ≡ compare_acsl_pure_4(o1, o2);
 */
int IntCompare_aux_6(int x, int y);

/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ IntCompare_acsl_pure_1(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_2(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_3(\old(x), \old(y));
 */
int IntCompare_aux_5(int x, int y);

/*@ assigns \result;
    assigns \result \from x, y;
    
    behavior Relational_behavior:
      ensures \result ≡ IntCompare_acsl_pure_1(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_2(\old(x), \old(y));
      ensures \result ≡ IntCompare_acsl_pure_3(\old(x), \old(y));
 */
int IntCompare_aux_4(int x, int y);

void relational_wrapper_1(int x1, int x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    if (x1 < x2) {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    if (x1 > x2) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    __retres_1 = 0;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    if (x2 < x1) {
      __retres_2 = -1;
      goto return_label_label_2;
    }
    if (x2 > x1) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    __retres_2 = 0;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(int x1, int x2, int x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    if (x1 < x2) {
      __retres_3 = -1;
      goto return_label_label_3;
    }
    if (x1 > x2) {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    __retres_3 = 0;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    if (x2 < x3) {
      __retres_4 = -1;
      goto return_label_label_4;
    }
    if (x2 > x3) {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    __retres_4 = 0;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    if (x1 < x3) {
      __retres_5 = -1;
      goto return_label_label_5;
    }
    if (x1 > x3) {
      __retres_5 = 1;
      goto return_label_label_5;
    }
    __retres_5 = 0;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(int x1, int x2, int x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    if (x1 < x2) {
      __retres_6 = -1;
      goto return_label_label_6;
    }
    if (x1 > x2) {
      __retres_6 = 1;
      goto return_label_label_6;
    }
    __retres_6 = 0;
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    if (x1 < x3) {
      __retres_7 = -1;
      goto return_label_label_7;
    }
    if (x1 > x3) {
      __retres_7 = 1;
      goto return_label_label_7;
    }
    __retres_7 = 0;
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    if (x2 < x3) {
      __retres_8 = -1;
      goto return_label_label_8;
    }
    if (x2 > x3) {
      __retres_8 = 1;
      goto return_label_label_8;
    }
    __retres_8 = 0;
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

void relational_wrapper_4(struct CatBPos x1, struct CatBPos x2)
{
  int return_variable_relational_9;
  int return_variable_relational_10;
  {
    int __retres_9;
    int lCompare_9;
    if (x1.getHdopBPosGetTimeIsNotVoid) 
      if (x2.getHdopBPosGetTimeIsNotVoid) {
        lCompare_9 = IntCompare_aux_4(x1.getHdopBPosGetTime,
                                      x2.getHdopBPosGetTime);
        if (lCompare_9 != 0) {
          __retres_9 = lCompare_9;
          goto return_label_label_9;
        }
      }
    lCompare_9 = IntCompare_aux_4(x1.getBPosGetTime,x2.getBPosGetTime);
    if (lCompare_9 != 0) {
      __retres_9 = lCompare_9;
      goto return_label_label_9;
    }
    if (x1.getBPosIsDeparture) {
      if (x2.getBPosIsVacation) {
        __retres_9 = 1;
        goto return_label_label_9;
      }
      else goto _LAND_label_10;
    }
    else {
      _LAND_label_10: ;
      if (x1.getBPosIsVacation) 
        if (x2.getBPosIsArrival) {
          __retres_9 = 1;
          goto return_label_label_9;
        }
    }
    if (x1.getBPosIsDeparture) 
      if (x2.getBPosIsArrival) 
        if (x1.getBPosGetStat == x2.getBPosGetStat) {
          __retres_9 = 1;
          goto return_label_label_9;
        }
    __retres_9 = 0;
    return_label_label_9: return_variable_relational_9 = __retres_9;
  }
  {
    int __retres_10;
    int lCompare_10;
    if (x2.getHdopBPosGetTimeIsNotVoid) 
      if (x1.getHdopBPosGetTimeIsNotVoid) {
        lCompare_10 = IntCompare_aux_4(x2.getHdopBPosGetTime,
                                       x1.getHdopBPosGetTime);
        if (lCompare_10 != 0) {
          __retres_10 = lCompare_10;
          goto return_label_label_11;
        }
      }
    lCompare_10 = IntCompare_aux_4(x2.getBPosGetTime,x1.getBPosGetTime);
    if (lCompare_10 != 0) {
      __retres_10 = lCompare_10;
      goto return_label_label_11;
    }
    if (x2.getBPosIsDeparture) {
      if (x1.getBPosIsVacation) {
        __retres_10 = 1;
        goto return_label_label_11;
      }
      else goto _LAND_label_12;
    }
    else {
      _LAND_label_12: ;
      if (x2.getBPosIsVacation) 
        if (x1.getBPosIsArrival) {
          __retres_10 = 1;
          goto return_label_label_11;
        }
    }
    if (x2.getBPosIsDeparture) 
      if (x1.getBPosIsArrival) 
        if (x2.getBPosGetStat == x1.getBPosGetStat) {
          __retres_10 = 1;
          goto return_label_label_11;
        }
    __retres_10 = 0;
    return_label_label_11: return_variable_relational_10 = __retres_10;
  }
  /*@ check
      Rpp: return_variable_relational_9 ≡ -return_variable_relational_10;
  */
  return;
}

void relational_wrapper_5(struct CatBPos x1, struct CatBPos x2,
                          struct CatBPos x3)
{
  int return_variable_relational_11;
  int return_variable_relational_12;
  int return_variable_relational_13;
  {
    int __retres_11;
    int lCompare_11;
    if (x1.getHdopBPosGetTimeIsNotVoid) 
      if (x2.getHdopBPosGetTimeIsNotVoid) {
        lCompare_11 = IntCompare_aux_5(x1.getHdopBPosGetTime,
                                       x2.getHdopBPosGetTime);
        if (lCompare_11 != 0) {
          __retres_11 = lCompare_11;
          goto return_label_label_13;
        }
      }
    lCompare_11 = IntCompare_aux_5(x1.getBPosGetTime,x2.getBPosGetTime);
    if (lCompare_11 != 0) {
      __retres_11 = lCompare_11;
      goto return_label_label_13;
    }
    if (x1.getBPosIsDeparture) {
      if (x2.getBPosIsVacation) {
        __retres_11 = 1;
        goto return_label_label_13;
      }
      else goto _LAND_label_14;
    }
    else {
      _LAND_label_14: ;
      if (x1.getBPosIsVacation) 
        if (x2.getBPosIsArrival) {
          __retres_11 = 1;
          goto return_label_label_13;
        }
    }
    if (x1.getBPosIsDeparture) 
      if (x2.getBPosIsArrival) 
        if (x1.getBPosGetStat == x2.getBPosGetStat) {
          __retres_11 = 1;
          goto return_label_label_13;
        }
    __retres_11 = 0;
    return_label_label_13: return_variable_relational_11 = __retres_11;
  }
  {
    int __retres_12;
    int lCompare_12;
    if (x2.getHdopBPosGetTimeIsNotVoid) 
      if (x3.getHdopBPosGetTimeIsNotVoid) {
        lCompare_12 = IntCompare_aux_5(x2.getHdopBPosGetTime,
                                       x3.getHdopBPosGetTime);
        if (lCompare_12 != 0) {
          __retres_12 = lCompare_12;
          goto return_label_label_15;
        }
      }
    lCompare_12 = IntCompare_aux_5(x2.getBPosGetTime,x3.getBPosGetTime);
    if (lCompare_12 != 0) {
      __retres_12 = lCompare_12;
      goto return_label_label_15;
    }
    if (x2.getBPosIsDeparture) {
      if (x3.getBPosIsVacation) {
        __retres_12 = 1;
        goto return_label_label_15;
      }
      else goto _LAND_label_16;
    }
    else {
      _LAND_label_16: ;
      if (x2.getBPosIsVacation) 
        if (x3.getBPosIsArrival) {
          __retres_12 = 1;
          goto return_label_label_15;
        }
    }
    if (x2.getBPosIsDeparture) 
      if (x3.getBPosIsArrival) 
        if (x2.getBPosGetStat == x3.getBPosGetStat) {
          __retres_12 = 1;
          goto return_label_label_15;
        }
    __retres_12 = 0;
    return_label_label_15: return_variable_relational_12 = __retres_12;
  }
  {
    int __retres_13;
    int lCompare_13;
    if (x1.getHdopBPosGetTimeIsNotVoid) 
      if (x3.getHdopBPosGetTimeIsNotVoid) {
        lCompare_13 = IntCompare_aux_5(x1.getHdopBPosGetTime,
                                       x3.getHdopBPosGetTime);
        if (lCompare_13 != 0) {
          __retres_13 = lCompare_13;
          goto return_label_label_17;
        }
      }
    lCompare_13 = IntCompare_aux_5(x1.getBPosGetTime,x3.getBPosGetTime);
    if (lCompare_13 != 0) {
      __retres_13 = lCompare_13;
      goto return_label_label_17;
    }
    if (x1.getBPosIsDeparture) {
      if (x3.getBPosIsVacation) {
        __retres_13 = 1;
        goto return_label_label_17;
      }
      else goto _LAND_label_18;
    }
    else {
      _LAND_label_18: ;
      if (x1.getBPosIsVacation) 
        if (x3.getBPosIsArrival) {
          __retres_13 = 1;
          goto return_label_label_17;
        }
    }
    if (x1.getBPosIsDeparture) 
      if (x3.getBPosIsArrival) 
        if (x1.getBPosGetStat == x3.getBPosGetStat) {
          __retres_13 = 1;
          goto return_label_label_17;
        }
    __retres_13 = 0;
    return_label_label_17: return_variable_relational_13 = __retres_13;
  }
  /*@ check
      Rpp:
        return_variable_relational_11 > 0 ∧
        return_variable_relational_12 > 0 ⇒
        return_variable_relational_13 > 0;
  */
  return;
}

void relational_wrapper_6(struct CatBPos x1, struct CatBPos x2,
                          struct CatBPos x3)
{
  int return_variable_relational_14;
  int return_variable_relational_15;
  int return_variable_relational_16;
  {
    int __retres_14;
    int lCompare_14;
    if (x1.getHdopBPosGetTimeIsNotVoid) 
      if (x2.getHdopBPosGetTimeIsNotVoid) {
        lCompare_14 = IntCompare_aux_6(x1.getHdopBPosGetTime,
                                       x2.getHdopBPosGetTime);
        if (lCompare_14 != 0) {
          __retres_14 = lCompare_14;
          goto return_label_label_19;
        }
      }
    lCompare_14 = IntCompare_aux_6(x1.getBPosGetTime,x2.getBPosGetTime);
    if (lCompare_14 != 0) {
      __retres_14 = lCompare_14;
      goto return_label_label_19;
    }
    if (x1.getBPosIsDeparture) {
      if (x2.getBPosIsVacation) {
        __retres_14 = 1;
        goto return_label_label_19;
      }
      else goto _LAND_label_20;
    }
    else {
      _LAND_label_20: ;
      if (x1.getBPosIsVacation) 
        if (x2.getBPosIsArrival) {
          __retres_14 = 1;
          goto return_label_label_19;
        }
    }
    if (x1.getBPosIsDeparture) 
      if (x2.getBPosIsArrival) 
        if (x1.getBPosGetStat == x2.getBPosGetStat) {
          __retres_14 = 1;
          goto return_label_label_19;
        }
    __retres_14 = 0;
    return_label_label_19: return_variable_relational_14 = __retres_14;
  }
  {
    int __retres_15;
    int lCompare_15;
    if (x1.getHdopBPosGetTimeIsNotVoid) 
      if (x3.getHdopBPosGetTimeIsNotVoid) {
        lCompare_15 = IntCompare_aux_6(x1.getHdopBPosGetTime,
                                       x3.getHdopBPosGetTime);
        if (lCompare_15 != 0) {
          __retres_15 = lCompare_15;
          goto return_label_label_21;
        }
      }
    lCompare_15 = IntCompare_aux_6(x1.getBPosGetTime,x3.getBPosGetTime);
    if (lCompare_15 != 0) {
      __retres_15 = lCompare_15;
      goto return_label_label_21;
    }
    if (x1.getBPosIsDeparture) {
      if (x3.getBPosIsVacation) {
        __retres_15 = 1;
        goto return_label_label_21;
      }
      else goto _LAND_label_22;
    }
    else {
      _LAND_label_22: ;
      if (x1.getBPosIsVacation) 
        if (x3.getBPosIsArrival) {
          __retres_15 = 1;
          goto return_label_label_21;
        }
    }
    if (x1.getBPosIsDeparture) 
      if (x3.getBPosIsArrival) 
        if (x1.getBPosGetStat == x3.getBPosGetStat) {
          __retres_15 = 1;
          goto return_label_label_21;
        }
    __retres_15 = 0;
    return_label_label_21: return_variable_relational_15 = __retres_15;
  }
  {
    int __retres_16;
    int lCompare_16;
    if (x2.getHdopBPosGetTimeIsNotVoid) 
      if (x3.getHdopBPosGetTimeIsNotVoid) {
        lCompare_16 = IntCompare_aux_6(x2.getHdopBPosGetTime,
                                       x3.getHdopBPosGetTime);
        if (lCompare_16 != 0) {
          __retres_16 = lCompare_16;
          goto return_label_label_23;
        }
      }
    lCompare_16 = IntCompare_aux_6(x2.getBPosGetTime,x3.getBPosGetTime);
    if (lCompare_16 != 0) {
      __retres_16 = lCompare_16;
      goto return_label_label_23;
    }
    if (x2.getBPosIsDeparture) {
      if (x3.getBPosIsVacation) {
        __retres_16 = 1;
        goto return_label_label_23;
      }
      else goto _LAND_label_24;
    }
    else {
      _LAND_label_24: ;
      if (x2.getBPosIsVacation) 
        if (x3.getBPosIsArrival) {
          __retres_16 = 1;
          goto return_label_label_23;
        }
    }
    if (x2.getBPosIsDeparture) 
      if (x3.getBPosIsArrival) 
        if (x2.getBPosGetStat == x3.getBPosGetStat) {
          __retres_16 = 1;
          goto return_label_label_23;
        }
    __retres_16 = 0;
    return_label_label_23: return_variable_relational_16 = __retres_16;
  }
  /*@ check
      Rpp:
        return_variable_relational_14 ≡ 0 ⇒
        return_variable_relational_15 ≡ return_variable_relational_16;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
