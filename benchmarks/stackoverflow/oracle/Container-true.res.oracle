[kernel] Parsing tests/../benchmarks/stackoverflow/Container-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Container {
   int departureTime ;
   int departureMaxDuration ;
   int departureTransportCompany ;
   int departureTransportType ;
};
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y)
{
  int __retres;
  if (x < y) {
    __retres = -1;
    goto return_label;
  }
  if (x > y) {
    __retres = 1;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Container x1, struct Container x2, struct Container x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Container x1, struct Container x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Container x1, struct Container x2, struct Container x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Container o1, struct Container o2)
{
  int rv;
  rv = IntCompare(o1.departureTime,o2.departureTime);
  if (rv == 0) 
    if (o1.departureMaxDuration < o2.departureMaxDuration) rv = -1;
    else 
      if (o1.departureMaxDuration > o2.departureMaxDuration) rv = 1;
      else {
        rv = IntCompare(o1.departureTransportCompany,
                        o2.departureTransportCompany);
        if (rv == 0) rv = IntCompare(o1.departureTransportType,
                                     o2.departureTransportType);
      }
  return rv;
}

int IntCompare_aux_1(int x, int y);

void relational_wrapper_1(struct Container x1, struct Container x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int rv_1;
    rv_1 = IntCompare_aux_1(x1.departureTime,x2.departureTime);
    if (rv_1 == 0) 
      if (x1.departureMaxDuration < x2.departureMaxDuration) rv_1 = -1;
      else 
        if (x1.departureMaxDuration > x2.departureMaxDuration) rv_1 = 1;
        else {
          rv_1 = IntCompare_aux_1(x1.departureTransportCompany,
                                  x2.departureTransportCompany);
          if (rv_1 == 0) rv_1 = IntCompare_aux_1(x1.departureTransportType,
                                                 x2.departureTransportType);
        }
    return_variable_relational_1 = rv_1;
  }
  {
    int rv_2;
    rv_2 = IntCompare_aux_1(x2.departureTime,x1.departureTime);
    if (rv_2 == 0) 
      if (x2.departureMaxDuration < x1.departureMaxDuration) rv_2 = -1;
      else 
        if (x2.departureMaxDuration > x1.departureMaxDuration) rv_2 = 1;
        else {
          rv_2 = IntCompare_aux_1(x2.departureTransportCompany,
                                  x1.departureTransportCompany);
          if (rv_2 == 0) rv_2 = IntCompare_aux_1(x2.departureTransportType,
                                                 x1.departureTransportType);
        }
    return_variable_relational_2 = rv_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

int IntCompare_aux_2(int x, int y);

void relational_wrapper_2(struct Container x1, struct Container x2,
                          struct Container x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int rv_3;
    rv_3 = IntCompare_aux_2(x1.departureTime,x2.departureTime);
    if (rv_3 == 0) 
      if (x1.departureMaxDuration < x2.departureMaxDuration) rv_3 = -1;
      else 
        if (x1.departureMaxDuration > x2.departureMaxDuration) rv_3 = 1;
        else {
          rv_3 = IntCompare_aux_2(x1.departureTransportCompany,
                                  x2.departureTransportCompany);
          if (rv_3 == 0) rv_3 = IntCompare_aux_2(x1.departureTransportType,
                                                 x2.departureTransportType);
        }
    return_variable_relational_3 = rv_3;
  }
  {
    int rv_4;
    rv_4 = IntCompare_aux_2(x2.departureTime,x3.departureTime);
    if (rv_4 == 0) 
      if (x2.departureMaxDuration < x3.departureMaxDuration) rv_4 = -1;
      else 
        if (x2.departureMaxDuration > x3.departureMaxDuration) rv_4 = 1;
        else {
          rv_4 = IntCompare_aux_2(x2.departureTransportCompany,
                                  x3.departureTransportCompany);
          if (rv_4 == 0) rv_4 = IntCompare_aux_2(x2.departureTransportType,
                                                 x3.departureTransportType);
        }
    return_variable_relational_4 = rv_4;
  }
  {
    int rv_5;
    rv_5 = IntCompare_aux_2(x1.departureTime,x3.departureTime);
    if (rv_5 == 0) 
      if (x1.departureMaxDuration < x3.departureMaxDuration) rv_5 = -1;
      else 
        if (x1.departureMaxDuration > x3.departureMaxDuration) rv_5 = 1;
        else {
          rv_5 = IntCompare_aux_2(x1.departureTransportCompany,
                                  x3.departureTransportCompany);
          if (rv_5 == 0) rv_5 = IntCompare_aux_2(x1.departureTransportType,
                                                 x3.departureTransportType);
        }
    return_variable_relational_5 = rv_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

int IntCompare_aux_3(int x, int y);

void relational_wrapper_3(struct Container x1, struct Container x2,
                          struct Container x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int rv_6;
    rv_6 = IntCompare_aux_3(x1.departureTime,x2.departureTime);
    if (rv_6 == 0) 
      if (x1.departureMaxDuration < x2.departureMaxDuration) rv_6 = -1;
      else 
        if (x1.departureMaxDuration > x2.departureMaxDuration) rv_6 = 1;
        else {
          rv_6 = IntCompare_aux_3(x1.departureTransportCompany,
                                  x2.departureTransportCompany);
          if (rv_6 == 0) rv_6 = IntCompare_aux_3(x1.departureTransportType,
                                                 x2.departureTransportType);
        }
    return_variable_relational_6 = rv_6;
  }
  {
    int rv_7;
    rv_7 = IntCompare_aux_3(x1.departureTime,x3.departureTime);
    if (rv_7 == 0) 
      if (x1.departureMaxDuration < x3.departureMaxDuration) rv_7 = -1;
      else 
        if (x1.departureMaxDuration > x3.departureMaxDuration) rv_7 = 1;
        else {
          rv_7 = IntCompare_aux_3(x1.departureTransportCompany,
                                  x3.departureTransportCompany);
          if (rv_7 == 0) rv_7 = IntCompare_aux_3(x1.departureTransportType,
                                                 x3.departureTransportType);
        }
    return_variable_relational_7 = rv_7;
  }
  {
    int rv_8;
    rv_8 = IntCompare_aux_3(x2.departureTime,x3.departureTime);
    if (rv_8 == 0) 
      if (x2.departureMaxDuration < x3.departureMaxDuration) rv_8 = -1;
      else 
        if (x2.departureMaxDuration > x3.departureMaxDuration) rv_8 = 1;
        else {
          rv_8 = IntCompare_aux_3(x2.departureTransportCompany,
                                  x3.departureTransportCompany);
          if (rv_8 == 0) rv_8 = IntCompare_aux_3(x2.departureTransportType,
                                                 x3.departureTransportType);
        }
    return_variable_relational_8 = rv_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
