[kernel] Parsing tests/../benchmarks/stackoverflow/Container-false-v2.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Container {
   int departureTime ;
   int departureMaxDuration ;
   int departureTransportCompany ;
   int departureTransportType ;
};
/*@ ensures \result ≡ 1 ∨ \result ≡ 0;
    assigns \result;
    assigns \result \from time1, time2;
 */
int departureTimeIsBefore(int time1, int time2);

/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Container x1, struct Container x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Container x1, struct Container x2, struct Container x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Container o1, struct Container o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Container x1, struct Container x2, struct Container x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Container o1, struct Container o2)
{
  int __retres;
  int tmp_0;
  tmp_0 = departureTimeIsBefore(o1.departureTime,o2.departureTime);
  if (tmp_0) {
    __retres = -1;
    goto return_label;
  }
  else {
    int tmp;
    tmp = departureTimeIsBefore(o1.departureTime,o2.departureTime);
    if (tmp) {
      __retres = 1;
      goto return_label;
    }
    else 
      if (o1.departureMaxDuration == o2.departureMaxDuration) 
        if (o1.departureTransportType == o2.departureTransportType) 
          if (o1.departureTransportCompany == o1.departureTransportCompany) {
            __retres = 0;
            goto return_label;
          }
          else {
            __retres = 1;
            goto return_label;
          }
        else {
          __retres = 1;
          goto return_label;
        }
      else {
        __retres = 1;
        goto return_label;
      }
  }
  return_label: return __retres;
}

int departureTimeIsBefore_aux_1(int time1, int time2);

void relational_wrapper_1(struct Container x1, struct Container x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int tmp_0_1;
    tmp_0_1 = departureTimeIsBefore_aux_1(x1.departureTime,x2.departureTime);
    if (tmp_0_1) {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    else {
      int tmp_1;
      tmp_1 = departureTimeIsBefore_aux_1(x1.departureTime,x2.departureTime);
      if (tmp_1) {
        __retres_1 = 1;
        goto return_label_label_1;
      }
      else 
        if (x1.departureMaxDuration == x2.departureMaxDuration) 
          if (x1.departureTransportType == x2.departureTransportType) 
            if (x1.departureTransportCompany == x1.departureTransportCompany) {
              __retres_1 = 0;
              goto return_label_label_1;
            }
            else {
              __retres_1 = 1;
              goto return_label_label_1;
            }
          else {
            __retres_1 = 1;
            goto return_label_label_1;
          }
        else {
          __retres_1 = 1;
          goto return_label_label_1;
        }
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int tmp_0_2;
    tmp_0_2 = departureTimeIsBefore_aux_1(x2.departureTime,x1.departureTime);
    if (tmp_0_2) {
      __retres_2 = -1;
      goto return_label_label_2;
    }
    else {
      int tmp_2;
      tmp_2 = departureTimeIsBefore_aux_1(x2.departureTime,x1.departureTime);
      if (tmp_2) {
        __retres_2 = 1;
        goto return_label_label_2;
      }
      else 
        if (x2.departureMaxDuration == x1.departureMaxDuration) 
          if (x2.departureTransportType == x1.departureTransportType) 
            if (x2.departureTransportCompany == x2.departureTransportCompany) {
              __retres_2 = 0;
              goto return_label_label_2;
            }
            else {
              __retres_2 = 1;
              goto return_label_label_2;
            }
          else {
            __retres_2 = 1;
            goto return_label_label_2;
          }
        else {
          __retres_2 = 1;
          goto return_label_label_2;
        }
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

int departureTimeIsBefore_aux_2(int time1, int time2);

void relational_wrapper_2(struct Container x1, struct Container x2,
                          struct Container x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int tmp_0_3;
    tmp_0_3 = departureTimeIsBefore_aux_2(x1.departureTime,x2.departureTime);
    if (tmp_0_3) {
      __retres_3 = -1;
      goto return_label_label_3;
    }
    else {
      int tmp_3;
      tmp_3 = departureTimeIsBefore_aux_2(x1.departureTime,x2.departureTime);
      if (tmp_3) {
        __retres_3 = 1;
        goto return_label_label_3;
      }
      else 
        if (x1.departureMaxDuration == x2.departureMaxDuration) 
          if (x1.departureTransportType == x2.departureTransportType) 
            if (x1.departureTransportCompany == x1.departureTransportCompany) {
              __retres_3 = 0;
              goto return_label_label_3;
            }
            else {
              __retres_3 = 1;
              goto return_label_label_3;
            }
          else {
            __retres_3 = 1;
            goto return_label_label_3;
          }
        else {
          __retres_3 = 1;
          goto return_label_label_3;
        }
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int tmp_0_4;
    tmp_0_4 = departureTimeIsBefore_aux_2(x2.departureTime,x3.departureTime);
    if (tmp_0_4) {
      __retres_4 = -1;
      goto return_label_label_4;
    }
    else {
      int tmp_4;
      tmp_4 = departureTimeIsBefore_aux_2(x2.departureTime,x3.departureTime);
      if (tmp_4) {
        __retres_4 = 1;
        goto return_label_label_4;
      }
      else 
        if (x2.departureMaxDuration == x3.departureMaxDuration) 
          if (x2.departureTransportType == x3.departureTransportType) 
            if (x2.departureTransportCompany == x2.departureTransportCompany) {
              __retres_4 = 0;
              goto return_label_label_4;
            }
            else {
              __retres_4 = 1;
              goto return_label_label_4;
            }
          else {
            __retres_4 = 1;
            goto return_label_label_4;
          }
        else {
          __retres_4 = 1;
          goto return_label_label_4;
        }
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int tmp_0_5;
    tmp_0_5 = departureTimeIsBefore_aux_2(x1.departureTime,x3.departureTime);
    if (tmp_0_5) {
      __retres_5 = -1;
      goto return_label_label_5;
    }
    else {
      int tmp_5;
      tmp_5 = departureTimeIsBefore_aux_2(x1.departureTime,x3.departureTime);
      if (tmp_5) {
        __retres_5 = 1;
        goto return_label_label_5;
      }
      else 
        if (x1.departureMaxDuration == x3.departureMaxDuration) 
          if (x1.departureTransportType == x3.departureTransportType) 
            if (x1.departureTransportCompany == x1.departureTransportCompany) {
              __retres_5 = 0;
              goto return_label_label_5;
            }
            else {
              __retres_5 = 1;
              goto return_label_label_5;
            }
          else {
            __retres_5 = 1;
            goto return_label_label_5;
          }
        else {
          __retres_5 = 1;
          goto return_label_label_5;
        }
    }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

int departureTimeIsBefore_aux_3(int time1, int time2);

void relational_wrapper_3(struct Container x1, struct Container x2,
                          struct Container x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    int tmp_0_6;
    tmp_0_6 = departureTimeIsBefore_aux_3(x1.departureTime,x2.departureTime);
    if (tmp_0_6) {
      __retres_6 = -1;
      goto return_label_label_6;
    }
    else {
      int tmp_6;
      tmp_6 = departureTimeIsBefore_aux_3(x1.departureTime,x2.departureTime);
      if (tmp_6) {
        __retres_6 = 1;
        goto return_label_label_6;
      }
      else 
        if (x1.departureMaxDuration == x2.departureMaxDuration) 
          if (x1.departureTransportType == x2.departureTransportType) 
            if (x1.departureTransportCompany == x1.departureTransportCompany) {
              __retres_6 = 0;
              goto return_label_label_6;
            }
            else {
              __retres_6 = 1;
              goto return_label_label_6;
            }
          else {
            __retres_6 = 1;
            goto return_label_label_6;
          }
        else {
          __retres_6 = 1;
          goto return_label_label_6;
        }
    }
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    int tmp_0_7;
    tmp_0_7 = departureTimeIsBefore_aux_3(x1.departureTime,x3.departureTime);
    if (tmp_0_7) {
      __retres_7 = -1;
      goto return_label_label_7;
    }
    else {
      int tmp_7;
      tmp_7 = departureTimeIsBefore_aux_3(x1.departureTime,x3.departureTime);
      if (tmp_7) {
        __retres_7 = 1;
        goto return_label_label_7;
      }
      else 
        if (x1.departureMaxDuration == x3.departureMaxDuration) 
          if (x1.departureTransportType == x3.departureTransportType) 
            if (x1.departureTransportCompany == x1.departureTransportCompany) {
              __retres_7 = 0;
              goto return_label_label_7;
            }
            else {
              __retres_7 = 1;
              goto return_label_label_7;
            }
          else {
            __retres_7 = 1;
            goto return_label_label_7;
          }
        else {
          __retres_7 = 1;
          goto return_label_label_7;
        }
    }
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    int tmp_0_8;
    tmp_0_8 = departureTimeIsBefore_aux_3(x2.departureTime,x3.departureTime);
    if (tmp_0_8) {
      __retres_8 = -1;
      goto return_label_label_8;
    }
    else {
      int tmp_8;
      tmp_8 = departureTimeIsBefore_aux_3(x2.departureTime,x3.departureTime);
      if (tmp_8) {
        __retres_8 = 1;
        goto return_label_label_8;
      }
      else 
        if (x2.departureMaxDuration == x3.departureMaxDuration) 
          if (x2.departureTransportType == x3.departureTransportType) 
            if (x2.departureTransportCompany == x2.departureTransportCompany) {
              __retres_8 = 0;
              goto return_label_label_8;
            }
            else {
              __retres_8 = 1;
              goto return_label_label_8;
            }
          else {
            __retres_8 = 1;
            goto return_label_label_8;
          }
        else {
          __retres_8 = 1;
          goto return_label_label_8;
        }
    }
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

/*@ ensures \result ≡ 1 ∨ \result ≡ 0;
    assigns \result;
    assigns \result \from time1, time2;
 */
int departureTimeIsBefore_aux_3(int time1, int time2);

/*@ ensures \result ≡ 1 ∨ \result ≡ 0;
    assigns \result;
    assigns \result \from time1, time2;
 */
int departureTimeIsBefore_aux_2(int time1, int time2);

/*@ ensures \result ≡ 1 ∨ \result ≡ 0;
    assigns \result;
    assigns \result \from time1, time2;
 */
int departureTimeIsBefore_aux_1(int time1, int time2);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
