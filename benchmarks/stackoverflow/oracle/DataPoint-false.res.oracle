[kernel] Parsing benchmarks/stackoverflow/DataPoint-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct DataPoint {
   int fiscalQuarter ;
   int sectorCode ;
   int industryCode ;
};
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y)
{
  int __retres;
  if (x < y) {
    __retres = -1;
    goto return_label;
  }
  if (x > y) {
    __retres = 1;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct DataPoint o1, struct DataPoint o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct DataPoint x1, struct DataPoint x2, struct DataPoint x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct DataPoint o1, struct DataPoint o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct DataPoint x1, struct DataPoint x2, struct DataPoint x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct DataPoint o1, struct DataPoint o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct DataPoint x1, struct DataPoint x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }

*/
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct DataPoint o1, struct DataPoint o2)
{
  int __retres;
  int fiscalResult = IntCompare(o1.fiscalQuarter,o2.fiscalQuarter);
  if (fiscalResult > 0) {
    __retres = fiscalResult;
    goto return_label;
  }
  if (fiscalResult < 0) {
    __retres = fiscalResult;
    goto return_label;
  }
  if (o1.sectorCode > 0) 
    if (o1.sectorCode > o2.sectorCode) {
      __retres = o1.sectorCode - o2.sectorCode;
      goto return_label;
    }
    else 
      if (o1.sectorCode < o2.sectorCode) {
        __retres = o2.sectorCode - o1.sectorCode;
        goto return_label;
      }
      else {
        __retres = 0;
        goto return_label;
      }
  else 
    if (o1.industryCode > 0) 
      if (o1.industryCode > o2.industryCode) {
        __retres = o1.industryCode - o2.industryCode;
        goto return_label;
      }
      else 
        if (o1.industryCode < o2.industryCode) {
          __retres = o2.industryCode - o1.industryCode;
          goto return_label;
        }
        else {
          __retres = 0;
          goto return_label;
        }
    else 
      if (o1.sectorCode > 0) {
        __retres = -1;
        goto return_label;
      }
      else 
        if (o2.industryCode > 0) {
          __retres = -1;
          goto return_label;
        }
        else {
          __retres = 0;
          goto return_label;
        }
  return_label: return __retres;
}

void relational_wrapper_1(struct DataPoint x1, struct DataPoint x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int fiscalResult_1 = IntCompare(x1.fiscalQuarter,x2.fiscalQuarter);
    if (fiscalResult_1 > 0) {
      __retres_1 = fiscalResult_1;
      goto return_label_label_1;
    }
    if (fiscalResult_1 < 0) {
      __retres_1 = fiscalResult_1;
      goto return_label_label_1;
    }
    if (x1.sectorCode > 0) 
      if (x1.sectorCode > x2.sectorCode) {
        __retres_1 = x1.sectorCode - x2.sectorCode;
        goto return_label_label_1;
      }
      else 
        if (x1.sectorCode < x2.sectorCode) {
          __retres_1 = x2.sectorCode - x1.sectorCode;
          goto return_label_label_1;
        }
        else {
          __retres_1 = 0;
          goto return_label_label_1;
        }
    else 
      if (x1.industryCode > 0) 
        if (x1.industryCode > x2.industryCode) {
          __retres_1 = x1.industryCode - x2.industryCode;
          goto return_label_label_1;
        }
        else 
          if (x1.industryCode < x2.industryCode) {
            __retres_1 = x2.industryCode - x1.industryCode;
            goto return_label_label_1;
          }
          else {
            __retres_1 = 0;
            goto return_label_label_1;
          }
      else 
        if (x1.sectorCode > 0) {
          __retres_1 = -1;
          goto return_label_label_1;
        }
        else 
          if (x2.industryCode > 0) {
            __retres_1 = -1;
            goto return_label_label_1;
          }
          else {
            __retres_1 = 0;
            goto return_label_label_1;
          }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int fiscalResult_2 = IntCompare(x2.fiscalQuarter,x1.fiscalQuarter);
    if (fiscalResult_2 > 0) {
      __retres_2 = fiscalResult_2;
      goto return_label_label_2;
    }
    if (fiscalResult_2 < 0) {
      __retres_2 = fiscalResult_2;
      goto return_label_label_2;
    }
    if (x2.sectorCode > 0) 
      if (x2.sectorCode > x1.sectorCode) {
        __retres_2 = x2.sectorCode - x1.sectorCode;
        goto return_label_label_2;
      }
      else 
        if (x2.sectorCode < x1.sectorCode) {
          __retres_2 = x1.sectorCode - x2.sectorCode;
          goto return_label_label_2;
        }
        else {
          __retres_2 = 0;
          goto return_label_label_2;
        }
    else 
      if (x2.industryCode > 0) 
        if (x2.industryCode > x1.industryCode) {
          __retres_2 = x2.industryCode - x1.industryCode;
          goto return_label_label_2;
        }
        else 
          if (x2.industryCode < x1.industryCode) {
            __retres_2 = x1.industryCode - x2.industryCode;
            goto return_label_label_2;
          }
          else {
            __retres_2 = 0;
            goto return_label_label_2;
          }
      else 
        if (x2.sectorCode > 0) {
          __retres_2 = -1;
          goto return_label_label_2;
        }
        else 
          if (x1.industryCode > 0) {
            __retres_2 = -1;
            goto return_label_label_2;
          }
          else {
            __retres_2 = 0;
            goto return_label_label_2;
          }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct DataPoint x1, struct DataPoint x2,
                          struct DataPoint x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int fiscalResult_3 = IntCompare(x1.fiscalQuarter,x2.fiscalQuarter);
    if (fiscalResult_3 > 0) {
      __retres_3 = fiscalResult_3;
      goto return_label_label_3;
    }
    if (fiscalResult_3 < 0) {
      __retres_3 = fiscalResult_3;
      goto return_label_label_3;
    }
    if (x1.sectorCode > 0) 
      if (x1.sectorCode > x2.sectorCode) {
        __retres_3 = x1.sectorCode - x2.sectorCode;
        goto return_label_label_3;
      }
      else 
        if (x1.sectorCode < x2.sectorCode) {
          __retres_3 = x2.sectorCode - x1.sectorCode;
          goto return_label_label_3;
        }
        else {
          __retres_3 = 0;
          goto return_label_label_3;
        }
    else 
      if (x1.industryCode > 0) 
        if (x1.industryCode > x2.industryCode) {
          __retres_3 = x1.industryCode - x2.industryCode;
          goto return_label_label_3;
        }
        else 
          if (x1.industryCode < x2.industryCode) {
            __retres_3 = x2.industryCode - x1.industryCode;
            goto return_label_label_3;
          }
          else {
            __retres_3 = 0;
            goto return_label_label_3;
          }
      else 
        if (x1.sectorCode > 0) {
          __retres_3 = -1;
          goto return_label_label_3;
        }
        else 
          if (x2.industryCode > 0) {
            __retres_3 = -1;
            goto return_label_label_3;
          }
          else {
            __retres_3 = 0;
            goto return_label_label_3;
          }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int fiscalResult_4 = IntCompare(x2.fiscalQuarter,x3.fiscalQuarter);
    if (fiscalResult_4 > 0) {
      __retres_4 = fiscalResult_4;
      goto return_label_label_4;
    }
    if (fiscalResult_4 < 0) {
      __retres_4 = fiscalResult_4;
      goto return_label_label_4;
    }
    if (x2.sectorCode > 0) 
      if (x2.sectorCode > x3.sectorCode) {
        __retres_4 = x2.sectorCode - x3.sectorCode;
        goto return_label_label_4;
      }
      else 
        if (x2.sectorCode < x3.sectorCode) {
          __retres_4 = x3.sectorCode - x2.sectorCode;
          goto return_label_label_4;
        }
        else {
          __retres_4 = 0;
          goto return_label_label_4;
        }
    else 
      if (x2.industryCode > 0) 
        if (x2.industryCode > x3.industryCode) {
          __retres_4 = x2.industryCode - x3.industryCode;
          goto return_label_label_4;
        }
        else 
          if (x2.industryCode < x3.industryCode) {
            __retres_4 = x3.industryCode - x2.industryCode;
            goto return_label_label_4;
          }
          else {
            __retres_4 = 0;
            goto return_label_label_4;
          }
      else 
        if (x2.sectorCode > 0) {
          __retres_4 = -1;
          goto return_label_label_4;
        }
        else 
          if (x3.industryCode > 0) {
            __retres_4 = -1;
            goto return_label_label_4;
          }
          else {
            __retres_4 = 0;
            goto return_label_label_4;
          }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int fiscalResult_5 = IntCompare(x1.fiscalQuarter,x3.fiscalQuarter);
    if (fiscalResult_5 > 0) {
      __retres_5 = fiscalResult_5;
      goto return_label_label_5;
    }
    if (fiscalResult_5 < 0) {
      __retres_5 = fiscalResult_5;
      goto return_label_label_5;
    }
    if (x1.sectorCode > 0) 
      if (x1.sectorCode > x3.sectorCode) {
        __retres_5 = x1.sectorCode - x3.sectorCode;
        goto return_label_label_5;
      }
      else 
        if (x1.sectorCode < x3.sectorCode) {
          __retres_5 = x3.sectorCode - x1.sectorCode;
          goto return_label_label_5;
        }
        else {
          __retres_5 = 0;
          goto return_label_label_5;
        }
    else 
      if (x1.industryCode > 0) 
        if (x1.industryCode > x3.industryCode) {
          __retres_5 = x1.industryCode - x3.industryCode;
          goto return_label_label_5;
        }
        else 
          if (x1.industryCode < x3.industryCode) {
            __retres_5 = x3.industryCode - x1.industryCode;
            goto return_label_label_5;
          }
          else {
            __retres_5 = 0;
            goto return_label_label_5;
          }
      else 
        if (x1.sectorCode > 0) {
          __retres_5 = -1;
          goto return_label_label_5;
        }
        else 
          if (x3.industryCode > 0) {
            __retres_5 = -1;
            goto return_label_label_5;
          }
          else {
            __retres_5 = 0;
            goto return_label_label_5;
          }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct DataPoint x1, struct DataPoint x2,
                          struct DataPoint x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    int fiscalResult_6 = IntCompare(x1.fiscalQuarter,x2.fiscalQuarter);
    if (fiscalResult_6 > 0) {
      __retres_6 = fiscalResult_6;
      goto return_label_label_6;
    }
    if (fiscalResult_6 < 0) {
      __retres_6 = fiscalResult_6;
      goto return_label_label_6;
    }
    if (x1.sectorCode > 0) 
      if (x1.sectorCode > x2.sectorCode) {
        __retres_6 = x1.sectorCode - x2.sectorCode;
        goto return_label_label_6;
      }
      else 
        if (x1.sectorCode < x2.sectorCode) {
          __retres_6 = x2.sectorCode - x1.sectorCode;
          goto return_label_label_6;
        }
        else {
          __retres_6 = 0;
          goto return_label_label_6;
        }
    else 
      if (x1.industryCode > 0) 
        if (x1.industryCode > x2.industryCode) {
          __retres_6 = x1.industryCode - x2.industryCode;
          goto return_label_label_6;
        }
        else 
          if (x1.industryCode < x2.industryCode) {
            __retres_6 = x2.industryCode - x1.industryCode;
            goto return_label_label_6;
          }
          else {
            __retres_6 = 0;
            goto return_label_label_6;
          }
      else 
        if (x1.sectorCode > 0) {
          __retres_6 = -1;
          goto return_label_label_6;
        }
        else 
          if (x2.industryCode > 0) {
            __retres_6 = -1;
            goto return_label_label_6;
          }
          else {
            __retres_6 = 0;
            goto return_label_label_6;
          }
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    int fiscalResult_7 = IntCompare(x1.fiscalQuarter,x3.fiscalQuarter);
    if (fiscalResult_7 > 0) {
      __retres_7 = fiscalResult_7;
      goto return_label_label_7;
    }
    if (fiscalResult_7 < 0) {
      __retres_7 = fiscalResult_7;
      goto return_label_label_7;
    }
    if (x1.sectorCode > 0) 
      if (x1.sectorCode > x3.sectorCode) {
        __retres_7 = x1.sectorCode - x3.sectorCode;
        goto return_label_label_7;
      }
      else 
        if (x1.sectorCode < x3.sectorCode) {
          __retres_7 = x3.sectorCode - x1.sectorCode;
          goto return_label_label_7;
        }
        else {
          __retres_7 = 0;
          goto return_label_label_7;
        }
    else 
      if (x1.industryCode > 0) 
        if (x1.industryCode > x3.industryCode) {
          __retres_7 = x1.industryCode - x3.industryCode;
          goto return_label_label_7;
        }
        else 
          if (x1.industryCode < x3.industryCode) {
            __retres_7 = x3.industryCode - x1.industryCode;
            goto return_label_label_7;
          }
          else {
            __retres_7 = 0;
            goto return_label_label_7;
          }
      else 
        if (x1.sectorCode > 0) {
          __retres_7 = -1;
          goto return_label_label_7;
        }
        else 
          if (x3.industryCode > 0) {
            __retres_7 = -1;
            goto return_label_label_7;
          }
          else {
            __retres_7 = 0;
            goto return_label_label_7;
          }
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    int fiscalResult_8 = IntCompare(x2.fiscalQuarter,x3.fiscalQuarter);
    if (fiscalResult_8 > 0) {
      __retres_8 = fiscalResult_8;
      goto return_label_label_8;
    }
    if (fiscalResult_8 < 0) {
      __retres_8 = fiscalResult_8;
      goto return_label_label_8;
    }
    if (x2.sectorCode > 0) 
      if (x2.sectorCode > x3.sectorCode) {
        __retres_8 = x2.sectorCode - x3.sectorCode;
        goto return_label_label_8;
      }
      else 
        if (x2.sectorCode < x3.sectorCode) {
          __retres_8 = x3.sectorCode - x2.sectorCode;
          goto return_label_label_8;
        }
        else {
          __retres_8 = 0;
          goto return_label_label_8;
        }
    else 
      if (x2.industryCode > 0) 
        if (x2.industryCode > x3.industryCode) {
          __retres_8 = x2.industryCode - x3.industryCode;
          goto return_label_label_8;
        }
        else 
          if (x2.industryCode < x3.industryCode) {
            __retres_8 = x3.industryCode - x2.industryCode;
            goto return_label_label_8;
          }
          else {
            __retres_8 = 0;
            goto return_label_label_8;
          }
      else 
        if (x2.sectorCode > 0) {
          __retres_8 = -1;
          goto return_label_label_8;
        }
        else 
          if (x3.industryCode > 0) {
            __retres_8 = -1;
            goto return_label_label_8;
          }
          else {
            __retres_8 = 0;
            goto return_label_label_8;
          }
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
