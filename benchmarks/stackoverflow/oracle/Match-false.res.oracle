[kernel] Parsing benchmarks/stackoverflow/Match-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Match {
   int score ;
   int seq1start ;
   int seq2start ;
};
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Match o1, struct Match o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Match x1, struct Match x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Match o1, struct Match o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Match x1, struct Match x2, struct Match x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Match o1, struct Match o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Match x1, struct Match x2, struct Match x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Match o1, struct Match o2)
{
  int __retres;
  if (o1.score > o2.score) {
    __retres = -1;
    goto return_label;
  }
  if (o1.score == o2.score) 
    if (o1.seq1start < o2.seq1start) 
      if (o1.seq2start < o2.seq2start) {
        __retres = -1;
        goto return_label;
      }
  if (o1.score == o2.score) 
    if (o1.seq1start < o2.seq1start) {
      if (! (o1.seq2start < o2.seq2start)) {
        __retres = 0;
        goto return_label;
      }
    }
    else {
      __retres = 0;
      goto return_label;
    }
  __retres = 1;
  return_label: return __retres;
}

void relational_wrapper_1(struct Match x1, struct Match x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    if (x1.score > x2.score) {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) 
        if (x1.seq2start < x2.seq2start) {
          __retres_1 = -1;
          goto return_label_label_1;
        }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) {
        if (! (x1.seq2start < x2.seq2start)) {
          __retres_1 = 0;
          goto return_label_label_1;
        }
      }
      else {
        __retres_1 = 0;
        goto return_label_label_1;
      }
    __retres_1 = 1;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    if (x2.score > x1.score) {
      __retres_2 = -1;
      goto return_label_label_2;
    }
    if (x2.score == x1.score) 
      if (x2.seq1start < x1.seq1start) 
        if (x2.seq2start < x1.seq2start) {
          __retres_2 = -1;
          goto return_label_label_2;
        }
    if (x2.score == x1.score) 
      if (x2.seq1start < x1.seq1start) {
        if (! (x2.seq2start < x1.seq2start)) {
          __retres_2 = 0;
          goto return_label_label_2;
        }
      }
      else {
        __retres_2 = 0;
        goto return_label_label_2;
      }
    __retres_2 = 1;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct Match x1, struct Match x2, struct Match x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    if (x1.score > x2.score) {
      __retres_3 = -1;
      goto return_label_label_3;
    }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) 
        if (x1.seq2start < x2.seq2start) {
          __retres_3 = -1;
          goto return_label_label_3;
        }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) {
        if (! (x1.seq2start < x2.seq2start)) {
          __retres_3 = 0;
          goto return_label_label_3;
        }
      }
      else {
        __retres_3 = 0;
        goto return_label_label_3;
      }
    __retres_3 = 1;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    if (x2.score > x3.score) {
      __retres_4 = -1;
      goto return_label_label_4;
    }
    if (x2.score == x3.score) 
      if (x2.seq1start < x3.seq1start) 
        if (x2.seq2start < x3.seq2start) {
          __retres_4 = -1;
          goto return_label_label_4;
        }
    if (x2.score == x3.score) 
      if (x2.seq1start < x3.seq1start) {
        if (! (x2.seq2start < x3.seq2start)) {
          __retres_4 = 0;
          goto return_label_label_4;
        }
      }
      else {
        __retres_4 = 0;
        goto return_label_label_4;
      }
    __retres_4 = 1;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    if (x1.score > x3.score) {
      __retres_5 = -1;
      goto return_label_label_5;
    }
    if (x1.score == x3.score) 
      if (x1.seq1start < x3.seq1start) 
        if (x1.seq2start < x3.seq2start) {
          __retres_5 = -1;
          goto return_label_label_5;
        }
    if (x1.score == x3.score) 
      if (x1.seq1start < x3.seq1start) {
        if (! (x1.seq2start < x3.seq2start)) {
          __retres_5 = 0;
          goto return_label_label_5;
        }
      }
      else {
        __retres_5 = 0;
        goto return_label_label_5;
      }
    __retres_5 = 1;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct Match x1, struct Match x2, struct Match x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    if (x1.score > x2.score) {
      __retres_6 = -1;
      goto return_label_label_6;
    }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) 
        if (x1.seq2start < x2.seq2start) {
          __retres_6 = -1;
          goto return_label_label_6;
        }
    if (x1.score == x2.score) 
      if (x1.seq1start < x2.seq1start) {
        if (! (x1.seq2start < x2.seq2start)) {
          __retres_6 = 0;
          goto return_label_label_6;
        }
      }
      else {
        __retres_6 = 0;
        goto return_label_label_6;
      }
    __retres_6 = 1;
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    if (x1.score > x3.score) {
      __retres_7 = -1;
      goto return_label_label_7;
    }
    if (x1.score == x3.score) 
      if (x1.seq1start < x3.seq1start) 
        if (x1.seq2start < x3.seq2start) {
          __retres_7 = -1;
          goto return_label_label_7;
        }
    if (x1.score == x3.score) 
      if (x1.seq1start < x3.seq1start) {
        if (! (x1.seq2start < x3.seq2start)) {
          __retres_7 = 0;
          goto return_label_label_7;
        }
      }
      else {
        __retres_7 = 0;
        goto return_label_label_7;
      }
    __retres_7 = 1;
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    if (x2.score > x3.score) {
      __retres_8 = -1;
      goto return_label_label_8;
    }
    if (x2.score == x3.score) 
      if (x2.seq1start < x3.seq1start) 
        if (x2.seq2start < x3.seq2start) {
          __retres_8 = -1;
          goto return_label_label_8;
        }
    if (x2.score == x3.score) 
      if (x2.seq1start < x3.seq1start) {
        if (! (x2.seq2start < x3.seq2start)) {
          __retres_8 = 0;
          goto return_label_label_8;
        }
      }
      else {
        __retres_8 = 0;
        goto return_label_label_8;
      }
    __retres_8 = 1;
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
