[kernel] Parsing benchmarks/stackoverflow/IsoSprite-false-v1.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct IsoSprite {
   int minX ;
   int maxX ;
   int minY ;
   int maxY ;
   int minZ ;
   int maxZ ;
};
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct IsoSprite o1, struct IsoSprite o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct IsoSprite x1, struct IsoSprite x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct IsoSprite o1, struct IsoSprite o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct IsoSprite x1, struct IsoSprite x2, struct IsoSprite x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct IsoSprite o1, struct IsoSprite o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct IsoSprite x1, struct IsoSprite x2, struct IsoSprite x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct IsoSprite o1, struct IsoSprite o2)
{
  int __retres;
  if (o2.maxX > o1.minX) {
    if (o2.maxY > o1.minY) {
      if (o2.minZ < o1.maxZ) {
        __retres = -1;
        goto return_label;
      }
      else goto _LAND_0;
    }
    else goto _LAND_0;
  }
  else {
    _LAND_0: ;
    if (o2.maxX < o1.minX) 
      if (o2.maxY < o1.minY) 
        if (o2.minZ > o1.maxZ) {
          __retres = 1;
          goto return_label;
        }
  }
  __retres = 0;
  return_label: return __retres;
}

void relational_wrapper_1(struct IsoSprite x1, struct IsoSprite x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    if (x2.maxX > x1.minX) {
      if (x2.maxY > x1.minY) {
        if (x2.minZ < x1.maxZ) {
          __retres_1 = -1;
          goto return_label_label_1;
        }
        else goto _LAND_0_label_2;
      }
      else goto _LAND_0_label_2;
    }
    else {
      _LAND_0_label_2: ;
      if (x2.maxX < x1.minX) 
        if (x2.maxY < x1.minY) 
          if (x2.minZ > x1.maxZ) {
            __retres_1 = 1;
            goto return_label_label_1;
          }
    }
    __retres_1 = 0;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    if (x1.maxX > x2.minX) {
      if (x1.maxY > x2.minY) {
        if (x1.minZ < x2.maxZ) {
          __retres_2 = -1;
          goto return_label_label_3;
        }
        else goto _LAND_0_label_4;
      }
      else goto _LAND_0_label_4;
    }
    else {
      _LAND_0_label_4: ;
      if (x1.maxX < x2.minX) 
        if (x1.maxY < x2.minY) 
          if (x1.minZ > x2.maxZ) {
            __retres_2 = 1;
            goto return_label_label_3;
          }
    }
    __retres_2 = 0;
    return_label_label_3: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

void relational_wrapper_2(struct IsoSprite x1, struct IsoSprite x2,
                          struct IsoSprite x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    if (x2.maxX > x1.minX) {
      if (x2.maxY > x1.minY) {
        if (x2.minZ < x1.maxZ) {
          __retres_3 = -1;
          goto return_label_label_5;
        }
        else goto _LAND_0_label_6;
      }
      else goto _LAND_0_label_6;
    }
    else {
      _LAND_0_label_6: ;
      if (x2.maxX < x1.minX) 
        if (x2.maxY < x1.minY) 
          if (x2.minZ > x1.maxZ) {
            __retres_3 = 1;
            goto return_label_label_5;
          }
    }
    __retres_3 = 0;
    return_label_label_5: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    if (x3.maxX > x2.minX) {
      if (x3.maxY > x2.minY) {
        if (x3.minZ < x2.maxZ) {
          __retres_4 = -1;
          goto return_label_label_7;
        }
        else goto _LAND_0_label_8;
      }
      else goto _LAND_0_label_8;
    }
    else {
      _LAND_0_label_8: ;
      if (x3.maxX < x2.minX) 
        if (x3.maxY < x2.minY) 
          if (x3.minZ > x2.maxZ) {
            __retres_4 = 1;
            goto return_label_label_7;
          }
    }
    __retres_4 = 0;
    return_label_label_7: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    if (x3.maxX > x1.minX) {
      if (x3.maxY > x1.minY) {
        if (x3.minZ < x1.maxZ) {
          __retres_5 = -1;
          goto return_label_label_9;
        }
        else goto _LAND_0_label_10;
      }
      else goto _LAND_0_label_10;
    }
    else {
      _LAND_0_label_10: ;
      if (x3.maxX < x1.minX) 
        if (x3.maxY < x1.minY) 
          if (x3.minZ > x1.maxZ) {
            __retres_5 = 1;
            goto return_label_label_9;
          }
    }
    __retres_5 = 0;
    return_label_label_9: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

void relational_wrapper_3(struct IsoSprite x1, struct IsoSprite x2,
                          struct IsoSprite x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    if (x2.maxX > x1.minX) {
      if (x2.maxY > x1.minY) {
        if (x2.minZ < x1.maxZ) {
          __retres_6 = -1;
          goto return_label_label_11;
        }
        else goto _LAND_0_label_12;
      }
      else goto _LAND_0_label_12;
    }
    else {
      _LAND_0_label_12: ;
      if (x2.maxX < x1.minX) 
        if (x2.maxY < x1.minY) 
          if (x2.minZ > x1.maxZ) {
            __retres_6 = 1;
            goto return_label_label_11;
          }
    }
    __retres_6 = 0;
    return_label_label_11: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    if (x3.maxX > x1.minX) {
      if (x3.maxY > x1.minY) {
        if (x3.minZ < x1.maxZ) {
          __retres_7 = -1;
          goto return_label_label_13;
        }
        else goto _LAND_0_label_14;
      }
      else goto _LAND_0_label_14;
    }
    else {
      _LAND_0_label_14: ;
      if (x3.maxX < x1.minX) 
        if (x3.maxY < x1.minY) 
          if (x3.minZ > x1.maxZ) {
            __retres_7 = 1;
            goto return_label_label_13;
          }
    }
    __retres_7 = 0;
    return_label_label_13: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    if (x3.maxX > x2.minX) {
      if (x3.maxY > x2.minY) {
        if (x3.minZ < x2.maxZ) {
          __retres_8 = -1;
          goto return_label_label_15;
        }
        else goto _LAND_0_label_16;
      }
      else goto _LAND_0_label_16;
    }
    else {
      _LAND_0_label_16: ;
      if (x3.maxX < x2.minX) 
        if (x3.maxY < x2.minY) 
          if (x3.minZ > x2.maxZ) {
            __retres_8 = 1;
            goto return_label_label_15;
          }
    }
    __retres_8 = 0;
    return_label_label_15: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
