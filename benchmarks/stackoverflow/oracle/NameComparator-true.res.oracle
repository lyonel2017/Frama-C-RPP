[kernel] Parsing tests/../benchmarks/stackoverflow/NameComparator-true.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct MyClass {
   int Name ;
};
/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare(int x, int y);

/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2
  (struct MyClass o1, struct MyClass o2, int *t) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct MyClass x1, struct MyClass x2, struct MyClass x3, int *t;
      compare_acsl_pure_2(x1, x2, t) > 0 ∧
      compare_acsl_pure_2(x2, x3, t) > 0 ⇒
      compare_acsl_pure_2(x1, x3, t) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3
  (struct MyClass o1, struct MyClass o2, int *t) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct MyClass x1, struct MyClass x2, struct MyClass x3, int *t;
      compare_acsl_pure_3(x1, x2, t) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3, t) ≡ compare_acsl_pure_3(x2, x3, t);
  
  }
 */
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1
  (struct MyClass o1, struct MyClass o2, int *t) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct MyClass x1, struct MyClass x2, int *t;
      compare_acsl_pure_1(x1, x2, t) ≡ -compare_acsl_pure_1(x2, x1, t);
  
  }
 */
/*@ requires \valid(t + (0 .. 2));
    assigns \result;
    assigns \result \from o1, o2, *(t + (0 .. 2));
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2), \old(t));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2), \old(t));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2), \old(t));
 */
int compare(struct MyClass o1, struct MyClass o2, int *t)
{
  int __retres;
  int tmp;
  int x = o1.Name;
  int y = o2.Name;
  if (x == y) {
    __retres = 0;
    goto return_label;
  }
  int i = 0;
  /*@ loop invariant 0 ≤ i ≤ 3;
      loop invariant
        ∀ ℤ k; 0 ≤ k < i ⇒ *(t + k) ≢ x ∧ *(t + k) ≢ y;
      loop assigns i;
  */
  while (i < 3) {
    if (*(t + i) == x) {
      __retres = 1;
      goto return_label;
    }
    if (*(t + i) == y) {
      __retres = -1;
      goto return_label;
    }
    i ++;
  }
  tmp = IntCompare(x,y);
  __retres = tmp;
  return_label: return __retres;
}

int IntCompare_aux_1(int x, int y);

/*@ requires \valid(t + (0 .. 2));
    requires \valid(t + (0 .. 2)); */
void relational_wrapper_1(struct MyClass x1, struct MyClass x2, int *t)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int tmp_1;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_1 = x1.Name;
    int y_1 = x2.Name;
    if (x_1 == y_1) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    int i_1 = 0;
    /*@ loop invariant 0 ≤ i_1 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_1 ⇒ *(t + k) ≢ x_1 ∧ *(t + k) ≢ y_1;
        loop assigns i_1;
    */
    while (i_1 < 3) {
      if (*(t + i_1) == x_1) {
        __retres_1 = 1;
        goto return_label_label_1;
      }
      if (*(t + i_1) == y_1) {
        __retres_1 = -1;
        goto return_label_label_1;
      }
      i_1 ++;
    }
    tmp_1 = IntCompare_aux_1(x_1,y_1);
    __retres_1 = tmp_1;
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int tmp_2;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_2 = x2.Name;
    int y_2 = x1.Name;
    if (x_2 == y_2) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    int i_2 = 0;
    /*@ loop invariant 0 ≤ i_2 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_2 ⇒ *(t + k) ≢ x_2 ∧ *(t + k) ≢ y_2;
        loop assigns i_2;
    */
    while (i_2 < 3) {
      if (*(t + i_2) == x_2) {
        __retres_2 = 1;
        goto return_label_label_2;
      }
      if (*(t + i_2) == y_2) {
        __retres_2 = -1;
        goto return_label_label_2;
      }
      i_2 ++;
    }
    tmp_2 = IntCompare_aux_1(x_2,y_2);
    __retres_2 = tmp_2;
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ assert
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

int IntCompare_aux_2(int x, int y);

/*@ requires \valid(t + (0 .. 2));
    requires \valid(t + (0 .. 2));
    requires \valid(t + (0 .. 2));
 */
void relational_wrapper_2(struct MyClass x1, struct MyClass x2,
                          struct MyClass x3, int *t)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int tmp_3;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_3 = x1.Name;
    int y_3 = x2.Name;
    if (x_3 == y_3) {
      __retres_3 = 0;
      goto return_label_label_3;
    }
    int i_3 = 0;
    /*@ loop invariant 0 ≤ i_3 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_3 ⇒ *(t + k) ≢ x_3 ∧ *(t + k) ≢ y_3;
        loop assigns i_3;
    */
    while (i_3 < 3) {
      if (*(t + i_3) == x_3) {
        __retres_3 = 1;
        goto return_label_label_3;
      }
      if (*(t + i_3) == y_3) {
        __retres_3 = -1;
        goto return_label_label_3;
      }
      i_3 ++;
    }
    tmp_3 = IntCompare_aux_2(x_3,y_3);
    __retres_3 = tmp_3;
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int tmp_4;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_4 = x2.Name;
    int y_4 = x3.Name;
    if (x_4 == y_4) {
      __retres_4 = 0;
      goto return_label_label_4;
    }
    int i_4 = 0;
    /*@ loop invariant 0 ≤ i_4 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_4 ⇒ *(t + k) ≢ x_4 ∧ *(t + k) ≢ y_4;
        loop assigns i_4;
    */
    while (i_4 < 3) {
      if (*(t + i_4) == x_4) {
        __retres_4 = 1;
        goto return_label_label_4;
      }
      if (*(t + i_4) == y_4) {
        __retres_4 = -1;
        goto return_label_label_4;
      }
      i_4 ++;
    }
    tmp_4 = IntCompare_aux_2(x_4,y_4);
    __retres_4 = tmp_4;
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int tmp_5;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_5 = x1.Name;
    int y_5 = x3.Name;
    if (x_5 == y_5) {
      __retres_5 = 0;
      goto return_label_label_5;
    }
    int i_5 = 0;
    /*@ loop invariant 0 ≤ i_5 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_5 ⇒ *(t + k) ≢ x_5 ∧ *(t + k) ≢ y_5;
        loop assigns i_5;
    */
    while (i_5 < 3) {
      if (*(t + i_5) == x_5) {
        __retres_5 = 1;
        goto return_label_label_5;
      }
      if (*(t + i_5) == y_5) {
        __retres_5 = -1;
        goto return_label_label_5;
      }
      i_5 ++;
    }
    tmp_5 = IntCompare_aux_2(x_5,y_5);
    __retres_5 = tmp_5;
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ assert
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

int IntCompare_aux_3(int x, int y);

/*@ requires \valid(t + (0 .. 2));
    requires \valid(t + (0 .. 2));
    requires \valid(t + (0 .. 2));
 */
void relational_wrapper_3(struct MyClass x1, struct MyClass x2,
                          struct MyClass x3, int *t)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    int tmp_6;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_6 = x1.Name;
    int y_6 = x2.Name;
    if (x_6 == y_6) {
      __retres_6 = 0;
      goto return_label_label_6;
    }
    int i_6 = 0;
    /*@ loop invariant 0 ≤ i_6 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_6 ⇒ *(t + k) ≢ x_6 ∧ *(t + k) ≢ y_6;
        loop assigns i_6;
    */
    while (i_6 < 3) {
      if (*(t + i_6) == x_6) {
        __retres_6 = 1;
        goto return_label_label_6;
      }
      if (*(t + i_6) == y_6) {
        __retres_6 = -1;
        goto return_label_label_6;
      }
      i_6 ++;
    }
    tmp_6 = IntCompare_aux_3(x_6,y_6);
    __retres_6 = tmp_6;
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    int tmp_7;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_7 = x1.Name;
    int y_7 = x3.Name;
    if (x_7 == y_7) {
      __retres_7 = 0;
      goto return_label_label_7;
    }
    int i_7 = 0;
    /*@ loop invariant 0 ≤ i_7 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_7 ⇒ *(t + k) ≢ x_7 ∧ *(t + k) ≢ y_7;
        loop assigns i_7;
    */
    while (i_7 < 3) {
      if (*(t + i_7) == x_7) {
        __retres_7 = 1;
        goto return_label_label_7;
      }
      if (*(t + i_7) == y_7) {
        __retres_7 = -1;
        goto return_label_label_7;
      }
      i_7 ++;
    }
    tmp_7 = IntCompare_aux_3(x_7,y_7);
    __retres_7 = tmp_7;
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    int tmp_8;
    /*@ assert Rpp: \valid(t + (0 .. 2)); */
    int x_8 = x2.Name;
    int y_8 = x3.Name;
    if (x_8 == y_8) {
      __retres_8 = 0;
      goto return_label_label_8;
    }
    int i_8 = 0;
    /*@ loop invariant 0 ≤ i_8 ≤ 3;
        loop invariant
          ∀ ℤ k; 0 ≤ k < i_8 ⇒ *(t + k) ≢ x_8 ∧ *(t + k) ≢ y_8;
        loop assigns i_8;
    */
    while (i_8 < 3) {
      if (*(t + i_8) == x_8) {
        __retres_8 = 1;
        goto return_label_label_8;
      }
      if (*(t + i_8) == y_8) {
        __retres_8 = -1;
        goto return_label_label_8;
      }
      i_8 ++;
    }
    tmp_8 = IntCompare_aux_3(x_8,y_8);
    __retres_8 = tmp_8;
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ assert
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_3(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_2(int x, int y);

/*@ ensures \old(x) < \old(y) ⇒ \result ≡ -1;
    ensures \old(x) > \old(y) ⇒ \result ≡ 1;
    ensures \old(x) ≡ \old(y) ⇒ \result ≡ 0;
    assigns \result;
    assigns \result \from x, y;
 */
int IntCompare_aux_1(int x, int y);


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
