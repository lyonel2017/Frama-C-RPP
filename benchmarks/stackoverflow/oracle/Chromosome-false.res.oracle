[kernel] Parsing benchmarks/stackoverflow/Chromosome-false.c (with preprocessing)
[rpp] ***************************************
[rpp] Rpp start
[rpp] ***************************************
/* Generated by Frama-C */
struct Chromosome {
   int score[5] ;
   int isNull ;
};
/*@
axiomatic Relational_axiome_1 {
  logic int compare_acsl_pure_1(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_1{L}:
    ∀ struct Chromosome x1, struct Chromosome x2;
      compare_acsl_pure_1(x1, x2) ≡ -compare_acsl_pure_1(x2, x1);
  
  }
 */
/*@
axiomatic Relational_axiome_2 {
  logic int compare_acsl_pure_2(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_2{L}:
    ∀ struct Chromosome x1, struct Chromosome x2, struct Chromosome x3;
      compare_acsl_pure_2(x1, x2) > 0 ∧ compare_acsl_pure_2(x2, x3) > 0 ⇒
      compare_acsl_pure_2(x1, x3) > 0;
  
  }
 */
/*@
axiomatic Relational_axiome_3 {
  logic int compare_acsl_pure_3(struct Chromosome o1, struct Chromosome o2) ;
  
  lemma Relational_lemma_3{L}:
    ∀ struct Chromosome x1, struct Chromosome x2, struct Chromosome x3;
      compare_acsl_pure_3(x1, x2) ≡ 0 ⇒
      compare_acsl_pure_3(x1, x3) ≡ compare_acsl_pure_3(x2, x3);
  
  }
 */
/*@ requires o1.isNull ≢ 0;
    assigns \result;
    assigns \result \from o1, o2;
    
    behavior Relational_behavior_1:
      ensures \result ≡ compare_acsl_pure_1(\old(o1), \old(o2));
    
    behavior Relational_behavior_2:
      ensures \result ≡ compare_acsl_pure_2(\old(o1), \old(o2));
    
    behavior Relational_behavior_3:
      ensures \result ≡ compare_acsl_pure_3(\old(o1), \old(o2));
 */
int compare(struct Chromosome o1, struct Chromosome o2)
{
  int __retres;
  int tmp_0;
  int tmp_2;
  int tmp_4;
  int tmp_6;
  int tmp_8;
  if (o2.isNull == 0) {
    __retres = 1;
    goto return_label;
  }
  int comp = 0;
  if (o1.score[0] == o2.score[0]) tmp_0 = 0;
  else {
    int tmp;
    if (o1.score[0] > o2.score[0]) tmp = 1; else tmp = -1;
    tmp_0 = tmp;
  }
  comp += tmp_0;
  if (o1.score[1] == o2.score[1]) tmp_2 = 0;
  else {
    int tmp_1;
    if (o1.score[1] > o2.score[1]) tmp_1 = 1; else tmp_1 = -1;
    tmp_2 = tmp_1;
  }
  comp += tmp_2;
  if (o1.score[2] == o2.score[2]) tmp_4 = 0;
  else {
    int tmp_3;
    if (o1.score[2] > o2.score[2]) tmp_3 = 1; else tmp_3 = -1;
    tmp_4 = tmp_3;
  }
  comp += tmp_4;
  if (o1.score[3] == o2.score[3]) tmp_6 = 0;
  else {
    int tmp_5;
    if (o1.score[3] > o2.score[3]) tmp_5 = 1; else tmp_5 = -1;
    tmp_6 = tmp_5;
  }
  comp += tmp_6;
  if (o1.score[4] == o2.score[4]) tmp_8 = 0;
  else {
    int tmp_7;
    if (o1.score[4] > o2.score[4]) tmp_7 = 1; else tmp_7 = -1;
    tmp_8 = tmp_7;
  }
  comp += tmp_8;
  if (comp == 0) {
    __retres = 0;
    goto return_label;
  }
  if (comp > 0) {
    __retres = 1;
    goto return_label;
  }
  else {
    __retres = -1;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0; */
void relational_wrapper_1(struct Chromosome x1, struct Chromosome x2)
{
  int return_variable_relational_1;
  int return_variable_relational_2;
  {
    int __retres_1;
    int tmp_0_1;
    int tmp_2_1;
    int tmp_4_1;
    int tmp_6_1;
    int tmp_8_1;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    int comp_1 = 0;
    if (x1.score[0] == x2.score[0]) tmp_0_1 = 0;
    else {
      int tmp_1;
      if (x1.score[0] > x2.score[0]) tmp_1 = 1; else tmp_1 = -1;
      tmp_0_1 = tmp_1;
    }
    comp_1 += tmp_0_1;
    if (x1.score[1] == x2.score[1]) tmp_2_1 = 0;
    else {
      int tmp_1_1;
      if (x1.score[1] > x2.score[1]) tmp_1_1 = 1; else tmp_1_1 = -1;
      tmp_2_1 = tmp_1_1;
    }
    comp_1 += tmp_2_1;
    if (x1.score[2] == x2.score[2]) tmp_4_1 = 0;
    else {
      int tmp_3_1;
      if (x1.score[2] > x2.score[2]) tmp_3_1 = 1; else tmp_3_1 = -1;
      tmp_4_1 = tmp_3_1;
    }
    comp_1 += tmp_4_1;
    if (x1.score[3] == x2.score[3]) tmp_6_1 = 0;
    else {
      int tmp_5_1;
      if (x1.score[3] > x2.score[3]) tmp_5_1 = 1; else tmp_5_1 = -1;
      tmp_6_1 = tmp_5_1;
    }
    comp_1 += tmp_6_1;
    if (x1.score[4] == x2.score[4]) tmp_8_1 = 0;
    else {
      int tmp_7_1;
      if (x1.score[4] > x2.score[4]) tmp_7_1 = 1; else tmp_7_1 = -1;
      tmp_8_1 = tmp_7_1;
    }
    comp_1 += tmp_8_1;
    if (comp_1 == 0) {
      __retres_1 = 0;
      goto return_label_label_1;
    }
    if (comp_1 > 0) {
      __retres_1 = 1;
      goto return_label_label_1;
    }
    else {
      __retres_1 = -1;
      goto return_label_label_1;
    }
    return_label_label_1: return_variable_relational_1 = __retres_1;
  }
  {
    int __retres_2;
    int tmp_0_2;
    int tmp_2_2;
    int tmp_4_2;
    int tmp_6_2;
    int tmp_8_2;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x1.isNull == 0) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    int comp_2 = 0;
    if (x2.score[0] == x1.score[0]) tmp_0_2 = 0;
    else {
      int tmp_2;
      if (x2.score[0] > x1.score[0]) tmp_2 = 1; else tmp_2 = -1;
      tmp_0_2 = tmp_2;
    }
    comp_2 += tmp_0_2;
    if (x2.score[1] == x1.score[1]) tmp_2_2 = 0;
    else {
      int tmp_1_2;
      if (x2.score[1] > x1.score[1]) tmp_1_2 = 1; else tmp_1_2 = -1;
      tmp_2_2 = tmp_1_2;
    }
    comp_2 += tmp_2_2;
    if (x2.score[2] == x1.score[2]) tmp_4_2 = 0;
    else {
      int tmp_3_2;
      if (x2.score[2] > x1.score[2]) tmp_3_2 = 1; else tmp_3_2 = -1;
      tmp_4_2 = tmp_3_2;
    }
    comp_2 += tmp_4_2;
    if (x2.score[3] == x1.score[3]) tmp_6_2 = 0;
    else {
      int tmp_5_2;
      if (x2.score[3] > x1.score[3]) tmp_5_2 = 1; else tmp_5_2 = -1;
      tmp_6_2 = tmp_5_2;
    }
    comp_2 += tmp_6_2;
    if (x2.score[4] == x1.score[4]) tmp_8_2 = 0;
    else {
      int tmp_7_2;
      if (x2.score[4] > x1.score[4]) tmp_7_2 = 1; else tmp_7_2 = -1;
      tmp_8_2 = tmp_7_2;
    }
    comp_2 += tmp_8_2;
    if (comp_2 == 0) {
      __retres_2 = 0;
      goto return_label_label_2;
    }
    if (comp_2 > 0) {
      __retres_2 = 1;
      goto return_label_label_2;
    }
    else {
      __retres_2 = -1;
      goto return_label_label_2;
    }
    return_label_label_2: return_variable_relational_2 = __retres_2;
  }
  /*@ check
      Rpp: return_variable_relational_1 ≡ -return_variable_relational_2;
  */
  return;
}

/*@ requires x1.isNull ≢ 0;
    requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0;
 */
void relational_wrapper_2(struct Chromosome x1, struct Chromosome x2,
                          struct Chromosome x3)
{
  int return_variable_relational_3;
  int return_variable_relational_4;
  int return_variable_relational_5;
  {
    int __retres_3;
    int tmp_0_3;
    int tmp_2_3;
    int tmp_4_3;
    int tmp_6_3;
    int tmp_8_3;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    int comp_3 = 0;
    if (x1.score[0] == x2.score[0]) tmp_0_3 = 0;
    else {
      int tmp_3;
      if (x1.score[0] > x2.score[0]) tmp_3 = 1; else tmp_3 = -1;
      tmp_0_3 = tmp_3;
    }
    comp_3 += tmp_0_3;
    if (x1.score[1] == x2.score[1]) tmp_2_3 = 0;
    else {
      int tmp_1_3;
      if (x1.score[1] > x2.score[1]) tmp_1_3 = 1; else tmp_1_3 = -1;
      tmp_2_3 = tmp_1_3;
    }
    comp_3 += tmp_2_3;
    if (x1.score[2] == x2.score[2]) tmp_4_3 = 0;
    else {
      int tmp_3_3;
      if (x1.score[2] > x2.score[2]) tmp_3_3 = 1; else tmp_3_3 = -1;
      tmp_4_3 = tmp_3_3;
    }
    comp_3 += tmp_4_3;
    if (x1.score[3] == x2.score[3]) tmp_6_3 = 0;
    else {
      int tmp_5_3;
      if (x1.score[3] > x2.score[3]) tmp_5_3 = 1; else tmp_5_3 = -1;
      tmp_6_3 = tmp_5_3;
    }
    comp_3 += tmp_6_3;
    if (x1.score[4] == x2.score[4]) tmp_8_3 = 0;
    else {
      int tmp_7_3;
      if (x1.score[4] > x2.score[4]) tmp_7_3 = 1; else tmp_7_3 = -1;
      tmp_8_3 = tmp_7_3;
    }
    comp_3 += tmp_8_3;
    if (comp_3 == 0) {
      __retres_3 = 0;
      goto return_label_label_3;
    }
    if (comp_3 > 0) {
      __retres_3 = 1;
      goto return_label_label_3;
    }
    else {
      __retres_3 = -1;
      goto return_label_label_3;
    }
    return_label_label_3: return_variable_relational_3 = __retres_3;
  }
  {
    int __retres_4;
    int tmp_0_4;
    int tmp_2_4;
    int tmp_4_4;
    int tmp_6_4;
    int tmp_8_4;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    int comp_4 = 0;
    if (x2.score[0] == x3.score[0]) tmp_0_4 = 0;
    else {
      int tmp_4;
      if (x2.score[0] > x3.score[0]) tmp_4 = 1; else tmp_4 = -1;
      tmp_0_4 = tmp_4;
    }
    comp_4 += tmp_0_4;
    if (x2.score[1] == x3.score[1]) tmp_2_4 = 0;
    else {
      int tmp_1_4;
      if (x2.score[1] > x3.score[1]) tmp_1_4 = 1; else tmp_1_4 = -1;
      tmp_2_4 = tmp_1_4;
    }
    comp_4 += tmp_2_4;
    if (x2.score[2] == x3.score[2]) tmp_4_4 = 0;
    else {
      int tmp_3_4;
      if (x2.score[2] > x3.score[2]) tmp_3_4 = 1; else tmp_3_4 = -1;
      tmp_4_4 = tmp_3_4;
    }
    comp_4 += tmp_4_4;
    if (x2.score[3] == x3.score[3]) tmp_6_4 = 0;
    else {
      int tmp_5_4;
      if (x2.score[3] > x3.score[3]) tmp_5_4 = 1; else tmp_5_4 = -1;
      tmp_6_4 = tmp_5_4;
    }
    comp_4 += tmp_6_4;
    if (x2.score[4] == x3.score[4]) tmp_8_4 = 0;
    else {
      int tmp_7_4;
      if (x2.score[4] > x3.score[4]) tmp_7_4 = 1; else tmp_7_4 = -1;
      tmp_8_4 = tmp_7_4;
    }
    comp_4 += tmp_8_4;
    if (comp_4 == 0) {
      __retres_4 = 0;
      goto return_label_label_4;
    }
    if (comp_4 > 0) {
      __retres_4 = 1;
      goto return_label_label_4;
    }
    else {
      __retres_4 = -1;
      goto return_label_label_4;
    }
    return_label_label_4: return_variable_relational_4 = __retres_4;
  }
  {
    int __retres_5;
    int tmp_0_5;
    int tmp_2_5;
    int tmp_4_5;
    int tmp_6_5;
    int tmp_8_5;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_5 = 1;
      goto return_label_label_5;
    }
    int comp_5 = 0;
    if (x1.score[0] == x3.score[0]) tmp_0_5 = 0;
    else {
      int tmp_5;
      if (x1.score[0] > x3.score[0]) tmp_5 = 1; else tmp_5 = -1;
      tmp_0_5 = tmp_5;
    }
    comp_5 += tmp_0_5;
    if (x1.score[1] == x3.score[1]) tmp_2_5 = 0;
    else {
      int tmp_1_5;
      if (x1.score[1] > x3.score[1]) tmp_1_5 = 1; else tmp_1_5 = -1;
      tmp_2_5 = tmp_1_5;
    }
    comp_5 += tmp_2_5;
    if (x1.score[2] == x3.score[2]) tmp_4_5 = 0;
    else {
      int tmp_3_5;
      if (x1.score[2] > x3.score[2]) tmp_3_5 = 1; else tmp_3_5 = -1;
      tmp_4_5 = tmp_3_5;
    }
    comp_5 += tmp_4_5;
    if (x1.score[3] == x3.score[3]) tmp_6_5 = 0;
    else {
      int tmp_5_5;
      if (x1.score[3] > x3.score[3]) tmp_5_5 = 1; else tmp_5_5 = -1;
      tmp_6_5 = tmp_5_5;
    }
    comp_5 += tmp_6_5;
    if (x1.score[4] == x3.score[4]) tmp_8_5 = 0;
    else {
      int tmp_7_5;
      if (x1.score[4] > x3.score[4]) tmp_7_5 = 1; else tmp_7_5 = -1;
      tmp_8_5 = tmp_7_5;
    }
    comp_5 += tmp_8_5;
    if (comp_5 == 0) {
      __retres_5 = 0;
      goto return_label_label_5;
    }
    if (comp_5 > 0) {
      __retres_5 = 1;
      goto return_label_label_5;
    }
    else {
      __retres_5 = -1;
      goto return_label_label_5;
    }
    return_label_label_5: return_variable_relational_5 = __retres_5;
  }
  /*@ check
      Rpp:
        return_variable_relational_3 > 0 ∧ return_variable_relational_4 > 0 ⇒
        return_variable_relational_5 > 0;
  */
  return;
}

/*@ requires x2.isNull ≢ 0;
    requires x1.isNull ≢ 0;
    requires x1.isNull ≢ 0;
 */
void relational_wrapper_3(struct Chromosome x1, struct Chromosome x2,
                          struct Chromosome x3)
{
  int return_variable_relational_6;
  int return_variable_relational_7;
  int return_variable_relational_8;
  {
    int __retres_6;
    int tmp_0_6;
    int tmp_2_6;
    int tmp_4_6;
    int tmp_6_6;
    int tmp_8_6;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x2.isNull == 0) {
      __retres_6 = 1;
      goto return_label_label_6;
    }
    int comp_6 = 0;
    if (x1.score[0] == x2.score[0]) tmp_0_6 = 0;
    else {
      int tmp_6;
      if (x1.score[0] > x2.score[0]) tmp_6 = 1; else tmp_6 = -1;
      tmp_0_6 = tmp_6;
    }
    comp_6 += tmp_0_6;
    if (x1.score[1] == x2.score[1]) tmp_2_6 = 0;
    else {
      int tmp_1_6;
      if (x1.score[1] > x2.score[1]) tmp_1_6 = 1; else tmp_1_6 = -1;
      tmp_2_6 = tmp_1_6;
    }
    comp_6 += tmp_2_6;
    if (x1.score[2] == x2.score[2]) tmp_4_6 = 0;
    else {
      int tmp_3_6;
      if (x1.score[2] > x2.score[2]) tmp_3_6 = 1; else tmp_3_6 = -1;
      tmp_4_6 = tmp_3_6;
    }
    comp_6 += tmp_4_6;
    if (x1.score[3] == x2.score[3]) tmp_6_6 = 0;
    else {
      int tmp_5_6;
      if (x1.score[3] > x2.score[3]) tmp_5_6 = 1; else tmp_5_6 = -1;
      tmp_6_6 = tmp_5_6;
    }
    comp_6 += tmp_6_6;
    if (x1.score[4] == x2.score[4]) tmp_8_6 = 0;
    else {
      int tmp_7_6;
      if (x1.score[4] > x2.score[4]) tmp_7_6 = 1; else tmp_7_6 = -1;
      tmp_8_6 = tmp_7_6;
    }
    comp_6 += tmp_8_6;
    if (comp_6 == 0) {
      __retres_6 = 0;
      goto return_label_label_6;
    }
    if (comp_6 > 0) {
      __retres_6 = 1;
      goto return_label_label_6;
    }
    else {
      __retres_6 = -1;
      goto return_label_label_6;
    }
    return_label_label_6: return_variable_relational_6 = __retres_6;
  }
  {
    int __retres_7;
    int tmp_0_7;
    int tmp_2_7;
    int tmp_4_7;
    int tmp_6_7;
    int tmp_8_7;
    /*@ assert Rpp: x1.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_7 = 1;
      goto return_label_label_7;
    }
    int comp_7 = 0;
    if (x1.score[0] == x3.score[0]) tmp_0_7 = 0;
    else {
      int tmp_7;
      if (x1.score[0] > x3.score[0]) tmp_7 = 1; else tmp_7 = -1;
      tmp_0_7 = tmp_7;
    }
    comp_7 += tmp_0_7;
    if (x1.score[1] == x3.score[1]) tmp_2_7 = 0;
    else {
      int tmp_1_7;
      if (x1.score[1] > x3.score[1]) tmp_1_7 = 1; else tmp_1_7 = -1;
      tmp_2_7 = tmp_1_7;
    }
    comp_7 += tmp_2_7;
    if (x1.score[2] == x3.score[2]) tmp_4_7 = 0;
    else {
      int tmp_3_7;
      if (x1.score[2] > x3.score[2]) tmp_3_7 = 1; else tmp_3_7 = -1;
      tmp_4_7 = tmp_3_7;
    }
    comp_7 += tmp_4_7;
    if (x1.score[3] == x3.score[3]) tmp_6_7 = 0;
    else {
      int tmp_5_7;
      if (x1.score[3] > x3.score[3]) tmp_5_7 = 1; else tmp_5_7 = -1;
      tmp_6_7 = tmp_5_7;
    }
    comp_7 += tmp_6_7;
    if (x1.score[4] == x3.score[4]) tmp_8_7 = 0;
    else {
      int tmp_7_7;
      if (x1.score[4] > x3.score[4]) tmp_7_7 = 1; else tmp_7_7 = -1;
      tmp_8_7 = tmp_7_7;
    }
    comp_7 += tmp_8_7;
    if (comp_7 == 0) {
      __retres_7 = 0;
      goto return_label_label_7;
    }
    if (comp_7 > 0) {
      __retres_7 = 1;
      goto return_label_label_7;
    }
    else {
      __retres_7 = -1;
      goto return_label_label_7;
    }
    return_label_label_7: return_variable_relational_7 = __retres_7;
  }
  {
    int __retres_8;
    int tmp_0_8;
    int tmp_2_8;
    int tmp_4_8;
    int tmp_6_8;
    int tmp_8_8;
    /*@ assert Rpp: x2.isNull ≢ 0; */
    if (x3.isNull == 0) {
      __retres_8 = 1;
      goto return_label_label_8;
    }
    int comp_8 = 0;
    if (x2.score[0] == x3.score[0]) tmp_0_8 = 0;
    else {
      int tmp_8;
      if (x2.score[0] > x3.score[0]) tmp_8 = 1; else tmp_8 = -1;
      tmp_0_8 = tmp_8;
    }
    comp_8 += tmp_0_8;
    if (x2.score[1] == x3.score[1]) tmp_2_8 = 0;
    else {
      int tmp_1_8;
      if (x2.score[1] > x3.score[1]) tmp_1_8 = 1; else tmp_1_8 = -1;
      tmp_2_8 = tmp_1_8;
    }
    comp_8 += tmp_2_8;
    if (x2.score[2] == x3.score[2]) tmp_4_8 = 0;
    else {
      int tmp_3_8;
      if (x2.score[2] > x3.score[2]) tmp_3_8 = 1; else tmp_3_8 = -1;
      tmp_4_8 = tmp_3_8;
    }
    comp_8 += tmp_4_8;
    if (x2.score[3] == x3.score[3]) tmp_6_8 = 0;
    else {
      int tmp_5_8;
      if (x2.score[3] > x3.score[3]) tmp_5_8 = 1; else tmp_5_8 = -1;
      tmp_6_8 = tmp_5_8;
    }
    comp_8 += tmp_6_8;
    if (x2.score[4] == x3.score[4]) tmp_8_8 = 0;
    else {
      int tmp_7_8;
      if (x2.score[4] > x3.score[4]) tmp_7_8 = 1; else tmp_7_8 = -1;
      tmp_8_8 = tmp_7_8;
    }
    comp_8 += tmp_8_8;
    if (comp_8 == 0) {
      __retres_8 = 0;
      goto return_label_label_8;
    }
    if (comp_8 > 0) {
      __retres_8 = 1;
      goto return_label_label_8;
    }
    else {
      __retres_8 = -1;
      goto return_label_label_8;
    }
    return_label_label_8: return_variable_relational_8 = __retres_8;
  }
  /*@ check
      Rpp:
        return_variable_relational_6 ≡ 0 ⇒
        return_variable_relational_7 ≡ return_variable_relational_8;
  */
  return;
}


[rpp] ***************************************
[rpp] Rpp end
[rpp] ***************************************
